<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lecture Notes on Notes</title>
    <link>http://zedchance.github.io/notes/</link>
    <description>Recent content in Lecture Notes on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sample</title>
      <link>http://zedchance.github.io/notes/sample/</link>
      <pubDate>Wed, 24 Feb 2021 22:10:59 -0800</pubDate>
      
      <guid>http://zedchance.github.io/notes/sample/</guid>
      <description>Format testing #  Voluptatem sunt ut asperiores. #  Quis iusto non et aut omnis officiis tempora. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit. Quis iusto non et aut omnis officiis tempora. Quis iusto non et aut omnis officiis tempora. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-resources/</guid>
      <description>   Resources      Text book UniversityPhysicsVolume2-OP.pdf   Lab coversheet p105L Lab Coversheet sp17.pdf   Text 3 notes p105 Test 3 notes.pdf       My stuff      Quiz 6 Quiz-6.pdf   Test 2 PHYS105-test2.pdf    </description>
    </item>
    
    <item>
      <title>CS10-labs</title>
      <link>http://zedchance.github.io/notes/CS10/CS10-Processing-labs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS10/CS10-Processing-labs/</guid>
      <description>CS10 Labs #  Lab 1 - My &amp;ldquo;creature&amp;rdquo; #  /* Zed Chance Lab 1 CS 10 Summer 18 My &amp;#34;creature&amp;#34; */ //Setup size(800,600); background(0); //MENS BATHROOM SIGN  //Signpost rectMode(CENTER); noStroke(); fill(113,86,86); rect(200,475,30,250); //Background circle fill(70,89,255); ellipseMode(CENTER); stroke(255); strokeWeight(5); ellipse(200,200,350,350); //Head noStroke(); fill(220); ellipse(200,100,70,70); //Torso rectMode(CENTER); rect(200,190,60,100); //Arms rect(200,150,100,20,10); rectMode(CORNER); rect(145,140,20,100,10); rect(235,140,20,100,10); //Legs rect(170,230,27,100,10); rect(203,230,27,100,10); //WOMENS BATHROOM SIGN  //Signpost rectMode(CENTER); noStroke(); fill(113,86,86); rect(600,475,30,250); //Background circle fill(70,89,255); ellipseMode(CENTER); stroke(255); strokeWeight(5); ellipse(600,200,350,350); //Head noStroke(); fill(220); ellipse(600,100,70,70); //Torso rectMode(CENTER); rect(600,190,60,100); //Arms rect(600,150,100,20,10); rectMode(CORNER); stroke(220); strokeWeight(25); line(560,155,535,235); line(640,155,665,235); //Dress quad(585,190,565,255,635,255,615,190); //Legs noStroke(); rect(570,230,27,100,10); rect(603,230,27,100,10); //ARROW SIGNS //left background rectMode(CENTER); fill(220); rect(200,450,150,75,10); fill(150); rect(200,450,145,70,10); //left arrow fill(255); rect(210,450,60,25); triangle(190,425,190,475,150,450); //right background rectMode(CENTER); fill(220); rect(600,450,150,75,10); fill(150); rect(600,450,145,70,10); //right arrow fill(255); rect(590,450,60,25); triangle(610,425,610,475,650,450); Lab 2 - Making my creature redraw with the mouse&amp;rsquo;s movement #  /* Zed Chance Lab 2 CS 10 Summer 18 Making my creature redraw with the mouse&amp;#39;s movement */ //Setup void setup() { size(400, 600); background(0); //Signpost  rectMode(CENTER); noStroke(); fill(113, 86, 86); rect(200, 475, 30, 250); //Background circle  fill(70, 89, 255); ellipseMode(CENTER); stroke(255); strokeWeight(5); ellipse(200, 200, 350, 350); } //Continuously redraw the human void draw() { //Declare mouse  int x = mouseX; int y = mouseY; //Head  stroke(0); strokeWeight(1); //Had to add weight, otherwise it was hard to tell if it was moving  fill(220,x,y); ellipse(x,y,70,70); //was 200,100  //Arms  rect(x,y+50,100,20,10); //was 200,150  rectMode(CORNER); rect(x-55,y+40,20,100,10); //was 145/140  rect(x+35,y+40,20,100,10); //was 235/140  //Legs  rect(x-30,y+130,27,100,10); //was 170,230  rect(x+3,y+130,27,100,10); //was 203,230  //Torso  rectMode(CENTER); rect(x,y+90,60,100); //was 200,190 } //Click mouse to reset void mousePressed() { background(0); //Signpost  rectMode(CENTER); noStroke(); fill(113, 86, 86); rect(200, 475, 30, 250); //Background circle  fill(70, 89, 255); ellipseMode(CENTER); stroke(255); strokeWeight(5); ellipse(200, 200, 350, 350); println(hour(),&amp;#34;:&amp;#34;,minute(),&amp;#34;:&amp;#34;,second(),&amp;#34;-&amp;#34;,&amp;#34;Mouse input detected: Background reset&amp;#34;); } Lab 4 - Launching my &amp;ldquo;creature&amp;rdquo; like a rocket #  /* Zed Chance Lab 4 CS 10 Summer 18 Launching my &amp;#34;creature&amp;#34; like a rocket */ //Initialize variables float r = 0; float g = 0; float b = 0; float x = 0; float y = 0; void setup() { size(400,600); x = width/2; //x is centered  y = height + 50; //starts 50 pixels below  background(0); } void draw() { background(0); //Head  noStroke(); fill(255,255,255); ellipse(x,y,70,70); //Arms  rect(x,y+50,100,20,10); rectMode(CORNER); rect(x-55,y+40,20,100,10); rect(x+35,y+40,20,100,10); //Legs  rect(x-30,y+130,27,100,10); rect(x+3,y+130,27,100,10); //Torso  rectMode(CENTER); rect(x,y+90,60,100); //Rockets  r); b = 5; g); fill(r,g,b); //Jets random color between yellow and red  triangle(x-55,y+135,x-35,y+135,x-45,y+160); //Hand jets  triangle(x+55,y+135,x+35,y+135,x+45,y+160); triangle(x-30,y+225,x-5,y+225,x-18,y+255); //Feet jets  triangle(x+30,y+225,x+5,y+225,x+18,y+255); //Blast off!</description>
    </item>
    
    <item>
      <title>CS12-lecture-notes</title>
      <link>http://zedchance.github.io/notes/CS12/CS12-lecture-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS12/CS12-lecture-notes/</guid>
      <description>CS 12 Lecture notes #  Aug 20, 2018 #  [X] Download Java JDK and jGRASP [2018-08-20]
A class is a â€œblueprint&amp;quot; for objects in object-oriented coding
 Aug 22, 2018 #  class #  All Java programs are structured in a class. It is a the fundamental part of a Java program. The simplest programs have a main method, which contains all of the code. The actual java library only has around 40 commands, but it has an extensive library of classes that you can use.</description>
    </item>
    
    <item>
      <title>CS13-lecture-notes</title>
      <link>http://zedchance.github.io/notes/CS13/CS13-lecture-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS13/CS13-lecture-notes/</guid>
      <description>CS 13 Lecture Notes #  Jan 28, 2019 #   Download BlueJ [2019-01-29]  Weather class #  public class Weather { private double highTemp; private double lowTemp; private String condition; private int rainChain; public Weather (double h, double l, String c, int r) { highTemp = h; lowTemp = l; condition = c; rainChain = r; } public double delta() { return highTemp - lowTemp; } public String toString() { return &amp;#34;High: &amp;#34; + highTemp + &amp;#34;, Low: &amp;#34; + lowTemp + &amp;#34;, Condition: &amp;#34; + condition + &amp;#34;, Chance of rain: &amp;#34; + rainChance; } } Using this class we can make another to populate a forecast</description>
    </item>
    
    <item>
      <title>CS130-exercise-solutions-1</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-exercise-solutions-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-exercise-solutions-1/</guid>
      <description>For example if   \( n = 6 \)  :
 \[\begin{aligned} t(n) &amp;amp;= t(n) \cdot t(n-1) \cdot t(n-2) \cdot t(n-3) \cdot t(n-4) \cdot t(n-5) \\ &amp;amp;= \underbrace{6 \cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1}_{\text{this happens } n \text{ times}} \end{aligned}\]  So we have a time complexity of  \( O(n) \)  .
   </description>
    </item>
    
    <item>
      <title>CS130-lecture-20200831</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200831/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200831/</guid>
      <description>Syllabus #  The required text is available for free in the school library
Both sections will take the exam together
Module 1 #  Test cases will usually be provided.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20200902</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200902/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200902/</guid>
      <description>Concerning the survey from last class #  The differences between an array and a linked list:
 Access: arrays can access an spot instantly, linked lists need to iterate from the head until they reach the target. Size: arrays are fixed in size, linked lists can become bigger or smaller  Stacks can be implemented using a linked list or an array. FILO
Queues can be implemented using a linked list or a circular array.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20200909</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200909/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200909/</guid>
      <description>Runtime analysis cont. #  Big Oh notation is pretty much the only asymptotic notation used.
Initializing arrays of ints in Java initializes everything to 0, so it is a linear process. The if statement has an else with a loop, so at a worse case it is O(n).
On line 73, you have to count the other functions runtime analysis also.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20200914</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200914/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200914/</guid>
      <description>Annoucements #  New webcam usage survey
Exercise solutions:
 Runtime analysis cont. #  Space complexity analysis #  1MB) kB
Strings have the fields: start address, length, offset, hash
For example:
str = &amp;quot;Java&amp;quot;; str1); The space is constant because the sub string isn&amp;rsquo;t copied, just more references are made.
 c + 4n, so O(n)  32 + 64n)  Normally you don&amp;rsquo;t count the space of the parameters or the return.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20200916</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200916/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200916/</guid>
      <description>Exercise solutions #  For example if   \( n = 6 \)  :
 \[\begin{aligned} t(n) &amp;amp;= t(n) \cdot t(n-1) \cdot t(n-2) \cdot t(n-3) \cdot t(n-4) \cdot t(n-5) \\ &amp;amp;= \underbrace{6 \cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1}_{\text{this happens} \,n\, \text{times}} \end{aligned}\]  So we have a time complexity of  \( O(n) \)  Space complexity cont. #  Time complexity of this is  \( O(n) \)  .</description>
    </item>
    
    <item>
      <title>CS130-lecture-20200921</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200921/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200921/</guid>
      <description>Annoucements #  First assignment open
Mergesort cont. #  Solution to last exercise:
 The first sort method:
 space complexity is O(n) running time is  The second method
 space complexity is O(1) running time is O(nlog(n))  An example of a stable sorting algorithm:
Unsorted: [3(1), 2, 1, 5, 3(2)] (where the (1) indicates that it is the first 3 in the array)
Sorted: [1, 2, 3(1), 3(2), 5] this is stable [1, 2, 3(2), 3(1), 5] this is unstable</description>
    </item>
    
    <item>
      <title>CS130-lecture-20200923</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200923/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200923/</guid>
      <description>Annoucements #  Assignment 1 has unlimited attempts, the last attempt counts.
Substrings #  Quicksort cont. #  Space complexity is O(1). Running time is O(n).
Exercise posted:
Space complexity best case is O(log(n)), and worst case is O(n). Running time best case is O(log(n)), and worst case is O(n).</description>
    </item>
    
    <item>
      <title>CS130-lecture-20200928</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200928/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200928/</guid>
      <description>Dev environment #  JDK 11 JUnit 5 Module with all docs for setup
Filenames: assignment1_ZedChance.zip
Quicksort exercise solutions #  Quicksort cont. #  Runningtime is O(n)
Priority queues #  a is complete b is complete c is incomplete d is not a binary tree e is incomplete f is complete
a is a height of 0 b-d is a height of 1 e-f is a height of 2</description>
    </item>
    
    <item>
      <title>CS130-lecture-20200930</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200930/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200930/</guid>
      <description>Regarding quicksort 3-way #  Used for when there is a lot of duplicate keys, for example sorting by US state.
Heap and priority queues #  Index starts at 1 so the math to find the child or parent works.
Size starts at 0, but is incremented BEFORE it is used for the pq position.
Space complexity of swim method is O(1).
Swap root and highest index and decrement index to break it off</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201005</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201005/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201005/</guid>
      <description>Assignment 1 solutions #  Heapsort #  With the goal of non-decreasing order.
Sink each parent starting with the last, and working down.
Now to sort, swap last element, reduce heap size, and sink item down
The element at the end will be put into place.
Running time for sink is O(lg(n)) Running time for entire sort is O(nlg(n)) worst case, best case)
Space complexity for sink is O(1) Space complexity for sort is O(1)</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201007</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201007/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201007/</guid>
      <description>Running time complexity: 3n + k) Space time complexity: O(n + k) Stable algorithm
Sort from least significant position to most significant position
 Runtime of findLargestStrings is O((n+m)log(m)) Space complexity is O(m)</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201012</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201012/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201012/</guid>
      <description>Annoucements #  Midterm exam on 21, unless pushed back to 26th.
The format is open book, open notes, no webcam. During class time so it will be timed. One question at a time, randomly shuffled, and you can&amp;rsquo;t go back to work on previous questions.
Radix sort #  In this example: D = 3, K = 10. Sort from the least significant digit to the most significant digit.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201014</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201014/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201014/</guid>
      <description>RE: Midterm exam #  Oct 26, 7p-8:15p
Make sure to join using SSO.
One question at a time, can&amp;rsquo;t go back. Open notes, open book.
Binary search tree cont. #  Solutions for last exercises
This is invalid
This is valid
This is valid
Best case runtime is O(1). Worst case runtime is O(n).
Best case space complexity is O(1). Worst case space complexity is O(n).
Best case runtime for put method is O(1).</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201019</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201019/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201019/</guid>
      <description>BST cont. #  Running time is O(n). Space complexity best case is O(lgn). Space complexity worst case is O(n).</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201021</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201021/</guid>
      <description>Midterm review #  MidTermReview.txt
Contents Everything covered from Module 1 to Module 6
Analysis of algorithm
 Asymptotic notations Best-case, average-case, worst-case Be able to provide time and space analysis for an given algorithm  Memory of a process
 What are the four sections? (code, data, heap, stack) What does each section contain? Understand function call and stack-based memory allocation  Recursion
 Base case Recursive vs. iterative approach, every recursive method can be implemented iteratively Consider stack-based memory allocation in space analysis  Sorting Algorithms</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201028</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201028/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201028/</guid>
      <description>2-3 Tree #   An empty tree is a 2-3 A BST is a 2-3 search tree no is yes  Search miss
Worst case running time for 2-3 tree search is O(lgn). Remember the height of a 2-3 tree is between (floor(\log_3 N)) and (floor(log_2 N)). So in the worst case it searches the entire height of the tree + 1.
It inserts it into the 3 node to preserve the balance of the 2-3 tree.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201102</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201102/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201102/</guid>
      <description>One line is black, 2 lines is red
is false  Runtime of rotateLeft is O(1). Space complexity is O(1).
Our definition is left leaning so it needs to be rotated left.
The runtime of put is O(lgn). Space complexity is O(lgn).</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201104</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201104/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201104/</guid>
      <description>Midterm solutions #  Red-black BST exercise solution #  M is the number of children per node.
Each non-leaf node has between 3 and 5 children for above example. Each leaf node has between 3 and 5 data items.
Unordered symbol tables #  </description>
    </item>
    
    <item>
      <title>CS130-lecture-20201109</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201109/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201109/</guid>
      <description>Hash codes should use all of the fields.
Any perms of strings with the same letters will have the same hashcode, therefore this is a bad hash function.
The worst case runtime for put is O(n). The best case runtime for put is O(1). Space complexity for put is O(1).
Best case runtime for get is O(1) and worst case is O(n). Space complexity for get is O(1).
The load factor is the number of key value pairs (N) divided by the table size (M), so (\frac{10}{5}).</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201116</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201116/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201116/</guid>
      <description>C goes to the next open value because they collide
resize is called if the table is &amp;gt;= being half full.
The first 8 insertions before the resize:
Put the existing keys (they rehash), then continue putting the rest of the list
A is true B is false C is true (another case of A basically) D is false (another case of B)
For get: best case runtime is O(1), worst case is O(n).</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201118</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201118/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201118/</guid>
      <description>Suppose: n = inputs.length m)`
Average runtime is O(n + m). Space complexity is O(m).
Module 9, Ch 1.5 #  CORRECTION: Count should be decremented each time thru</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201123</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201123/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201123/</guid>
      <description>Quick union example
   index 0 1 2 3 4 5 6 7 8 9     id 1 1 1 8 3 0 5 1 8 8       id 0 1 2 3 4     id 1 2 3 4 4    O(n^2) runtime if unioning linear items.
Weighted union example
   id 0 1 2 3 4 5 6 7 8 9     id 6 2 6 4 4 6 6 2 4 4    CORRECTION: 0 should be the root.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201125</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201125/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201125/</guid>
      <description>Answer: ( \frac{2E}{V}) avg number of degree.
If you have V, no self loop, no parallel edges, what is maximum edges?
Answer: ( \frac{V(V-1)}{2} )
So if you have (V), considered sparse.
Adjacency lists represent each edge twice, so the number of spaces taken (number of nodes) is (2E). So the full space used by this is (V + 2E), so our space complexity is O(E + V).
(V - 1)  Depth-first search trace on whiteboard:</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201130</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201130/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201130/</guid>
      <description>Exercise solns #  Graph cont. #  Gets shortest path because it starts by searching all edges that are 1 away, then 2 away, and so forth.
Tracing the BFS implementation
Enter the loop
Path tree on right ^
Performance:
 Worst case runtime is O(E) or O(V+E) Worst case space complexity O(V), when every vertice is added to the queue   There is a maximum of (V(V-1)) vertices in a digraph with no parallel or self-loops.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201202</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201202/</guid>
      <description>Exercise solutions #  On the whiteboard:
Start on vertex 0
Move onto vertex 2, need to exhaust all vertices
Move onto vertex 7
The reverse post order is : 8, 7, 2, 3, 0, 6, 9, 10, 11, 12, 1, 5, 4
Graph cont. #  These are considered strongly connected. Also considered a strongly connected digraph.
5 strongly connected components.
Reversed graphs are still strongly connected in the same components.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201207</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201207/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201207/</guid>
      <description>Exercise solutions #  Single source shortest paths #  TYPO fixed in column 5 relax 4:
The max space taken by the IndexMinPQ is O(V - 1).
Decimal to binary, and back
Is a BST seach a P problem? Yes It is also a NP problem. It is not a NP-Complete problem.</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201209</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201209/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201209/</guid>
      <description>Review #  Assignment 5 solutions #  8:
9:
CORRECTION: 8 is a weight of 78, the picture is correct but the table shows 82.
11:
Assignment 4 solutions #  Rest of code in solutions on canvas
Final review #  </description>
    </item>
    
    <item>
      <title>CS130-priority-queues</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-priority-queues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-priority-queues/</guid>
      <description>Maxpq #  MaxPQ.java
/** * MaxPQ (maximum priority queue) implemented from Algorithms (Sedgewick, Wayne) * pg. 318 */ public class MaxPQ&amp;lt;Key extends Comparable&amp;lt;Key&amp;gt;&amp;gt; { private Key[] pq; // heap-ordered complete binary tree  private int n = 0; // pq[0] is unused, heap uses pq[1..n]  /** * Create new empty max priority queue. * Useful if inserting one by one, where each element * is inserting at the end and &amp;#34;swims&amp;#34; up into place.</description>
    </item>
    
    <item>
      <title>CS130-sorting-algorithms</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-sorting-algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-sorting-algorithms/</guid>
      <description>Merge #  Merge.java
/** * Mergesort algorithm implemented from Algorithms (Sedgewick, Wayne) * Section 2.2, pg. 270 */ public class Merge { private static Comparable[] aux; public static void sort(Comparable[] a) { aux = new Comparable[a.length]; sort(a, 0, a.length - 1); } private static void sort(Comparable[] a, int lo, int hi) { // sort a[lo..hi]  if (hi &amp;lt;= lo) return; // base case  int mid) / 2; // find mid point  sort(a, lo, mid); // sort left half (recursive call)  sort(a, mid + 1, hi); // sort right half (recursive call)  merge(a, lo, mid, hi); // merge 2 sorted arrays  } private static void merge(Comparable[] a, int lo, int mid, int hi) { // merge a[lo.</description>
    </item>
    
    <item>
      <title>CS131-lecture-20200901</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20200901/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20200901/</guid>
      <description>Syllabus #  CSC131Syllabus_Penn.pdf
Send email prior to office hours, makes it easier.
A team project will happen.
Notes are allowed during quizes! Don&amp;rsquo;t miss a quiz!
https://padlet.com/azizipenn/cuj51f9q36w079ko
What is computer engineering? #  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20200903</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20200903/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20200903/</guid>
      <description>HW 1 #  Article on Boeing 737 MAX disaster. Due next week.
How do we create software? #  This is the &amp;ldquo;original approach&amp;rdquo; to software engineering:
Deployments can be done by the developers, or a separate team. Maintenance is typically done by developers, original or not.
SLDC Models #  Waterfall Model #  The completed output from one phase is the necessary input to the next level.</description>
    </item>
    
    <item>
      <title>CS131-lecture-20200908</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20200908/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20200908/</guid>
      <description>Agile cont. #  The generic model for &amp;ldquo;doing&amp;rdquo; agile
We will be using Scrum for this class.
A daily standup is a timed event where the whole team gathers and stands together and checks in with each other.
Retrospectives: at the end of a piece of work you will look back and try to improve.</description>
    </item>
    
    <item>
      <title>CS131-lecture-20200910</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20200910/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20200910/</guid>
      <description>Breakout room exercise #  Our group is thinking waterfall.
Agile
Spiral
 Agile frameworks #  An example of a Trello board</description>
    </item>
    
    <item>
      <title>CS131-lecture-20200915</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20200915/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20200915/</guid>
      <description>Annoucements #  First quiz at the end of next week, covers the first 4 weeks. It&amp;rsquo;ll be open over the weekend. Use case homework has been published. Going to hold off on discussion on the 737 MAX HW until case study is finished. Team survey is open!
Software requirements #  How do you translate all of the elicited data into requirements?
 In-Class_and_HW_Activity 3_Use Case Description.pdf
Business Use Case Name: International flight check-in</description>
    </item>
    
    <item>
      <title>CS131-lecture-20200917</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20200917/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20200917/</guid>
      <description>Use case template recap #  Traditional requirements #  Agile requirements #  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20200922</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20200922/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20200922/</guid>
      <description>3Cs #  https://docs.google.com/presentation/d/1zvpwRAHGJwOE9QqhNkLQHHftV6guk7rNxwDQ6RuYhZA/edit#slide=id.g998494e7fd_0_119
https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-activity-diagram/;WWWSESSIONID=C67B13698C795B1642BC5FB95C52D8F8.www1</description>
    </item>
    
    <item>
      <title>CS131-lecture-20200924</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20200924/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20200924/</guid>
      <description>Annoucements #  Quiz opens up tonight at midnight
User stories cont #  Scrum #  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20200929</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20200929/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20200929/</guid>
      <description>Annoucements #  HW4 is due Oct 5 Team assignment 1 agreement is posted
3C examples #  A good example:
A &amp;ldquo;cloudy&amp;rdquo; example:
Another good example:
&amp;ldquo;Kinda cloudy&amp;rdquo; example:
Human computer interation concepts #  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20201001</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201001/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201001/</guid>
      <description>HCI cont. #  ProjectDesc-OscarsProject.pdf
Some questions we might want to ask:
  How do the users usually watch movies
 tv with streaming service pc with streaming service x3    how often do you watch movies
  How far through the movies do you usually watch
  What language do they speak
  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20201006</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201006/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201006/</guid>
      <description>737 Boeing disaster #  Unexpected by the pilots, the engineers knew.</description>
    </item>
    
    <item>
      <title>CS131-lecture-20201008</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201008/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201008/</guid>
      <description>HCI finished #  Accessability slide
 </description>
    </item>
    
    <item>
      <title>CS131-lecture-20201013</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201013/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201013/</guid>
      <description>Project, sprint 0 #  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20201015</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201015/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201015/</guid>
      <description>Git #  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20201020</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201020/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201020/</guid>
      <description>Annoucements #  Our next quiz is next fri 30
REST #  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20201022</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201022/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201022/</guid>
      <description>Software architecture #  Architecture has styles, and this can be translated to software terms also
CRC (Class responsibility collaboration) #  CRC Cards are a brainstorming technique to help you think about the design of your application.
Like the 3C&amp;rsquo;s card, its meant to be done on a 3x5 card. The assumption is its not permanent, you&amp;rsquo;re not locked in.
Classes should only be responsible for its own information. It shouldn&amp;rsquo;t be responsible for keeping track of or holding another class&amp;rsquo;s data.</description>
    </item>
    
    <item>
      <title>CS131-lecture-20201027</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201027/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201027/</guid>
      <description>Sprint 0 Review and Retrospective #  The review is about the product.
The retrospective is about the process. Make some concrete goals for the next sprint. Instead of &amp;ldquo;improve communication&amp;rdquo;, make it something concrete like &amp;ldquo;We agree to communicate via X and respond within Y time.&amp;rdquo;
1. What went well in the sprint? #  Our team was able to create a persona from the contextual inquiry of multiple people.</description>
    </item>
    
    <item>
      <title>CS131-lecture-20201029</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201029/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201029/</guid>
      <description>Reminder #  Quiz opens at fri and closes mon at midnight. 35 min to complete 17 questions.
Architecture cont. #  SOA: Service oriented architecture</description>
    </item>
    
    <item>
      <title>CS131-lecture-20201103</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201103/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201103/</guid>
      <description>https://www.youtube.com/watch?v=UI6lqHOVHic</description>
    </item>
    
    <item>
      <title>CS131-lecture-20201105</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201105/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201105/</guid>
      <description>A solution
&amp;ldquo;Design specs&amp;rdquo; aren&amp;rsquo;t a part of the agile process, but this basic idea holds in sprint plannings.</description>
    </item>
    
    <item>
      <title>CS131-lecture-20201110</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201110/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201110/</guid>
      <description>Correction from UML lectures #  Correction: there is no distinction between a filled in triangle between inheritance when inheriting from abstract or concrete.
SOLID cont. #  Code Design #  Singleton pattern #  Factory pattern #  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20201112</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201112/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201112/</guid>
      <description>Architecture
 Application â€“ layers â€“ what do the layers do Where do the different components live Whats the interface between layers  Design principles
 Symptoms of bad design â€“ rigid, fragile, easier to modify with hacks (viscosity) SOLID â€“ employed by frameworks  Design patterns
 Used in frameworks â€“ a lot employ the factory pattern May be used ourselves, iterator pattern? Singleton?  On tuesday we need a diagram of the application structure.</description>
    </item>
    
    <item>
      <title>CS131-lecture-20201119</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201119/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201119/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CS131-lecture-20201124</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201124/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201124/</guid>
      <description>Final will be essay and same format as other exams. May be cumulative.
Project management #  Verification and validation #  </description>
    </item>
    
    <item>
      <title>CS131-lecture-20201201</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201201/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201201/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CS131-lecture-20201203</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201203/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201203/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CS131-lecture-20201208</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-lecture-20201208/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-lecture-20201208/</guid>
      <description>DevOps #  </description>
    </item>
    
    <item>
      <title>CS131-study-guide-1</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-study-guide-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-study-guide-1/</guid>
      <description>Study guide 1 #  Fall2020-Quiz 01 Study Guide_Revised.pdf
1. Know one of the definitions of software engineering presented in class. #  2. Be able to identify an SDLC model given a diagram and/or itâ€™s unique characteristics #  Waterfall #  The completed output from one phase is the necessary input to the next level.
Prototype model #  Spiral model #  Adhoc model #  Agile #  3.</description>
    </item>
    
    <item>
      <title>CS131-study-guide-2</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-study-guide-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-study-guide-2/</guid>
      <description>Study guide 2 #  1. Know the main purpose and general process of conducting a Contextual Inquiry. #  2. Know what is a persona. #  3. Be able to describe the flow of an Activity Diagram. #  4. Know Scrum roles, artifacts and events. #    Understand their definition/purpose/responsibilities.
  Know the Scrum lifecycle and order of events.
  5. Know the 3Câ€™s(Card, Conversation, Confirmation).</description>
    </item>
    
    <item>
      <title>CS131-study-guide-3</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-study-guide-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-study-guide-3/</guid>
      <description>Software Architecture #  1. Given an architecture diagram or description, identify the architecture style. #  2. Know 1 advantage and disadvantage of: #    Client-Server
  Layered &amp;amp; Mutli-tiered
  Model-View-Controller
  Pipe and filter
  3. Given a class diagram, answer some questions about relationships/properties. #  4. Name and explain(brief) some symptoms of poor design. #  5. Name and explain(brief) three general design principles.</description>
    </item>
    
    <item>
      <title>CS131-study-guide-4</title>
      <link>http://zedchance.github.io/notes/CS131/CS131-study-guide-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS131/CS131-study-guide-4/</guid>
      <description>CS131-study-guide-1 #   Software engineering definitions SDLC lifecycles SDLC phases Pros and cons of each SDLC model Top agile techniques Agile frameworks, characteristics Scrum roles/responsibilities Requirements, properties of good requirements IEEE quality attributes Use case 3C&amp;rsquo;s User stories, how to break them up  CS131-study-guide-2 #   Contextual inquiry Persona Scrum roles, artifacts, events 3C&amp;rsquo;s Mockups, wireframe, story board Design elements, SAC, CAP FeVER XML, JSON 200, 404, 500 HTTP codes Git commands, basic  CS131-study-guide-3 #   Architecture style, monolith, client-server, layered, pipe/filter, event driven, model-view-controller, service based, microservice Advantages and disadvantages of architectures Class diagrams Symptoms of poor design Design principles, SOLID, KISS, YAGNI etc SOLID principles in detail Coupling and cohesion Why use design patterns?</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210125</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210125/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210125/</guid>
      <description>Abstraction #   A generalization of something too complext to be dealt with in its entirety For humans not computers  It is a techinque we use to compensate for the relatively puny capacity of our brains There aren&amp;rsquo;t enough neurons (or connections) in our brain to process the rich detail around us during a single moment in time   Successful designers developer abstractions and hierarchies of abstractions for complex entities and move up and down this hierarchy with splendid ease.</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210208</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210208/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210208/</guid>
      <description>UML #  Since there isn&amp;rsquo;t a way to pass a new DisplayPanel object into the constructor, it is a composition.
Example CRC card building
Clean code #  Design principles #  &amp;ldquo;The Art of Clean Code&amp;rdquo; video #  Summary:
Victor Rentea&amp;rsquo;s clean code video had a lot of amazing information for making sure that the code you write is considered &amp;ldquo;clean.&amp;rdquo; I think that clean code is a very important part of being a good programmer because it conveys the sense that you care about your team&amp;rsquo;s ability to read your code.</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210210</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210210/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210210/</guid>
      <description>Inheritance #  Replace inheritance with delegation #  Polymorphism #  Interfaces #  Extending multiple interfaces only applies to other interfaces</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210215</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210215/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210215/</guid>
      <description>CN1 #  Components #  Layout managers #  Building the GUI #  </description>
    </item>
    
    <item>
      <title>CS133-lecture-20210217</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210217/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210217/</guid>
      <description>Event driven #  laidOut() is called once the component is fully &amp;ldquo;laid out&amp;rdquo; (once it&amp;rsquo;s drawn after the show() method is called).
Command design pattern #  Observer design pattern #  The old way of doing it: #  </description>
    </item>
    
    <item>
      <title>CS133-lecture-20210227</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210227/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210227/</guid>
      <description>Design Patterns #  Strategy pattern #  An example in codename one
Composite pattern #  An example of the &amp;ldquo;wrong way to do things&amp;rdquo;
A refactored way:
Decorator pattern #  As a reminder, this is not the same as the composite pattern:
State pattern #  Pree&amp;rsquo;s metapatterns #  Concerning the state pattern vs the strategy pattern
Singleton pattern #  Note the synchronize keyword in the method header, this makes the method thread safe.</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210301</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210301/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210301/</guid>
      <description>Visitor pattern #  This becomes hard to maintain, and violates the open closed principle.
The concrete visitors are the extensible operations we can perform to add more features to the concrete elements.
Why the visitor pattern? #  Single vs double dispatch (polymorphism). Java supports single dispatch out of the box, but double isn&amp;rsquo;t supported out of the box.
Animal dog = new Dog(); Animal cat = new Cat(); Double dispatch is not openly supported, in other words you can&amp;rsquo;t have unique interactions between 2 different classes dynamically.</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210307</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210307/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210307/</guid>
      <description>Make your code suck less #  12. Schedule time to lower technical debt #  11. Favor high cohesion #  10. Favor loosing coupling #  9. Program with intention #  8. Avoid primitive obsession #  7. Prefer clear code over clever code #  6. Apply Zinsser&amp;rsquo;s principle on writing #  5. Comment why, not what #  4. Avoid long methods â€“ Apply SLAP #  3.</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210310</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210310/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210310/</guid>
      <description>Basic color theory #  RGB is an additive color model.
CMYK is a subtractive color model.
Refresh rates, frame buffers, v-sync #  Video game aesthetics #  </description>
    </item>
    
    <item>
      <title>CS133-lecture-20210314</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210314/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210314/</guid>
      <description>GUI Basics #  CN1 Component example #  In DigitalClockComponent:
Then in AppMain:</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210407</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210407/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210407/</guid>
      <description>Graphics #  Transformations #  Transformations using matrices #  Applying transformation with matrices #  Active matrix areas #  Concatenation of transformations #  Images within 2D games #  Image characteristics #  Image repository #  Alpha blending #  Alpha compositing #  Additive blending #  </description>
    </item>
    
    <item>
      <title>CS133-lecture-20210423</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210423/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210423/</guid>
      <description>Animation #  Frame based #  Collision detection #  ICollider interface #  Handling collision #  Sound #  Playing sounds in CN1 #  Looping sounds #  Multiple dispatch #  </description>
    </item>
    
    <item>
      <title>CS133-lecture-20210504</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210504/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210504/</guid>
      <description>Applications of transforms #  Transform class #  Local coordinate systems #  Example Triangle class #  Mapping to display location #  Using the Graphics context #  Making transformable objects #  Composing transforms #  Hierarchical objects #  Dynamic transformations #  Audio #  Lessons learned in audio programming #  </description>
    </item>
    
    <item>
      <title>CS133-lecture-20210513</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210513/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210513/</guid>
      <description>Multitasking #  Threads vs processes #  Java threads #  Counter thread example #  Concurrent output example #  Multiple user threads example #  Priorities and synchronization #  Overview of Thread methods #  Common uses #  </description>
    </item>
    
    <item>
      <title>CS133-lecture-20210519</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210519/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210519/</guid>
      <description>Mobile development â€“ App distribution #  Certificates, UDID, signing authorities #  Signing and distribution #  Building native apps using CN1 #  Downloading/installing native apps #  </description>
    </item>
    
    <item>
      <title>CS134-lecture-20210601</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210601/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210601/</guid>
      <description>Course orientation #  Syllabus #  134Sy_Summer2021.pdf  Notes during orientation #   5 assignments, 5 weekly homeworks Effort may be taken into account during assignment grading Assignments build upon the previous assignment Midterm on June 22, and final on last day  Introduction to database management systems #  Files
 persistent on disk easy to work with   DBMS
 needs knowledge of software needs to design database structure can handle more complex situations    Imagine we have 2 different files: student_info and grade_record</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210602</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210602/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210602/</guid>
      <description>DBMS cont. #  Database users #  If we&amp;rsquo;re storing student information in a database, we&amp;rsquo;ll have fields such as
 age birthdate  If we want to store one in the database, which should we pick? Why only one?
We should choose the birthdate because
 we can derive the age birthdate is also more accurate of a measure of age we won&amp;rsquo;t need to increment the age in the database every year  What is the disadvantage of saving both?</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210603</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210603/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210603/</guid>
      <description>ER model cont. #  Structure constraint cont. #  The reason we have both   \( M \)  and  \( N \)  is because they are are both in the same association. It is okay to reuse  \( M \)  in other places in the diagram.
Note: The double line from employee to works_for indicates the total participation.  Weak entity #  Entity has</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210607</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210607/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210607/</guid>
      <description>ER model exercise cont. #  Add this assignment into the weekly hw upload.    The university keeps track of each student&amp;rsquo;s name (first name, middle name, last name), student number, social security number, permanent address and phone, birthdate, sex, class (e.g. freshman, sophomore, &amp;hellip;, graduate), and degree program (e.g. B.A., B.S., &amp;hellip;, Ph.D.). Some user applications need to refer to the street, city, state, and zip of the student&amp;rsquo;s permanent address, and to the student&amp;rsquo;s last name.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210608</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210608/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210608/</guid>
      <description>RE assignment 1 #  account_number is a unique value.
Relational model cont. #  State cont. #  R(color, bit) dom(color) = {blue, green, red} dom(bit) = {0, 1}    color bit     blue 0   blue 1   green 0   green 1   red 0   red 1    This is all the possible combinations, but lets say we have a state like</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210609</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210609/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210609/</guid>
      <description>Relational database schemas #  IC = integrity constraints
Recall, a state is a collection of all the instances.
Example of schema and state #  Valid/invalid state #  Update operations on relations #  Whenever we do any of these update operations, there is a chance that the constraints may be violated. These violations may propagate to other tables.
REJECT is the most common action taken. CASCADE is also common, but requires setup in DBMS.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210610</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210610/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210610/</guid>
      <description>Relational model cont. #  Weak entity #  Notice that the employee will be the owner of the depending weak entity. The primary key will be part of the foreign key and the weak attribute.
Remember,
 primary keys are underlined foreign keys have arrows pointing to the other reference  Multivalues attributes #  Consider this ER-diagram,
We can handle this in our relational model by creating another table called dept_locations,</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210614</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210614/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210614/</guid>
      <description>Announcements
 Assignment 2 is posted   Relational algebra cont. #  SELECT cont. #  When cascaded: the conditions can be in different order but they will produce the same output. The conditions can be connected by logical and.
If we compose 2 select operations
  \[\begin{aligned} \sigma_{\text{salary } &amp;gt; 7300} ( \sigma_{\text{dno = } 5 } (\text{ employee })) \end{aligned}\]  We can combine the 2 conditions with a logical and</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210615</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210615/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210615/</guid>
      <description>Assignment 1 solution #  Relational algebra cont. #  Intersection #  They must be union compatible.
  \[\begin{aligned} a \leftarrow \text{student} \cap \text{instructor} \end{aligned}\]  Include in weekly homework.  Set difference #  Must be union compatible.
The result is a new relation with the same schema.
 \[\begin{aligned} a \leftarrow \text{student} - \text{instructor} \end{aligned}\]   \[\begin{aligned} a \leftarrow \text{instructor} - \text{student} \end{aligned}\]  This returns only John Smith.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210616</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210616/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210616/</guid>
      <description>Relational algebra cont. #  Natural join cont #    \[\begin{aligned} \text{dept locs} \leftarrow \text{department} * \text{locations} \end{aligned}\]  Our natural join results in this table
Common mistakes when using join #  Its common to misuse join/natural join. Consider this example, if we have 2 entities,  \( R \)  and  \( S \)  :
 \[\begin{aligned} R(a, b) &amp;amp;&amp;amp; S(b, d, f) \end{aligned}\]  If we want to join on  \( b \)  , we can do the natural join:</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210617</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210617/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210617/</guid>
      <description>Notes on upcoming exam #  The join symbol on canvas will be represented as
SQL #  File: SQL Slides  We can use SQL to implement our relational models in code.
History #  We will be covering the SQL core.
 DDL = data definition language, this corresponds to our relational model. insert, delete, update query  DBMS should implement all of the SQL standards, but they may not in some places.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210621</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210621/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210621/</guid>
      <description>Assignment 2 solution #  Assignment 3 solutions #  SQL cont. #  INSERT #  The attributes (VALUES) are listed one by one in the same order as when the table was declared. If they are put in the wrong order the attributes will go into the wrong places (or violate domain constraints). You can specify the attributes and their order is
INSERT INTO EMPLOYEE(FNAME, LNAME, SSN, DNO) VALUES (&amp;#39;Richard&amp;#39;, &amp;#39;Marini&amp;#39;, &amp;#39;1932914921&amp;#39;, 4) The attributes that are not null must be specified in the command.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210623</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210623/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210623/</guid>
      <description>MySQL assignment 4 #  Note
 Login to MySQL server using csus username (ssh) MySQL on this server is case sensitive  SQL cont. #  Aliases #  Aliases are other names for a table.
Consider our normal company schema,
SELECT DNAME, L.DLOCATION FROM DEPARTMENT AS D, DEPT_LOCATION AS L WHERE D.DNUMBER=L.DNUMBER; Here
 D is an alias for DEPARTMENT L is an alias for DEPT_LOCATION  To make 2 aliases of one entity:</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210624</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210624/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210624/</guid>
      <description>SQL cont. #  Comparison operators #  To list all the names of employees whose salary is greater than the salary of all the employees in department 5:
SELECT e1.lname, e1.fname FROM employee AS e1 WHERE e1.salary &amp;gt; ALL (SELECT e.salary FROM employee AS e WHERE e.dno=5);  it is suggested to use aliases when using nested queries if instead our where clause was E1.SALARY &amp;gt; some (..., it doesn&amp;rsquo;t need to be greater than all items in bag, just some (1 is enough).</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210628</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210628/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210628/</guid>
      <description>SQL cont. #  Aggregate functions cont. #  Include in weekly assignment.  List each employee(ssn, fname, lname) who has more than 3 daughters and the salary of the employee is less than 60000.
SELECT e.ssn, e.fname, e.lname FROM employee AS e WHERE e.salary &amp;lt; 60000 AND (SELECT COUNT(*) FROM dependent AS dep WHERE e.ssn=dep.essn AND dep.relationship=&amp;#39;daughter&amp;#39;) &amp;gt; 3; GROUP BY clause #  A clause GROUP BY is used to create sub groups.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210629</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210629/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210629/</guid>
      <description>SQL cont. #  Subqueries can be used inside insert statements:
This insert statement will update the numbers dynamically based on the response from the subquery. The next time an employee is inserted, we can run this insert statement to update DEPTS_INFO using a trigger.
Or, we can use views&amp;hellip;
Virtual table view #  CREATE VIEW dept_info_view AS SELECT dname, COUNT(*) AS no_of_emps, SUM(salary) AS total_sal FROM department, employee WHERE dnumber=dno GROUP BY dname; This results in a self updating table, called a view:</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210702</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210702/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210702/</guid>
      <description>Normalization cont. #  We can also use an alternate notation to indicate dependencies:
If we remove the ssn then the dependency is no longer true.
Second normal form #  An attribute that is part of any candidate key is a prime attribute. If we have a relation   \[\begin{aligned} R(a, b, c, d, e) \end{aligned}\]  and our candidate keys are  \( \{a,b\} \)  and  \( c \)  , that means our prime attributes are  \( a,b,c \)  .</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210707</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210707/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210707/</guid>
      <description>Storage cont. #  Sorted files cont. #  Since inserting into a ordered structure is expensive, we keep track of new inserts in a separate file.
Master files are ordered, overflow file are unordered.
New inserts go to the overflow file.
When we search:
 Start by searching the ordered master file,   \( O(\lg n) \)   If we don&amp;rsquo;t find it, it is possible that it is in the overflow file   Search the unordered overflow file,  \( O(n) \)  however it is a small file  If at any point during the search process we find a match, the search returns.</description>
    </item>
    
    <item>
      <title>CS135-hw-20210203</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-hw-20210203/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-hw-20210203/</guid>
      <description>FSM #  Alphabets: {a, b} or {0, 1}
  Strings which begin and end with a different letter
#alphabet a b #states 0 aa ab ba bb #initial 0 #accepting ab ba #transitions 0:a&amp;gt;aa 0:b&amp;gt;bb aa:a&amp;gt;aa aa:b&amp;gt;ab bb:b&amp;gt;bb bb:a&amp;gt;ba ab:b&amp;gt;ab ab:a&amp;gt;aa ba:a&amp;gt;ba ba:b&amp;gt;bb   Strings with at least 2 occurences of ab
#alphabet a b #states 0 s1 1 s2 2 #initial 0 #accepting 2 #transitions 0:a&amp;gt;s1 0:b&amp;gt;0 s1:a&amp;gt;s1 s1:b&amp;gt;1 1:a&amp;gt;s2 1:b&amp;gt;1 s2:a&amp;gt;s2 s2:b&amp;gt;2 2:a&amp;gt;2 2:b&amp;gt;2   Strings with exactly one 0 and at least one 1</description>
    </item>
    
    <item>
      <title>CS135-hw-20210302</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-hw-20210302/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-hw-20210302/</guid>
      <description>Old MM2 hw #  1 Write a recursive Racket function &amp;ldquo;sum-alternate&amp;rdquo; that takes a positive integer x as a parameter. The function should return the sum of all the integers x, x-2, x-4, x-6, etc, as long as the numbers are positive. For example, (sum-alternate 5) should evaluate to 5+3+1, and (sum-alternate 6) should evaluate to 6+4+2.
(define (sum-acc sum acc) (if (&amp;lt;= sum 0) acc (sum-acc (- sum 2) (+ sum acc)))) (define (sum-alternate sum) (sum-acc sum 0))    2 Write a recursive Racket function &amp;ldquo;sum&amp;rdquo; that takes two integers as parameters, each greater or equal to zero, and evaluates to their sum.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210126</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210126/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210126/</guid>
      <description>http://athena.ecs.csus.edu/~mei/135/index.html
CT = Computing theory
Resources on the Prof&amp;rsquo;s website for Set Theory to review
This is not correct:</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210129</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210129/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210129/</guid>
      <description>dfa.pdf</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210201</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210201/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210201/</guid>
      <description>http://krovetz.net/135/module_reg/fa_design.html
This FSM keeps track of whether there are an even or odd number of a&amp;rsquo;s.
#alphabet a b #states even odd #initial even #accepting odd #transitions even:a&amp;gt;odd even:b&amp;gt;even odd:a&amp;gt;even odd:b&amp;gt;odd FSM Design advice #   Have a meaning for each state, its the only memory a FA has First write just the part that accepts good strings Make sure your FA is legal. Double check that every state has an arrow out for each alphabet symbol and that their&amp;rsquo;s a start state Try to break your solutions.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210204</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210204/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210204/</guid>
      <description>re.pdf</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210205</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210205/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210205/</guid>
      <description>DFA, RE, and NFA have equal expressive power.
 Every DFA can be converted into an equivalent RE Every RE can be converted into an equivalent NFA Every NFA can be converted into an equivalent DFA  Today we will take a NFA and convert it into a DFA.
abba will leave you in states 1 and 3.
Our NFA:
#states empty 13 2 23 3 123 #initial 13 #accepting 13 123 #alphabet a b #transitions 13:a&amp;gt;13 13:b&amp;gt;2 2:a&amp;gt;23 2:b&amp;gt;3 23:a&amp;gt;123 23:b&amp;gt;3 3:a&amp;gt;13 3:b&amp;gt;empty 123:a&amp;gt;123 123:b&amp;gt;23 empty:a&amp;gt;empty empty:b&amp;gt;empty This is now a legal DFA, except the accept state.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210209</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210209/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210209/</guid>
      <description>How to show what a finite atomata can&amp;rsquo;t do #  Pumping Lemma for regular languages #  Let   \(M\)  be a DFA with  \(p\)  states. Let  \(s \in L(M)\)  , and  \(|s| \geq p\)  , &amp;ldquo;the length of  \(s\)  is greater than or equal to the number of states.&amp;rdquo;
At one point we reach a state that is going to be visited twice first, we can call this &amp;ldquo;the first state that gets repeated.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210216</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210216/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210216/</guid>
      <description>Regular languages #  Any language specifiable by regular expression or finite automata.
RE to NFA #  Building blocks
Example #  (0+1)*1</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210217</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210217/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210217/</guid>
      <description>Example proofs for pumping lemma #  1 #  Let   \(L\)  be the set of all strings with an equal number of 0 and 1 over the alphabet {0,1}. i.e. { \(\lambda\)  , 01, 10, 0011, 0101, 0110, 1001 &amp;hellip;}
Theorem:  \(L\)  is not regular.
Proof:
For purposes of contradicition assume  \(L\)  is regular. Because  \(L\)  is regular there must be a pumping length  \(p\)  .</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210218</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210218/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210218/</guid>
      <description>Immutability #  Strings in Java are an example of immutability.
Something like
s = s + &amp;#34;abc&amp;#34;; Actually creates a new object with the 2 new strings, and the reference to s is updated, but actual strings are immutable.
Lists #  In Java a popular List class is LinkedList.
A change to either a or b will change both!
a.add(1, 5); b.get(1); Lets make an immutable List (pseudo): #  a = new List b = a.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210225</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210225/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210225/</guid>
      <description>Tail recursion and accumulators #  Tail recursion #  Claim: recursive overhead is expensive.
Not always the case.
For example:
We have a function foo(x) that takes a parameter x.
foo(x): if (x == 0) return answer else // do stuff, then make recursive call return foo(x - 1) The value of x is being decremented, and being passed in as the new x in the next call. Once the base case is returned there isn&amp;rsquo;t any more work that needs to be done.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210227</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210227/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210227/</guid>
      <description>Functional Programming #  Other functions may write to this.sum, so this could be incorrect in the future.
Any loop can be turned into a recursively structured function.
Example of pow #  int pow(int x, int y) if (very small) solve directly else solve with smaller_pow So when is exponentiation very small? This is the base case, where y = 0.
int pow(int x, int y) if (y == 0) return 1 else solve with smaller_pow Now we need to figure out the else branch, we know that x^y = x^(y-1) * x.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210307</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210307/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210307/</guid>
      <description>Mergesort in Racket #  Mergesort breaks the list in half and sorts each half recursively.
Some pseudo:
ms(list) front = front half of list back = back half of list ms(front) ms(back) return merge(front, back) In racket, there is a function called drop that takes a list and a number. It drops the numbers off the list. There is also take, that takes the first number of elements of the list and returns them.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210309</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210309/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210309/</guid>
      <description>Tail recursive sum #  (define (sum xs) (if (empty? xs) 0 (+ (first xs) (sum (rest xs))))) This isn&amp;rsquo;t tail recursive however. The recursive call must be the last call in the function. Lets define it tail recursively, we can use an accumulator:
Invariant: acc + sum of xs is desired answer.
(define (sum-helper acc xs) (if (empty? xs) acc (sum-helper (+ acc (first xs)) (rest xs)))) (define (sum xs) (sum-helper 0 xs)) (sum &amp;#39;(1 2 3 4)) ; 10 </description>
    </item>
    
    <item>
      <title>CS135-lecture-20210310</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210310/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210310/</guid>
      <description>Context-free grammars #  Recall, for regular languages: regular expressions are generators, and finite automata are recognizers. Context-free grammars are the recognizers of context free languages.
Any string we can make in this process is in the language. Any string we can&amp;rsquo;t make in this process is not in the language.
So   \( \{a^n b^n: \text{n is integer}\} \)  is context free. Remember, we couldn&amp;rsquo;t describe this language using regular expressions because finite automata don&amp;rsquo;t have memory.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210311</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210311/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210311/</guid>
      <description>Introduction to push-down automata #  A push-down automata is a finite automata with memory, more than what state its currently in. It is a non-deterministic finite automata with a stack for memory. Since it is drawn very similarly to drawing finite automata, we will just notate how the stack is being manipulated on the transitions.
Drawing transitions for PDAs #  Each arrow has a triple: a,b,c, where
 a is the char to consume from input (or   \( \lambda \)  ) b is the char to pop from the top of the stack, b is always popped when following this transition c is a string to push onto the stack (from right to left)  An arrow can be followed if and only if:</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210315</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210315/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210315/</guid>
      <description>Parse trees and Ambiguity #  Parse trees are graphical representations of what each non-terminal produces during a derivation.
An example of a parse tree:
  \( S \to AB \\ A \to aaA \mid \lambda \\ B \to bbB \mid b\)  This grammar produces all strings that have an even number of  \( a \)  &amp;rsquo;s and an odd number of  \( b \)  &amp;rsquo;s.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210318</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210318/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210318/</guid>
      <description>Pumping lemma for CFL #  PL for RL
Given   \( RL, L \)  there exists  \( p \)  such that if  \( w \in L \)  and  \( |w| \geq p \)  then there exists  \( w = xyz \)  where
  \( |y| &amp;gt; 0 \)    \( |xy| \leq p \)    \( xy^iz \in L \)    We consume  \( w \)  and we get to a state that is the first repeated state.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210329</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210329/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210329/</guid>
      <description>CFG to PDA algorithm #  Starting from a CFG and going to a PDA is a lot easier than going the other way.
Lets start out with this grammar:
  \( S \to AB \\ A \to aA \mid \lambda \\ B \to bB \mid \lambda\)  We can start our PDA by drawing 3 states, one start and one accept.
The first transition triple is  \( \lambda, \empty, S \empty \)  , and the second transition is  \( \lambda, \empty, \empty \)  .</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210405</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210405/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210405/</guid>
      <description>Introduction to Compilers #  Structure of a compiler #  The economy of programming languages #  Lexical analysis #  Lexical examples #  Lexical specification #  Introduction to parsing #  Predictive parsing #  </description>
    </item>
    
    <item>
      <title>CS135-lecture-20210407</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210407/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210407/</guid>
      <description>Compiler front end #  Compilers are presented with source code, and that goes through the front end of the compiler. This front end builds a parse tree and sends that to the back end of the compiler. The back end produces an executable.
The front end is composed of multiple steps
 Lexical analysis, sometimes called the scanner. This takes the source code and produces tokens. Syntactic analysis, called a parser.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210419</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210419/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210419/</guid>
      <description>Lexical specification to DFA #  WORD: aa+aaa OTHER: aa* Heres an NFA for each regular expression:
So now we can take the NFA and make a DFA out of it. Recall, the scanner will need to use a DFA.
Then we can label the accept states with the lexeme types:
So for example, to scan this sequence:
a aa aaa aaaa Nullablity #  A non-terminal, or a sequence of non-terminals, is nullable if the empty string can be derived from it.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210423</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210423/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210423/</guid>
      <description>Introduction to Turing machines #  Note: See text book readings for formal history of the Turing machine.  A Turing machine has a tape that is infinitely long in both directions. The machine has a tape head that can read and write to the tape.
The control unit of the Turing machine is an automata. Each transition has a pair   \( x,y \)  , follow the arrow if the tape head is over  \( x \)  , and do operation  \( y \)  .</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210426</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210426/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210426/</guid>
      <description>Parsing using Java #  Consider
  \( S&amp;#39; \to S\$ \\ S \to aSx \mid bSx \mid \lambda \)  Heres the predictor table
   Production  \( \text{First (right hand side)} \)   If nullable,  \( \text{Follow(left hand side)} \)        \( S \to aSx \)    \( a \)       \( S \to bSx \)    \( b \)       \( S \to \lambda \)     \( x,\$ \)      In code:</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210428</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210428/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210428/</guid>
      <description>Acceptance algorithm #  Decision problems #  A decision problem is a problem that has a binary answer, true or false (or accept and reject). A decision problem may be something like: &amp;ldquo;given   \( x \)  , is  \( x \)  prime?&amp;rdquo; We can use decision problems to prove the limitations for Turing machines, because there isn&amp;rsquo;t a pumping lemma for Turing machines.
If we can show that a decision problem can&amp;rsquo;t be solved, then we can show that computers can&amp;rsquo;t solve the same problem.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210505</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210505/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210505/</guid>
      <description>bf #  A programming language that is reminiscent of a Turning machine.
Read more
There is a tape and a pointer to that tape. The tape holds data, and its infinite to right. Each position on the tape is initialized to a 0.
00000000000000000... ^ Each position holds a single byte. The tapehead starts at the very most left position.
The program is a sequence of characters. The legal characters are</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210511</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210511/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210511/</guid>
      <description>More reduction examples #  Recap on reductions: A reduction is simply a hypothetical algorithm.
ASolver(a) ... BSolver(...) ... ASolver relies on the existence of BSolver. So ASolver reduces to BSolver. So if BSolver exists, then ASolver exists.
Acceptance problem #  If we have an algorithm accept(m,x), we are wondering if we run the algorithm m on input x, it will either output &amp;ldquo;accept&amp;rdquo; or &amp;ldquo;reject&amp;rdquo;. The claim is there is no algorithm that can produce this on all inputs (m,x).</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210126</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210126/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210126/</guid>
      <description>csc137syl Spring-2021.docx</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210128</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210128/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210128/</guid>
      <description>Ch1.pdf</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210202</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210202/</guid>
      <description>CSc 137 Presentation -Topics-1-1.docx
How to convert 5.375 to a floating point representation using IEEE 754:
 Convert the number to a binary representation Start with the whole part: 5 101 Then do the fractional part: .375 Using successive multiplication   \[0.375 * 2 = 0 &amp;#43; .75 \\ 0.75 * 2 = 1 &amp;#43; .5 \\ 0.5 * 5 = 1 &amp;#43; .0 \]  So .375 = .</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210204</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210204/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210204/</guid>
      <description>Continued from last lecture:
How to convert 5.375 to a floating point representation using IEEE 754:
  Convert the number to a binary representation Start with the whole part: 5 = 101. Then do the fractional part: .375 Using successive multiplication
  \[ \begin{aligned} 0.375 * 2 = 0 &amp;#43; .75 \\ 0.75 * 2 = 1 &amp;#43; .5 \\ 0.5 * 5 = 1 &amp;#43; .0 \end{aligned} \]  So .</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210209</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210209/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210209/</guid>
      <description>Ch2.pdf
LUT = lookup table
SOP = sum of products
DeMorgan&amp;rsquo;s theorem #   Two or more variables NAND&amp;rsquo;d together is the same as the two terms inverted and OR&amp;rsquo;d  Two or more variables NOR&amp;rsquo;d together is the same as the two variables inverted and AND&amp;rsquo;d together   Lets show this via tables for these two equations:
  \[\begin{aligned} F1 &amp;amp;= F2 \\ \neg(A \cdot B) &amp;amp;= \neg A &amp;#43; \neg B \end{aligned}\]  Here is a table for  \(F1\)  :</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210211</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210211/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210211/</guid>
      <description>A Karnaugh map is a graphical representation of a logic function. The map for   \(n\)  -input logic function is an array with  \(2^n\)  cells, (one for each possible input combination). To represent a logic function in a k-map, we copy the 1s from the truth table to the corresponding cells. Implicants are squares or rectangles made up of minterms Pairs of adjacent 1 cells in the k-map have minterms that differ in ONLY 1 variable The minterm pairs can be combined into a single product term using the generalization of theorem T10:  T10) = term   Thus, we can use k-maps to simplify the sum of the function.</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210216</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210216/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210216/</guid>
      <description>Ch3.pdf
Propagation delay is the time delta between the input and the output.
Design of a full adder #  Carry Propagate Adder (CPA)
 Full adder is an arithmetic logic unit or circuit to add two single digit numbers with Carry-in It is still combinational circuit with inputs Ax and Bx  Sx is the sum (1 bit) C-in carry in Cx is the carry out   Adder is also called Ripple Carry Adder (RCA) Fundamental circuit for an adder and has longest propagation delay that is proportional to the number of the carry bits  To estimate the propagation delay of an   \( n \)  -bit CPA:</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210218</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210218/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210218/</guid>
      <description>CPA cont. #  Design a 1-bit full adder #     Ax Bx C-in Sx C-out     0 0 0 0 0   0 0 1 1 0   0 1 0 1 0   0 1 1 0 1   1 0 0 1 0   1 0 1 0 1   1 1 0 0 1   1 1 1 1 1    We can reduce the diagonals in Sx: note that Sx is true if only 1 of the inputs is on, or all are on (this is XOR).</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210223</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210223/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210223/</guid>
      <description>CS137-lecture-20210223 #  DeMorgan&amp;rsquo;s Theorem #  Theorem 1:   \(\neg(x \cdot y) = \neg x &amp;#43; \neg y\)  Theorem 2:  \(\neg(x &amp;#43; y) = \neg x \cdot \neg y\)  Steps to convert to all NAND gates:
  Replace each NOT gate with its equivalent NAND gate. Connecting the inputs of a NAND gate makes a NOT gate.
  Place two NOT gates on each of signals going into the final OR.</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210225</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210225/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210225/</guid>
      <description>Multiplexers #  An everyday example of a multiplexer is a TV remote.
 Selecting of data or information is a critical function in a digital system and computers. A multiplexer (mux for short) is a digital switch. Mux is a circuit used to select and route any of the several inputs to an output signal. Mux is a combination circuit, it has the following:     \( 2^n \)  inputs  \( n \)  control inputs, selector signals one set of output   For a mux, the value of the control inputs (selector signal) determines the data input that is selected.</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210302</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210302/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210302/</guid>
      <description>Sequential Circuits #  In combinational circuits, the outputs are only dependent on the inputs. In sequential circuits, the outputs depend on the inputs, and the previous state of the circuit.
Core modules #  S-R Latches
 Latches are basic building blocks of flip-flops (basic memory unit) A 1 bit latch will store 1 bit, 4 bit latch stores 4 bits, and so forth &amp;hellip; Two types of memory elements based on the type of trigger that is suitable to operate Latches, asynchronous Latches operate with an enable signal, which is level sensitive  D flip-flop</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210304</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210304/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210304/</guid>
      <description>Sequential circuits cont. #  Creating the S-R latch cont. #        \( S \)    \( R \)    \( Q_t \)    \( Q_{t&amp;#43;1} \)       0 0  \( Q_t \)    \( Q_t \)     0 1 0 0   1 0 1 1   1 1  Undefined     \( Q_{t &amp;#43; 1} \)  is the &#34;</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210309</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210309/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210309/</guid>
      <description>Exam 1 review #  </description>
    </item>
    
    <item>
      <title>CS137-lecture-20210316</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210316/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210316/</guid>
      <description>Sequential circuits #  Ch5.pdf
 All small and large sequential circuits are made of flip-flops and set of combinational circuits. Contrary to combinational circuits, a sequential circuit design has states and transitions from current state to next state. A sequential circuit design problem is typically modeled as a finite state diagram (FSD). An FSD consists of circles as states and arrows as transitions, which specifies the behavior of the system.</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210318</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210318/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210318/</guid>
      <description>FSM cont. #  Design rules #   If we cannot determine function(s) of combinational circuit(s) in advance:  Model FSM as FSD  May need to design bit-slice 1st   Determine number of flip flops (dependent on the number of states you need) Convert the FSD to truth table Find minimal expressions for next state variable(s) and output(s) Draw the complete circuit with flip-flops   Otherwise  Use bit-serial design with known modules Or, bit-parallel design with known modules    Example #  Lets design a Moore state machine that accepts the string   \( 101 \)  .</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210330</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210330/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210330/</guid>
      <description>Finite state machine design cont. #  Moore machines #   Output depends only upon present state If input changes, output does not change More number of states are required There is more hardware requirement They react slower to inputs (one clock cycle later) Synchronous output and state generation Output is placed on states Easy to design  Step 1: create a FSD
Step 2: determine the minimum number of states/bits required to store states</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210401</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210401/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210401/</guid>
      <description>Finite state machine design cont. #  Moore machine design cont. #  Recall
  \[\begin{aligned} d_0 &amp;amp;= x \\ d_1 &amp;amp;= \overline{x} q_0 &amp;#43; x q_1 \overline{q_0} \\ Z &amp;amp;= q_0 q_1 \end{aligned}\]  Step 5: Circuit diagram
Mealy machine design #   Output depends on present state as well as present input If input changes, output also changes Less number of states are required There is less hardware requirements They react faster to inputs Asynchronous output generation Output is placed on transitions It is difficult to design  We will design a Mealy machine that detects the same overlapping &amp;ldquo;101&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210406</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210406/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210406/</guid>
      <description>Mealy machine design cont. #  Recall:
  \[\begin{aligned} d_0 &amp;amp;= x \\ d_1 &amp;amp;= q_0 \\ Z &amp;amp;= q_1 x \end{aligned}\]  Sequential circuits: large design #  </description>
    </item>
    
    <item>
      <title>CS137-lecture-20210408</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210408/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210408/</guid>
      <description>Large design sequential circuits #  RTN (register transfer notation) is used to describe an operation of a data path
 Formally describes the data path operation  </description>
    </item>
    
    <item>
      <title>CS137-lecture-20210413</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210413/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210413/</guid>
      <description>Sequential circuits, large design cont. #   Data path contains two adder modules and one adder/subtractor module The single mode controls the functions of the adder/subtractor modules    Data path that computes either of these:   \[\begin{aligned} &amp;amp;A &amp;#43; B &amp;#43; C &amp;#43; D \\ &amp;amp;A &amp;#43; B &amp;#43; C - D \end{aligned}\]    Equation that estimates the minimum clock period ( \( \tau \)  ) required to run the data path</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210415</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210415/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210415/</guid>
      <description>Memory technology #  IM = instruction memory, DM = data memory
RAM = random access memory, ROM = read only memory
EEPROM = electrically erasable programmable read only memory
SRAM = static RAM, DRAM = dynamic RAM
Peak memory bandwidth example #     \( 32\text{ bits} \cdot \frac{1\text{ byte} }{8\text{ bits} } = 4 \text{ bytes} \\ \)   \( 1\text{ MB} = 1,000,000 \text{ bytes} \\ \)   \( 1 \text{ Hz} = 1 \text{ cycle/second}\\ \)   \( 1 \text{ MHz} = 1,000,000 \text{ cycles/second} \\\)   \( 100 \text{ MHz} = 100,000,000 \text{ cycles/second} \\\)  So,</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210420</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210420/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210420/</guid>
      <description>Exam 2 review #  Sequential circuit small design #   All small and large sequential circuits are made of flip flops and sets of combination circuits Contrary to CC (combination circuits), a sequential circuit design has states and transitions from a current state to the next state A sequential circuit design problem is typically modeled as a finite state diagram FSD consists of circles as states and arcs (arrows) as transitions, which specifies the behavior of a sequential circuit FSD is systematically converted into circuit called finite state machine Finite state machines designs categorized into Mealy, Moore, or hybrid Mealy is a FSM whose output values are determined by its current e state and input.</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210427</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210427/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210427/</guid>
      <description>Instruction set architectures #   SIMD = single instruction multiple data RISC = reduced instruction set computer CISC = complex instruction set computer ACC = accumulator  Types of instructions #  AES = advanced encryption standard
High level language program to execution #  Instruction cycle #  Data path has four main tasks
 fetch decode execute  may access data memory (another cache)   write  </description>
    </item>
    
    <item>
      <title>CS137-lecture-20210429</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210429/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210429/</guid>
      <description>ISA cont. #  Stack architecture #  Example stack style assembly to compute A = B * (C + D)
PUSH (C) ; stack &amp;lt;- M[C] PUSH (D) ; stack &amp;lt;- M[D] ADD ; stack &amp;lt;- (C) + (D) ; values popped, added, result pushed PUSH (B) ; stack &amp;lt;- M[B] MUL ; stack &amp;lt;- ((C) + (D)) * (B) ; values popped, multiplied, result pushed POP (A) ; M[A] &amp;lt;- (((C) + (D)) * (B)) ; value popped and stored in memory Accumulator architecture #  LD = load</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210506</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210506/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210506/</guid>
      <description>ISA cont. #  RISC â€“ reduced instruction set computer #  Some RISC style assembly to calculate   \( A = B \cdot (C &amp;#43; D) \)  LD R1, (C) ; R1 &amp;lt;- M[C] LD R2, (D) ; R2 &amp;lt;- M[D] ADD R3, R1, R2 ; R3 &amp;lt;- R1 + R2 LD R4, (B) ; R4 &amp;lt;- M[B] MUL R5, R3, R4 ; R5 &amp;lt;- R3 * R4 ST (A), R5 ; M[A] &amp;lt;- R5 Design example: Accumulator ISA #  </description>
    </item>
    
    <item>
      <title>CS137-lecture-20210511</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210511/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210511/</guid>
      <description>ISA cont. #  Accumulator ISA cont. #  .code ; start of program code LD 0 ; initialize ACC &amp;lt;- 0 ST (sum) ; M[sum] &amp;lt;- ACC ST (i) ; M[i] &amp;lt;- ACC L1: CMP 7 ; i &amp;gt; 7? JGT L2 ; jump to L2 if greater flag is on MVX ; get next index, X &amp;lt;- ACC LD X(array) ; get next array element, ACC &amp;lt;- M[array + x] ADD (sum) ; add i to running sum, ACC &amp;lt;- ACC + M[sum] ST (sum) ; store running sum, M[sum] &amp;lt;- ACC LD (i) ; get i, ACC &amp;lt;- M[i] ADD 1 ; i++ ST (i) ; M[i] &amp;lt;- ACC JMP L1 L2: </description>
    </item>
    
    <item>
      <title>CS137-lecture-20210513</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210513/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210513/</guid>
      <description>Review #   Boolean expressions, combinational circuit design IEEE754 example Sequential circuit design Finite state machine design Finite state machine examples Memory technology Instruction set architectures  </description>
    </item>
    
    <item>
      <title>CS138-lecture-20210126</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210126/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210126/</guid>
      <description>syllabus_CSC138.pdf</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210128</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210128/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210128/</guid>
      <description>Chapter_1_Intorduction to Computer Networks and the Internet.pdf</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210202</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210202/</guid>
      <description>NAT = network address translator
The packet transmission delay is the delay that it takes your computer to send the packet to the link. (Your car from the garage to the driveway).
HFC = hybrid fiber coax
Without fiber optic cable we could not span networks across oceans.
Between the source and destination, what if there are N routers?
  \( (N&amp;#43;1) \frac{L}{R} \)  The entire packet must fully arrive at the router before being transmitted.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210204</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210204/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210204/</guid>
      <description>FDM = frequency division multiplexer TDM = time division multiplexer</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210209</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210209/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210209/</guid>
      <description>The jump from 11 to 12 is crossing the atlantic ocean.
So the answer is min(Rs, Rc).
Layering can be harmful because each layer is only responsible for its own job, so if the presentation layer doesn&amp;rsquo;t encrypt, no other layers job to do that.
Internet protocol stack is a practical perspective, ISO/OSI reference model is a reference perspective. The missing layers (presentation, session) must be implemented in the application layer if needed.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210211</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210211/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210211/</guid>
      <description>RE: Wireshark lab 1. This is an intro to the wireshark software.
observe that the en0 has activity. Double click the card with activity to start packet analyzing.
 Hl = MAC address, Hn = IP address, Ht = port number
Each time the packet goes thru a router, it must go up to the network layer and back down.
At the destination, the layers are removed on the way up to the application layer.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210216</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210216/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210216/</guid>
      <description>Broadcast can only be based on UDP, because you don&amp;rsquo;t know where to make a connection.
11 tcp connections are needed in total
RTT = round trip time</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210218</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210218/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210218/</guid>
      <description>https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/http-delay-estimation/index.html
In piplining, the object requests are &amp;ldquo;back to back&amp;rdquo;
The proxy server can have a web cache copy so it doesn&amp;rsquo;t have to request the origin again.
Cache
 hit, the request was cached miss, the request was not cached  </description>
    </item>
    
    <item>
      <title>CS138-lecture-20210223</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210223/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210223/</guid>
      <description>Average rate to browsers:
  \[\begin{aligned} 100\text{ K } \cdot 15/\text{ sec } = 1.5 \text{ MBps } \end{aligned}\]  So our LAN utilization is:
 \[\begin{aligned} \frac{1.5 \text{ Mbps }}{10 \text{ Mbps}} = 15\% \end{aligned}\]  And the access link utilization is:
 \[\begin{aligned} \frac{1.5 \text{ Mbps }}{1.54 \text{ Mbps}} = 99\% \end{aligned}\]  Access link utilization:
 \[\begin{aligned} 99\% \cdot 0.6 = 58\% \end{aligned}\]  Total delay:</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210225</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210225/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210225/</guid>
      <description>Domain name system #  DNS is a application layer service, it is run at the network edge.
 ttl = &amp;ldquo;time to leave&amp;rdquo;, expiration time NS = name server, this is the point of contact CNAME = canonical name, this is where you can specify a smaller name for a long name MX = mailserver  Query and response are the same format.
dig asks for the IP address of a site.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210302</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210302/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210302/</guid>
      <description>DNS cont. #  For a backup authoritative DNS server (secondary), resource records inserted into .com TLD DNS server, by DNS registrar:
(networkutopia.com, dns2.networkutopia.com, NS, TTL) (dns2.networkutopia.com, 212.212.212.2, A, TTL) In your company&amp;rsquo;s authoritative DNS server, you should have the following resource records for web server, email server (etc):
(www.networkutopia.com, somethingelse.networkutopia.com, CNAME, TTL) (somethingelse.networkutopia.com, 212.212.212.56, A, TTL) (networkutopia.com, mailserver.networkutopia.com, MX, TTL) (mailserver.networkutopia.com, 212.212.212.89, A, TTL) DNS Poisoning #  Lets say its the first time that we are visiting a site, we will first ask the local DNS &amp;hellip;</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210304</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210304/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210304/</guid>
      <description>Socket programming #  UDP Client in Python #  SOCK_DGRAM means it will use UDP. The server&amp;rsquo;s socket is always open.
UDPClient.py:
from socket import * serverName = &amp;#39;hostname&amp;#39; serverPort = 12000 clientSocket = socket(AF_NET, SOCK_DGRAM) message = raw_input(&amp;#39;Input lowercase sentence:&amp;#39;) clientSocket.sendto(message, (serverName, serverPort)) modifiedMessage, serverAddress = clientSocket.recvfrom(2048) print modifiedMessage clientSocket.close() UDPServer.py
from socket import * serverPort = 12000 serverSocket = socket(AF_INET, SOCK_DGRAM) serverSocket.bind((&amp;#39;&amp;#39;, serverPort)) print &amp;#39;The server is ready to receieve&amp;#39; while 1: message, clientAddress = serverSocket.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210309</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210309/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210309/</guid>
      <description>Transport Layer #  Transport services #   Application Layer  App &amp;lt;-&amp;gt; app such as Outlook (email)   Transport layer  Process &amp;lt;-&amp;gt; process Data -&amp;gt; segments/datagrams Segment contains transport header + data portions from email   Network layer  Machine &amp;lt;-&amp;gt; machine Network header + segment    Rectangle = app, Diamond = socket, Circle = process
Multiplexing/demultiplexing #  Connectionless transport: UDP #  </description>
    </item>
    
    <item>
      <title>CS138-lecture-20210311</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210311/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210311/</guid>
      <description>UDP cont. #  Principles of reliable data transfer #  Expected features
 No bit errors No loss of data   Problems
 Bit error Data loss   Solutions
 Error detection (checksum) Data recovery    So how do we do recovery? We learn from human to human conversation, &amp;ldquo;pardon?&amp;quot; to recover data loss in the conversation.
Feedback: ACK for positive, NAK for negative.
So the receiver will send an ACK if the packet was received without loss, otherwise it&amp;rsquo;ll send NAK.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210316</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210316/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210316/</guid>
      <description>Review for exam #  Example question set for Ch 1-2 #    What are the layers in TCP/IP protocol stack?
Application, transport, network, link, physical
  What are layers in OSI reference model?
Extra 2 layers are presentation and
  What is the major difference between packet switching and circuit switching?
Circuit reserves some resources, packet switchings allows sharing
  What is the difference between routing and forwarding?</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210330</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210330/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210330/</guid>
      <description>Piplined protocols #  Go-back-n #  unacked = unacknowledged = no ACK response, not confirmed for success yet.
The number of bits needed for a   \( k \)  -bit sequence numbers is  \( 2^k - 1 \)  . The window size is  \( N = 2^k \)  .
The packet number that can be used for cumulative ack should be the largest number before any gap.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210401</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210401/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210401/</guid>
      <description>Connection oriented transport: TCP #  Entire header size is   \( 32 \text{ bits } \cdot 5 = 160 \text{ bits } = 20 \text{ bytes } \)  . The receive window is used for flow control.
Sequence number example:
Both sides randomize the sequence number they will use at the beginning.
Reliable data transfer #  Flow control #  The difference between flow control and congestion control:</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210406</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210406/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210406/</guid>
      <description>TCP Cont. #  Flow control #  rwnd = receive window
Connection management #  TCP 3-way handshake steps:
 SYN = 1, ACK = 0: SYN packet SYN = 1, ACK = 1: SYNACK packet SYN = 0, ACK = 1: ACK packet. This packet can contain real data from client to server.  Principles of congestion control #  In a perfect world:   \( \lambda_{\text{in} } = \lambda_{\text{out} } \)  , however this is not usually the case.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210408</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210408/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210408/</guid>
      <description>SMTP socket programming assignment #  TCP cont. #  Congestion control #  https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/tcp-congestion/index.html
Throughput #  Fairness #  Network layer #  Quick review
 The application layer is app to app. Transport layer is process to process Network layer is device to device (machine to machine), including routers  ATM = asynchronous transfer model
For internet
 Connection is at transport layer (TCP) Datagrams (network connectionless)   ATM/X.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210413</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210413/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210413/</guid>
      <description>Review #   Devices, links, packet switches Protocols define format and order of messages sent and received among network entities Routers Routing and forwarding Packet switching   Worms do not need user&amp;rsquo;s interaction, viruses do Distributed denial of service. TLD name servers are easier to attack Recording packets passing through network Sends a packet with a forced source address Sends bogus replies to the DNS servers   P2P is more scalable IP address and port number TCP, because it is reliable TCP SSL is implemented at the app layer   Persistent allows multiple objects to be sent over a single connection set-cookie cookie Database or back end Cookie file managed by browser   host to IP mapping, host nick name, mail server nick name, load distribution iterative and recursive (fruit.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210415</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210415/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210415/</guid>
      <description>Network layer cont. #  Switching fabrics #  Since data can flow bidirectionally, inputs can become outputs, and vice versa.
Output ports #  Input port queueing #  IP: Internet Protocol #  ICMP = internet control message protocol
Datagram format #  The header is 20 bytes long.
Upper layer can be TCP or UDP, or ICMP
A type could be multimedia, satellite signal etc, used for priority.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210420</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210420/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210420/</guid>
      <description>Internet Protocol cont. #  Subnets cont. #  There are 6 subnets.
192.192.134.1/24 means that the first 24 bits are the subnet mask, it is the network part of the address. A smaller sub set of the larger network could possibly be 192.192.134.1/26.
DHCP #  The IP address 255.255.255.255 means that it will be broadcast to everyone in the network.
Note: DHCP is in the application layer. DHCP uses UDP because of the fact that it needs to broadcast.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210422</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210422/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210422/</guid>
      <description>Routing algorithms #  Graph abstraction #  Algorithm classifications #  Dijkstra&amp;rsquo;s algorithm #  Hierarchical routing #  There can be multiple links between regions.
Routing the internet #  OSPF #  Link state algorithms, because they are global, works perfect for smaller networks.
BGP #  To help remember: iBGP = internal border gateway protocol, eBGP = external border gateway protocol
Broadcast and multicast routing #  </description>
    </item>
    
    <item>
      <title>CS138-lecture-20210427</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210427/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210427/</guid>
      <description>Note: We skipped the slides on multicast last lecture.  Link layer #  Link layer services #  MAC = media access control, MAC addresses are 48 bits.
Where the link layer is implemented #  rdt = reliable data transfer
Error detection/correction #     \( G \)  can be any sequence as long as the sender and receiver use the same sequence.
So if we pad the right side of  \( D \)  with  \( R = 011 \)  , we will get a remainder of  \( 0 \)  when the receiver performs the division.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210429</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210429/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210429/</guid>
      <description>Multiple access protocols cont. #  CSMA cont. #  CSMA/CD is used by ethernet.
CD = collision detection, CA = collision avoidance
It is not easy to detect collision (because of signal strength) in wireless LAN.
CSMA/CD algorithm #  NIC = network interface card
Binary backoff:
After the   \( m \)  th collision, we choose  \( K \)  randomly in the range of  \( \{0, 1, 2, \ldots, 2^m - 1\} \)  .</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210504</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210504/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210504/</guid>
      <description>LAN cont. #  Switches vs routers #  VLAN #  VLAN = virtual local area network
Data center networks #  TOR = top of rack
A day in the life of a web request #  DHCP (UDP) &amp;gt; ARP (BGP) &amp;gt; DNS &amp;gt; HTTP (TCP)
Summary #  Review #    What is the difference between network and transport layer? Network is machine to machine, transport is process to process</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210506</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210506/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210506/</guid>
      <description>Network security #  What is network security? #  Cryptography #  RSA #  + = public, - = private
Given the public key   \( K_{pub} \)  and the private key  \( K_{priv} \)  , we can decrypt anything encrypted by the public key, and vice versa.
Alice invents a symmetric key, and sends it to Bob using RSA encryption. That way the computationally slow RSA algorithm can be used to send the symmetric key, and the symmetric key can be used for continual encryption.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210511</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210511/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210511/</guid>
      <description>Network security cont. #  RSA cont. #  Authentication #  ap = authentication protocol (fictional)
Challenge-response mechanism for authentication:
 Using symmetric shared key,   \( K_{ab} \)   Alice sends the message to bob saying &amp;ldquo;I am alice&amp;rdquo; Bob generates a random one-time use nonce, and encrypts it with the shared key  \( R = K_{ab}(\text{nonce}) \)   Alice decrypts  \( R \)  based on the symmetric key  \( K_{ab} \)  .</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210513</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210513/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210513/</guid>
      <description>Network security cont. #  Note: These following topics will not be on the final  TLS â€“ transport layer security #  TLS is implemented at application layer.
IPSec â€“ network layer security #  VPN = virtual private network
IKE = internet key exchange, ESP = encapsulating security payloads
Read more on kerberos
Firewalls #  IDS = intrusion detection system
IDS â€“ intrusion detection systems #  Network security summary #  </description>
    </item>
    
    <item>
      <title>CS139-lecture-20210831</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210831/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210831/</guid>
      <description>Course orientation #  File: 139-syllabus.pdf  Notes during orientation #   We will be looking at operating systems from a conceptual level, not any specific OS Files will be submitted as .tar.gz, NOT .zip  Introduction #  File: csc139-fall21-part0-logistics.pdf  </description>
    </item>
    
    <item>
      <title>CS139-lecture-20210902</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210902/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210902/</guid>
      <description>Introduction to Operating systems #  What is an OS? #  The OS is the intermediary between the hardware and the software.
Possibly the most famous test program in C:
#include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;Hello, world!\n&amp;#34;); exit 0; } Which is compiled via
gcc hello.c -o hello which creates the executable hello.
We can run this via
./hello we can run this with 2 instances like
./hello &amp;amp; .</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210907</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210907/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210907/</guid>
      <description>Introduction cont #  Parallel systems #  Intrachip transfer is much faster than interchip transfer.
Distributed systems #  Real-time and embedded systems #  Other systems #  Organization #   PC = program counter, the address of the next instruction IR = instruction register, the address of the current instruction MAR = memory address register, address of the next memory IO MBR = memory buffer register, actual data to be read/written to/from memory I/O AR = input output address I/O BR = input output buffer register, the data  Memory is an array of bytes, each with its own address.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210909</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210909/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210909/</guid>
      <description>Organization cont #  Interrupts cont #  During a IO request:
 Device driver loads the registers in the device controller Device controller examines content Device controller starts the transfer of data Once the transfer is done, the device controller informs the operating system that the transfer is complete. Driver gives control back to the OS  Handling interrupts #  When calling a interrupt routine, we have 2 methods:</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210914</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210914/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210914/</guid>
      <description>Structure cont #  Simple structure #  Layered structure #  A 5 layered approach:
5. operator 4. user programs 3. IO management 2. communication 1. memory management 0. CPU, support for multi program This is easier to construct and debug, however there is a communication overhead. It is impractical to divide the kernel into layers.
Microkernel structure #  Microkernels are easier to extend, but there is a lot of communication overhead.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210916</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210916/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210916/</guid>
      <description>Processes cont. #  Scheduling cont. #  A single linked list works well for ready and wait queues. Note the addition of a tail pointer. The tail pointer gives us a constant time complexity to get to the end of the queue. New processes are added at the tail.
Schedulers #  Note the difference between short-term and long-term schedulers. Long-term scheduling handles multiprogramming.
Note: Read more on medium term scheduling in the text.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210921</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210921/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210921/</guid>
      <description>Processes cont. #  Termination #  A parent cannot wait on a grandchild.
Inter-process communication #  Message passing
 uses send and receieve API calls slower, more expensive small amount of data distributed   Shared memory
 process A sets aside some memory for process B restrictions must be lifted by kernel faster and cheaper because minimal kernel involvement doesn&amp;rsquo;t work for distributed systems (2 processes on remote machines)    Shared memory communication #  This uses a circular buffer:</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210923</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210923/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210923/</guid>
      <description>Processes cont. #  Using fork and execl #  Consider this code
pid_t pid1, pid2; int status; struct rusage usage; if ((pid1=fork())) { printf(&amp;#34;I am parent %d; child is %d\n&amp;#34;,getpid(),pid1); pid2=wait3(&amp;amp;status, 0, &amp;amp;usage); printf(&amp;#34;exit code for %d is %d\n&amp;#34;, pid2, status); } else { execl(&amp;#34;/bin/cat&amp;#34;, &amp;#34;/bin/cat&amp;#34;, &amp;#34;/csc/139/news/0001.txt&amp;#34;, NULL); printf(&amp;#34;we should never get here!\n&amp;#34;); } execl loads cat into the child&amp;rsquo;s memory space. When this child cat exits, it will never reach the subsequent printf.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210928</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210928/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210928/</guid>
      <description>Threads cont. #  How TCBs are mapped to the processes address space.
User-level threads #  Multithreading models #  The bottleneck created by the many-to-one model can be alleviated in the one-to-one model.
The M:M model maintains slightly more user threads than kernel threads.
So why do the biggest OSes use the one-to-one model? More cores in CPUs, more CPUs in general.
Thread libraries #  Implicit threading #  Issues #  Single threaded  Multi-threaded has 2 possibilities The child can either have 1 thread (the invoking thread), or all.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210930</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210930/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210930/</guid>
      <description>CPU scheduling #  Long term scheduling
 job scheduling decides which process should enter the ready state   Short term scheduling
 cpu scheduling decides which ready process should run next on the CPU    Recall the overall state diagram for a process:
Non-preemptive vs preemptive scheduling #  Preemptive here basically means &amp;ldquo;pause&amp;rdquo;. So the non-preemptive scheduling can only work in cases 1 and 4 (from prior slides).</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211005</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211005/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211005/</guid>
      <description>CPU scheduling cont. #  I/O Bursts #  Round robin #  Round robin strives on optimizing average response time.
If we make the value of   \( q \)  too small, we will have a lot of overhead due to context switches.
Priority scheduling #  Technically, shortest job first is a type of priority scheduling (prioritizing shortest burst time).
Multilevel queue #  Scheduling in Linux (CFS) #  Priority levels are 0-139.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211007</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211007/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211007/</guid>
      <description>Scheduling cont. #  CFS cont. #  Recall that vruntime is a function, not the actual runtime of the process. The progress rate depends on the priority of the process.
 faster progress rate for low priority process slower progress for high priority process  Since we are always looking for the leftmost node in the process run queue, we can maintain a pointer to get the min value in constant time.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211021</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211021/</guid>
      <description>Process synchronization #  Race condition #  Critical section and mutual exclusion #  In the above code examples, the counter++ and counter-- are considered a critical section.
How to implement mutual exclusion #  Note: This solution isn&amp;rsquo;t fully correct.  producer: while (lock == 0) lock = 1 put lock = 0 consumer: while (lock == 0) lock = 1 fetch lock = 0 The problem with this code is that if the OS does a context switch during a critical section, it can create an error.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211026</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211026/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211026/</guid>
      <description>Synchronization cont. #  Since these could output in any order, we can setup semaphores to ensure the run order.
Bounded buffer problem #   full and empty are counting semaphores.  full notifies consumers how many items are there empty notifies producers how many empty slots available   mutex is a binary semaphore.   mutex starts at 1, &amp;ldquo;unlocked&amp;rdquo;, so the first process can have mutual exclusion full is set to 0, and empty is set to n, because all slots are available   The first wait(empty) checks if there is an empty slot wait(mutex) checks if there is a process accessing the shared buffer wait(full) checks if there is any items to consume  Consider switching the order of the first to wait functions, to:</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211028</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211028/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211028/</guid>
      <description>Synchronization cont. #  Weakness of the semaphore #  In class exercises #   2 semaphores, 1 mutex semaphore allowing access to laoding zone, and 1 counting semaphore checking if there is a car waiting mutex initialized to 1 (unlocked) car counting semaphore initialized to   \( n \)     2 binary semaphores, with ping&amp;rsquo;s semaphore being set to 1 initially, and pong&amp;rsquo;s being set to 0.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211102</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211102/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211102/</guid>
      <description>Deadlocks cont. #  Resource allocation graph cont. #     \( P_2 \)  and  \( P_4 \)  have the ability to exit, so the resources they hold will be allocated elsewhere. No deadlock.
We can use a depth first search to look for cycles, to detect the possibility of deadlock.
Methods for handling deadlocks #   to impose total order: if we have multiple resources, force process requests for resources in an increasing order of enumeration  So, from the example before, if we swap the order in which each thread obtains lock (so they request the locks in the same order), we eliminate the deadlock:</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211104</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211104/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211104/</guid>
      <description>Deadlocks cont #  Banker&amp;rsquo;s algorithm cont. #  Recall that the safety subroutine simulates allocating all resources, and if able to if returns true (because it is considered a safe state). If it is unable to simulate allocating all resources, it will return false.
The second subroutine of the Banker&amp;rsquo;s algorithm is the resource request:
 simulates allocating resource requests by modifying the state of the process if safe, the resources can be allocated otherwise, it has to wait  Example using Banker&amp;rsquo;s algorithm #  So first we run the safety algorithm:</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211109</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211109/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211109/</guid>
      <description>Memory Management #   recall, CPU does not have direct access to the disk, it must use the bus   note that the OS itself is a program residing in memory  Addresses #   notice that logically, the address 99 and 100 are next to each other in the purple program. However, physically they are not adjacent (non contiguous).  There are other types of addresses:</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211116</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211116/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211116/</guid>
      <description>Memory cont. #  Fragmentation #  The small 2B chunk will never be able to be used, and the sum of all of these small gaps in memory is wasted, called internal fragmentation.
Compaction #   compaction is expensive to invoke  Swapping #  Segmentation #  One of the methods of implementing non-contiguous memory is segmentation.
 an address may be something like &amp;lt;3, 14&amp;gt;, which represents segment 3 with a 14 byte offset another table keeps track of the segment&amp;rsquo;s addresses and lengths  Paging #   similar to segmentation, except that everything is divided into equal size blocks  Addressing #  VPN = &amp;ldquo;virtual page number&amp;rdquo;, PFN = &amp;ldquo;physical frame number&amp;rdquo;</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211118</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211118/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211118/</guid>
      <description>Memory cont. #  Page tables / addressing cont. #   the more hierarchy you have, the more memory accesses you need  Hashed page tables #   we can use either method of resolving collision in the hash table: chaining or linear probing  Inverted page table #   instead of keep track of logical pages, we keep track of physical pages notice that we add a new field to the logical address: pid a linear search is involved at worst case, so the page table can be improved by using a hash table  Virtual memory #  Memory for the point of view of the program.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211123</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211123/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211123/</guid>
      <description>Virtual memory cont. #  Page replacement algorithms cont. #  Recall:
 FIFO looks at the time the page was initially brought in LRU looks at the last time the page was accessed  Implementing LRU (least recently used)
 counter implementation has an exhaustive search, so   \( \Theta(n) \)  runtime stack implementation has the least recently used at the bottom of the stack, each update is expensive because items are moved to the top of the stack when replaced   circles indicate page fault top shows 3 frame memory, bottom shows 4 frame memory, for comparison   second chance is like a warning before an eviction  </description>
    </item>
    
    <item>
      <title>CS139-lecture-20211202</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211202/</guid>
      <description>Mass storage #  Magnetic disks #   we want to keep the same rate of data moving under the head.   a track is 2D but the entire disk is 3D  Watch: Inside of a hard disk drive  Disk performance #   seek and rotate times dominate the total latency hard disks are at the milisecond level  Disk history #  Solid state disks #   SSDs are generally faster because they do not have any moving parts, thus no seek and rotate times, this greatly speeds up the total latency SSDs are at the microsecond level  Magnetic tape #   magnetic tape remains in use today as a tertiary storage ideal for backup/logs  Disks vs memory #  Disk scheduling #  The one component of disk latency that we have the ability to optimize is the seek time.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211207</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211207/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211207/</guid>
      <description>Disk scheduling exercise #  File systems #  The file system is an abstraction of the collection of disk blocks.
Requirements on data #  Files #  File names #   inode = index node  Interface to file system #  Directories #   requires unique filenames   requires unique pathnames   this allows multiple users to work on the same file (groups) recall &amp;ldquo;acyclic&amp;rdquo; means the graph does not contain a cycle  Directory operations #  </description>
    </item>
    
    <item>
      <title>CS139-lecture-20211209</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211209/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211209/</guid>
      <description>File systems cont. #  Protection #  These permissions are implemented as an ACL (access control list). This keeps track of the capability of every object.
Other systems keep track of the capability of every subject.
Why do most OS choose ACL? (Associating permission with the object, compared to associating permission with the subjects).
Organization #  Note: The linear list implementation can be done using a B+ tree.  Allocation #   Contiguous allocation works well with spinning disk memory (no giant leaps) but suffers greatly from external fragmentation   this is the file system used by linux   linked files is a non-contiguous allocation no more external fragmentation sequential access is easy random access is still a linear operation lots of physical movement for spinnning disks   maintain head and tail (to add to end)   File-Allocation Table = FAT, an example of the linked allocation.</description>
    </item>
    
    <item>
      <title>CS140-lecture-20210830</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20210830/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20210830/</guid>
      <description>Course orientation #  Syllabus #  File: 140-syllabus.pdf  Notes during orientation #   Regular quizzes 2 exams Modules has prerecorded lectures Homework assignments not graded Can watch videos during Zoom meeting, or prior Generally 1 quiz per lecture (calendar at end of syllabus), given at the first class after the last day of the lecture Turn in work as single PDF file  Methods of proof #  File: 140-methods_of_proof.</description>
    </item>
    
    <item>
      <title>CS140-lecture-20210901</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20210901/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20210901/</guid>
      <description>A note on learning in this class #  On different levels of learning
We will strive for about 60% of problems being level 3.
When working on a problem, there can be 3 outcomes
 could solve it could not solve it solved, but incorrect  If solved incorrectly, tracing back to the exact part that went wrong can be really beneficial.
Methods of proof cont. #  An easy starting example #  Suppose that   \( x &amp;gt; 3 \)  , is  \( x^2-2y &amp;gt; 5 \)  ?</description>
    </item>
    
    <item>
      <title>CS140-lecture-20210907</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20210907/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20210907/</guid>
      <description>Asymptotic notation cont #  Big Omega #  Omega is lower bound (where Big O is upper bound).
Examples #     \[\begin{aligned} 5n^2 = \Omega(n) \end{aligned}\]   \( \exists c,n_0 \)  such that  \( 0 \leq c_n \leq 5 n^2 \)  So,  \[\begin{aligned} c \leq 5n \end{aligned}\]  so  \( c = 1 \)  and  \( n_0 = 1 \)  .</description>
    </item>
    
    <item>
      <title>CS140-lecture-20210913</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20210913/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20210913/</guid>
      <description>Backtracking #  Recursive programming can be divided into two categories. One category creates the solution, and the other searches for the solution.
When searching, we want to consider backtracking.
We can search these decision trees for our solution in the solution space. When looking for a solution, if we ever reach a subtree that doesn&amp;rsquo;t meet our criteria, we can backtrack.
Strategies #  Examples #  Pretend that our maze is represented with 0 and 1, a 2D array where 0 is a wall and 1 is not, something like this:</description>
    </item>
    
    <item>
      <title>CS140-lecture-20210915</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20210915/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20210915/</guid>
      <description>Recursion #  Recursive tracing #  m(648) m(72) m(9) return 9 My trace
m(348) a = m(34) a = m(3) return 33 a = 33 b = m(4) return 44 b = 44 return 3344 a = 3344 b = m(8) return 88 b = 88 return 334488 pow example #  My solution
pow(b, e): if e == 0: return 1 return b * pow(b, e - 1) Trace</description>
    </item>
    
    <item>
      <title>CS140-lecture-20210927</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20210927/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20210927/</guid>
      <description>Divide and conquer #    \[\begin{aligned} T(n) &amp;amp;= 2T \left( \frac{n}{2} \right) &amp;#43; \Theta (n) \\ &amp;amp;= \Theta(n\log n) &amp;amp;\text{divide and conquer}\\ T(n) &amp;amp;= T(n-1) &amp;#43; \Theta(n) \\ &amp;amp;= \Theta(n^2) &amp;amp;\text{naive approach} \end{aligned}\]  A problem divided into any ratio, with the rest of the problem a complement of the original input, the overall complexity will still be  \( \Theta(n \lg n) \)  .
Mergesort #  Mergesort does not sort in place.</description>
    </item>
    
    <item>
      <title>CS140-lecture-20210929</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20210929/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20210929/</guid>
      <description>Quicksort #  The way that the array is divided matters.
Partitioning the array using Hoare&amp;rsquo;s partition #  i will move toward the right until it reaches a element that is bigger or equal to the pivot point. j will move to the right until it finds a element that is less thatn or equal to the pivot point. i and j will swap as long as the pointers haven&amp;rsquo;t crossed paths.</description>
    </item>
    
    <item>
      <title>CS140-lecture-20211006</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211006/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211006/</guid>
      <description>Common divide and conquer problems #  Counting Inversions #  Inversions are the number of out of order pairs in an array of numbers. We can use the amount of inversions as a ranking for multiple arrays.
If we consider the first array as sorted (the indices), we can use the second array&amp;rsquo;s indices as a rank to compare.
When we try and count inversions, we are given an array of   \( n \)  numbers.</description>
    </item>
    
    <item>
      <title>CS140-lecture-20211014</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211014/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211014/</guid>
      <description>Recurrences cont #  Recursion tree method #  Another method to solve recurrences is to draw a recursion tree, where each node gets a cost. The cost of each node is the additional work done on each recursive call (not recursive call itself).
The leaf nodes are the base cases. The idea is to identify a pattern, and use a known series to evaluate that pattern.
Then, after identifying the sum of each level of the tree, you then sum all the level&amp;rsquo;s themselves (except the base level, the leaves).</description>
    </item>
    
    <item>
      <title>CS140-lecture-20211025</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211025/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211025/</guid>
      <description>Graph basics #  In basic graphs, self loops and multiple edges between vertices are not considered. The number of edges are calculated by
  \[\begin{aligned} |E| = \binom{n}{2} = \frac{n(n-1)}{2} = \Theta(n^2) \end{aligned}\]  A directed graph is
 strongly connected if there is a path from any vertex to any other vertex in the direction of edges unilaterally connected if for any 2 vertices there is a directed path to and from each vertices weakly connected if there is a path from any vertex to any other vertex, but not in the direction of edges  Representing graphs #  Adjacency lists #  Note: The total length of linked lists for directed graph is less than the total length of linked lists for the undirected graph in this example.</description>
    </item>
    
    <item>
      <title>CS140-lecture-20211027</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211027/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211027/</guid>
      <description>Variable length encoding #  If we want to compress a file, we need to represent each symbol with a string of binary digits. If our strings are variable length, then that means the representation for any symbol should not be the prefix of the representation of another symbol.
Huffman codes #  The value at each node is the frequency of symbols in the subtree. The leaves represent symbols, and each left or right child represents a 0 or 1.</description>
    </item>
    
    <item>
      <title>CS140-lecture-20211101</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211101/</guid>
      <description>Dynamic programming #  Dynamic programming is an algorithm design technique. In dynamic programming, you solve the problem bottom-up (as opposed to top-down in divide and conquer).
Another trait of dynamic programming is that when a sub problem is solved, it is only solved once (which may not be the case in divide and conquer).
 Notice that multiple sub problems are solved multipled times  Assembly line scheduling problem #      \( e_n \)  is the arrival time in assembly line  \( n \)    \( a_{i,j} \)  is the time it takes at station  \( j \)  in assembly line  \( i \)    \( t_{i,j} \)  is the transfer time  \( x_n \)  is the exit times for assembly line  \( n \)     the idea is that  \( a_{1,j} \)  has the optimal subproblem solution to  \( a_{1,j-1} \)  and the optimal subproblem solution to  \( a_{2,j-1} \)  in it  So in general</description>
    </item>
    
    <item>
      <title>CS140-lecture-20211108</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211108/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211108/</guid>
      <description>Matrix-chain multiplication #   total time complexity of   \( \Theta(mnp) \)    Optimal parenthesization #   this results in exponential complexity  So let&amp;rsquo;s use dynamic programming:
 make sure to start with the base case, when i = j, the main diagonal of the array   then, we can start to fill in the spaces to the top right of each base case.</description>
    </item>
    
    <item>
      <title>CS140-lecture-20211110</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211110/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211110/</guid>
      <description>Memoization #  Elements of dynamic programming #  Longest common subsequence #   base cases along left and top edge   see which subproblems are needed to solve current sub problem   our next level after base cases is the top left corner   nested loops   another order to solve   can also go by columns   overall runtime is   \( \Theta(n) \)  where  \( n = i &amp;#43; j \)  , the sum of the 2 sequences  My solution in Python  Output</description>
    </item>
    
    <item>
      <title>CS140-lecture-20211117</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211117/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211117/</guid>
      <description>Some more dynamic programming examples #  Segmented least squares #   if we connected all points between each other, there would be zero error we want a trade off between accuracy and number of segments   imagine connecting the last 2 points, and then attaching it to the rest of the optimal solution or connecting the last 3 points and attaching it to the rest of the optimal solutions and so on&amp;hellip;  Weighted activity selection #      \( O(n \lg n) \)  complexity (sort)  The knapsack problem revisited #  Automated memoization #  Flow network #   notation is &amp;ldquo;capacity / flow&amp;rdquo;  Max flow #  Ford-Fulkerson method #   can increase flow by 5   lower path is not an augmenting edge, flow cannot increase   there is no augmenting path left (can&amp;rsquo;t find path from source to sink), so the max flow of the previous graph is the answer   the max flow of the network will be less than or equal to a cut   the max flow is the min cut  Edmonds-Karp algorithm #  Multiple sources or sinks #  Bipartite matching #  </description>
    </item>
    
    <item>
      <title>CS140-lecture-20211129</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211129/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211129/</guid>
      <description>NP-completeness #  Hamiltonian cycles #  An example of a problem that cannot be solved in polynomial time.
P and NP #  Terminology #  Reduction #   should first show that   \( P \in NP \)    NP-Hard #   NP-Hard problems are at least as hard as NP-Complete problems  Why prove NP-completeness? #  NP-Complete Examples #  Reduction examples #  Directed hamiltonian cycle to undirected hamiltonian cycle #  It is easier to go the other way (for any undirected edge, we just make it directed in both directions).</description>
    </item>
    
    <item>
      <title>CS140-lecture-20211207</title>
      <link>http://zedchance.github.io/notes/CS140/CS140-lecture-20211207/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS140/CS140-lecture-20211207/</guid>
      <description>More reduction examples #  The SAT problem #  One of the first problems to be proved NP-Complete.
Both parts highlighted in red must be true. It is easy to make the right side false by setting   \( x_2 \)  to false.
Note that the red circled part cannot be true, and since it is being OR&amp;rsquo;d we need to make sure that the left side is true.</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210601</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210601/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210601/</guid>
      <description>Course orientation #  Syllabus #  152-syllabus.pdf  Notes during orientation #   Programming will be required in each module, programming intensive Brush up on probability of simple events, simple conditional events Shallow introduction into groups and fields Class is only 5 weeks and 2 days long, so extremely accelerated, at least 20 hrs/week needed Hybrid class, half videos posted, and half live. Class will start at 1, and go until lecture finishes, then unrecorded open office hour 5 modules, starts on thursdays  Permutation functions and C programming Symmetric encryption Hashing and authentication Asymmetric cryptography and algorithms on large number Crytographic systems   Exams on week 3 and 5 Group quizzes on tuesdays, in breakout rooms on Zoom Last day is comprehensive final Take all assignments seriously, nothing is dropped  Brief introduction to cryptography #   Communication in the presence of adversaries</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210603</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210603/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210603/</guid>
      <description>Data programming #  File: Topics in C programming useful for cryptography  Count the number of even chars #  in C #  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdint.h&amp;gt; int num_even(void * p, int nbytes) { uint32_t * p32 = (uint32_t *) p; int nitems = nbytes / 4; int acc = 0; for (int i = 0; i &amp;lt; nitems; i++) if (p32[i] % 2 == 0) acc = acc + 1; return acc; } int main() { uint8_t buf[] = {0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00}; printf(&amp;#34;%d\n&amp;#34;, num_even(buf, 8)); return 0; } Depending on the endian, the output is either 0 or 2.</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210604</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210604/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210604/</guid>
      <description>Bitwise manipulations #  File: Slides  Data is a sequence of bytes in memory, whether we receive it from a file or network. We will use unsigned int types to avoid sign extension. These manipulations are powerful in cryptography.
We can also move the bits back and forth using left/right shifts. Bits that shift off the end are gone for good, and 0s are added on the opposite end (in unsigned types).</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210607</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210607/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210607/</guid>
      <description>Distinguishing games #  File: Distinguishing.pdf  Cryptography used to be based on both the pedigree of the creator, and the amount of time it takes until someone can crack it. With modern cryptography, crytographers can prove that their algorithms work. The attack can be skipped if its proven that there are no weaknesses.
When we encrypt a plaintext, we want the ciphertext to look like random bits.
How do we know that the cipher is a good cipher?</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210608</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210608/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210608/</guid>
      <description>How are permutations made? #  To create a permutation we will
 Compose simple steps, each with a different mathematical structure, providing confusion and diffusion.  we can use add, because it is in   \( Z_{2^{32}} \)   xor, because it is in  \( Z_{2} \)   and rotate, because it is non-linear (not represented by a linear equation)    Adding on its own makes a predictable structure, but if we xor after and then rotate we can get a much more confusing structure.</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210610</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210610/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210610/</guid>
      <description>Symmetric encryption #  Files:
 Intro to SSE programming https://www.crypto-textbook.com/download/Understanding-Cryptography-Chapter4.pdf   Recall that encryption is to be used for private communication. Before a message is encrypted its called a plaintext, and after its been encrypted its called a ciphertext. The ciphertext is then decrypted to get the plaintext.
Recall that we defined
perm384bc(k, x) = perm384(k xor x) xor k Remember, perm384 is a public random permutation, so its not enough for secrecy.</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210611</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210611/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210611/</guid>
      <description>Fields #  A field is
 A collection of   \( F \)  objects Two binary operations  \( \times \)  and  \( &amp;#43; \)  closed on  \( F \)  .  \( F \)  contains multiplicative identity 1 where  \( (1 \times y) = y \)  for all  \( y \)  in  \( F \)  .</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210613</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210613/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210613/</guid>
      <description>Block cipher encryption mode examples #  For these examples, consider
    \( E: \{0,1\}^6 \to \{0,1\}^6 \)    \( E(x) = \text{ROTL } (x,2) \)   If needed   \( \text{nonce} = 101 \)    \( \text{IV} = 110111 \)   Counters start at &amp;lt;1&amp;gt; 10* padding    Encrypt the following
0000 1111 0000 1111 ECB #  Since we are using block sizes of 6 bits, we are encrypting</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210615</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210615/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210615/</guid>
      <description>Stream ciphers #  A stream cipher is a function that takes
 a key   \( k \)   a nonce  \( n \)     \[\begin{aligned} \underbrace{\{0,1\}^k}_\text{key} \times \underbrace{\{0,1\}^n}_\text{nonce} \to \underbrace{\{0,1\}^*}_\text{key stream} \end{aligned}\]  Note on notation: a set raised to an asterisk  ( * )  the strings 0 or more length that can be made from the set items.  Our ciphertext is acquired via</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210617</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210617/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210617/</guid>
      <description>OpenSSL example from previous lecture, finished #  cbc_encrypt.c #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;openssl/evp.h&amp;gt; #define BLK_LEN 16 #define BUF_LEN 512  // NOTE!! For clarity&amp;#39;s sake, this example has no error checking. // In real code you need to test for errors and handle them.  int main(int argc, const char* argv[]) { int len, bytes_read; char passphrase[256]; unsigned char key[32]; // Receive SHA-2-256 hash of user pass phrase  unsigned char iv[BLK_LEN]; unsigned char in_buf[BUF_LEN]; unsigned char out_buf[BUF_LEN+BLK_LEN]; EVP_MD_CTX *mdctx; if (argc !</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210621</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210621/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210621/</guid>
      <description>Cryptographic hash functions #  Hashing takes a very large domain and maps it to a smaller codomain. For this to scale nicely,
 the hash function must be fast the outputs must be fairly random in distribution  A hash function can be defined as   \( H : \{0,1\}^* \to \{0,1\}^b \)  , where  \( b \)  is the output block length.
Recall: a set raised to an asterisk means the set of all strings made from that set.</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210622</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210622/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210622/</guid>
      <description>Authentication #  We can authenticate our messages using hashing.
Recall that there are two types of hashing
Cryptographic hashing
 more secure preimage/2nd preimage/collision resistance slower   Universal hashing
 no guarantees collision is probability based faster    There are authentication schemes that are built using each of these 2 types of hashing.
The idea behind authentication is
 If Bob receives a message from Alice, Bob would like to trust that the message is  truly from Alice hasn&amp;rsquo;t been tampered with   Alice will generate a tag   \( t \)  (sometimes called a MAC) using a tag generator  \[ t = \text{TagGen(k, m)} \]   Alice sends the message and the tag to Bob Bob can verify that the tag was generated with the specific key  \( k \)  and message  \( m \)    This verifies that Alice knows the key  \( k \)  , which gives Bob trust (because we&amp;rsquo;re assuming that only Alice and Bob have that secret key.</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210624</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210624/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210624/</guid>
      <description>Asymmetric encryption #  A very useful type of encryption where encryption and decryption is done using key pairs, one public and one private. This can solve the key exchange problem, and also can be used to digitally sign messages.
Now most cryptography is symmetric, only a small amount of CPU cycles are spent on asymmetric cryptography.
RSA #  A revolutionary cryptosystem designed by Rivest, Shamir, Adleman at MIT in the 1970s.</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210626</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210626/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210626/</guid>
      <description>Intro to asymmetric encryption #  Until now, we&amp;rsquo;ve been using symmetric cryptography. This means that both Alice and Bob are sharing a secret key.
In asymmetric cryptography, Alice and Bob have their own secret keys. They also both have public keys.
Both public and private keys are created at the same time.
We want to provide these services using asymmetric cryptography:
Encryption
 Alice encrypts a message to be sent to Bob using Bob&amp;rsquo;s public key    \[\begin{aligned} A \to \text{Encrypt}(B_\text{pub}, x) \to B \end{aligned}\]   Bob decrypts this message using his private key   Authentication</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210627</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210627/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210627/</guid>
      <description>Problems with RSA #  RSA has some problems, namely
 RSA can be distinguished easily  a black box is either a RSA encryption scheme or random bits it is easy to distinguish between these 2 worlds by sending a 0 bit (or a 1) to the box and see what comes back, and so in the RSA box   \[ \begin{aligned} 0^e = 0 \end{aligned} \]   if we restrict the numbers to large inputs then this becomes better   RSA leaks information  \[\begin{aligned} y_1 = \text{RSA}(x_1) \\ y_2 = \text{RSA}(x_2) \end{aligned}\]  If  \( y_1 = y_2 \)  then  \( x_1 = x_2 \)  .</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210629</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210629/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210629/</guid>
      <description>Alternatives to RSA #  RSA was invented in the 1970s and patented it. Alternatives came about because of the licensing fees that RSA used to require.
Recall that the RSA problem is
 Given   \( x^e \mod n \)  ,  \( e \)  , and  \( n \)  , find  \( x \)  . This is hard, and thats why RSA is secure.</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210701</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210701/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210701/</guid>
      <description>Groups #  Diffie-Hellman is secure against any passive adversary using groups where the discrete log problem is hard.
A group is a simplification of a field, as it only has 1 operation (instead of 2).
In summary, a group
 is a set of objects (usually numbers)   \( G \)   has one operation (binary) that is closed,  \( G \times G \to G \)   this is usually addition or multiplication   has an identity  usually 0 in an additive group usually 1 in a multiplicative group   have invereses,  \( \forall x \in G, \exists y \in G \)  such that  \( x \text{ op } y = \text{identity} \)   is associative, and commutative  Some examples of infinite groups</description>
    </item>
    
    <item>
      <title>CS152-lecture-20210706</title>
      <link>http://zedchance.github.io/notes/CS152/CS152-lecture-20210706/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS152/CS152-lecture-20210706/</guid>
      <description>Tweakable block ciphers #  The idea is that our block cipher   \( E \)  will take our key, and a second input called a tweak.  \[\begin{aligned} \tilde{E}:(\text{key, tweak}) \to \left( \{0,1\}^b \to \{0,1\}^b \right) \end{aligned}\]  We notate that the block cipher is tweakable via the tilde notation,  \( \tilde{E} \)  .
The key must be random and private, but the tweak is non-random and public.</description>
    </item>
    
    <item>
      <title>CS177-lecture-20220125</title>
      <link>http://zedchance.github.io/notes/CS177/CS177-lecture-20220125/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS177/CS177-lecture-20220125/</guid>
      <description>Data Mining #  Syllabus #  File: 177-syllabus.pdf  Notes during orientation #   Programming assignments will be in Python Most of the programming assignments are from past TAs Fundamental machine learning Slides are in files on canvas Book resources Lab attendance is required, .ipynb files on canvas  </description>
    </item>
    
    <item>
      <title>CS177-lecture-20220127</title>
      <link>http://zedchance.github.io/notes/CS177/CS177-lecture-20220127/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS177/CS177-lecture-20220127/</guid>
      <description>Exploring data #  Ultimately, any machine learning is just optimizing error in a graph, then deriving a function that fits to the data.
Read more about John Tukey
Iris sample data set #   http://www.ics.uci.edu/~mlearn/MLRepository.html  Statistics definitions #   ordinal means that the data can be ordered continuous means that the values are floating point      \( \text{AAD} (x) \)  is the absolute distance  \( \text{MAD} (x) \)  is the median dependent value  Visualization #  </description>
    </item>
    
    <item>
      <title>CS177-lecture-20220202</title>
      <link>http://zedchance.github.io/notes/CS177/CS177-lecture-20220202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS177/CS177-lecture-20220202/</guid>
      <description>Exploratory analysis cont. #  Representing data cont. #  Analyzing data #  Mining introduction #  Tasks #   anomaly detection is relatively new  Classification #  </description>
    </item>
    
    <item>
      <title>CS177-lecture-20220203</title>
      <link>http://zedchance.github.io/notes/CS177/CS177-lecture-20220203/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS177/CS177-lecture-20220203/</guid>
      <description>Data exploration cont. #  Classification cont. #  Regression #  Clustering #  Association #  Deviation / anomaly / change detection #  Challenges #   the concept of neural networks has been around for a long time, however only because of recent computational power has it become widely used  What is data? #  </description>
    </item>
    
    <item>
      <title>CS177-lecture-20220210</title>
      <link>http://zedchance.github.io/notes/CS177/CS177-lecture-20220210/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS177/CS177-lecture-20220210/</guid>
      <description>NumPy #  We can use NumPy with
import numpy as np We can create new arrays with
a = np.array([1, 5, 7]) We can specify number of dimensions or data types:
b = np.array([1, 2, 3], ndim=2) c = np.array([1, 2, 3, 4], dtype=complex) We can see the shape of an array via
print(a) print(a.shape) You can set the shape of an array
d = np.array([1, 2, 3], [4, 5, 6]) d.</description>
    </item>
    
    <item>
      <title>CS177-lecture-20220215</title>
      <link>http://zedchance.github.io/notes/CS177/CS177-lecture-20220215/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS177/CS177-lecture-20220215/</guid>
      <description>What is data? #  Attributes #  Difference between ratio and interval #  </description>
    </item>
    
    <item>
      <title>CS177-lecture-20220217</title>
      <link>http://zedchance.github.io/notes/CS177/CS177-lecture-20220217/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS177/CS177-lecture-20220217/</guid>
      <description>Data preprocessing cont. #  Attributes cont. #  Types of data sets #  Data quality #  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20210830</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20210830/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20210830/</guid>
      <description>Course orientation #  File: 190-syllabus.pdf  Notes during orientation #   Can chose your own team, students from either section  Introduction #  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20210913</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20210913/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20210913/</guid>
      <description>More information on project #  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20210920</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20210920/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20210920/</guid>
      <description>Sprint 00 #  Scoping the business problem #  Working backwards #  See article for template.  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20210927</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20210927/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20210927/</guid>
      <description>Sprint 1 notes #  Planning assignment
 Can be a screenshot of our Jira page instead of spread sheet  Execution report
 A retrospective of the end of the sprint  Client review meeting
 Submit some artifacts  Context diagram Business event table    Goals #  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20211004</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20211004/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20211004/</guid>
      <description>SCRUM #  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20211011</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20211011/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20211011/</guid>
      <description>Agile examples #  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20211025</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20211025/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20211025/</guid>
      <description>Prototyping #  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20211101</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20211101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20211101/</guid>
      <description>Continuous integration #  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20211108</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20211108/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20211108/</guid>
      <description>Day to day in software #  </description>
    </item>
    
    <item>
      <title>CS190-lecture-20211115</title>
      <link>http://zedchance.github.io/notes/CS190/CS190-lecture-20211115/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS190/CS190-lecture-20211115/</guid>
      <description>Working as a software dev cont. #  </description>
    </item>
    
    <item>
      <title>CS191-lecture-20220126</title>
      <link>http://zedchance.github.io/notes/CS191/CS191-lecture-20220126/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS191/CS191-lecture-20220126/</guid>
      <description>Senior Project, Part 2 #  Syllabus #  File: 191-syllabus.pdf  Notes during orientation #   attend either Zoom lecture  </description>
    </item>
    
    <item>
      <title>CS191-lecture-20220202</title>
      <link>http://zedchance.github.io/notes/CS191/CS191-lecture-20220202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS191/CS191-lecture-20220202/</guid>
      <description>Agile development #  SCRUM #  git #  </description>
    </item>
    
    <item>
      <title>CS191-lecture-20220216</title>
      <link>http://zedchance.github.io/notes/CS191/CS191-lecture-20220216/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS191/CS191-lecture-20220216/</guid>
      <description>Project showcase #  JIRA/Flying donut #  Assignments #  </description>
    </item>
    
    <item>
      <title>CS192-lecture-20210903</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-lecture-20210903/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-lecture-20210903/</guid>
      <description>Course orientation #   12 seminars, on schedule  Must attend 10, and submit feedback 6 seminars are pure CS, 6 are leadership oriented   Evaluations are full or no points, attend and complete 10 to pass (no problem with attending/completing all 12). Typical 30-45 min run time, with Q&amp;amp;A at the end  </description>
    </item>
    
    <item>
      <title>CS192-seminar-20210910</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20210910/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20210910/</guid>
      <description>Career Success Factors #  Speaker: Cameron Law</description>
    </item>
    
    <item>
      <title>CS192-seminar-20210924</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20210924/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20210924/</guid>
      <description>Seeing the Big Picture: Preparing for Leadership in the Data Age #  Speaker: Professor Joseph Taylor</description>
    </item>
    
    <item>
      <title>CS192-seminar-20211001</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20211001/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20211001/</guid>
      <description>Accenture Info Session #  Speaker: Jason Francis</description>
    </item>
    
    <item>
      <title>CS192-seminar-20211008</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20211008/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20211008/</guid>
      <description>Introduction to Adaptive Leadership #  Speaker: Rabbil Green</description>
    </item>
    
    <item>
      <title>CS192-seminar-20211022</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20211022/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20211022/</guid>
      <description>Leadership in a non-profit organization, when people, passion, and innovation make for good business #  Speaker: Tiffani Fink, Paratransit Inc.</description>
    </item>
    
    <item>
      <title>CS192-seminar-20211029</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20211029/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20211029/</guid>
      <description>Career Planning #  Speaker: Greg Kiefer</description>
    </item>
    
    <item>
      <title>CS192-seminar-20211105</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20211105/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20211105/</guid>
      <description>Change management #  Speaker: Jessica Bagger, PhD</description>
    </item>
    
    <item>
      <title>CS192-seminar-20211112</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20211112/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20211112/</guid>
      <description>Cyber Security: Career Opportunities #  Speaker: Shoba Mallarapu and Srinivas Atluri, Anvaya Solutions Inc.</description>
    </item>
    
    <item>
      <title>CS192-seminar-20211119</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20211119/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20211119/</guid>
      <description>Unleashing the Leadership Qualities Within You #  Speaker: Liana Bailey-Crimmins</description>
    </item>
    
    <item>
      <title>CS192-seminar-20211203</title>
      <link>http://zedchance.github.io/notes/CS192/CS192-seminar-20211203/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS192/CS192-seminar-20211203/</guid>
      <description>Conversational AI #  Speaker: Venky Krishnawamy
 can a virtual assistant resolve the customer&amp;rsquo;s problem?   can CSRs be assisted or trained so they can provide better service?  </description>
    </item>
    
    <item>
      <title>CS26-lecture-notes</title>
      <link>http://zedchance.github.io/notes/CS26/CS26-lecture-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS26/CS26-lecture-notes/</guid>
      <description>CS 26 Lecture Notes #  Jan 28, 2019 #  Introduction #  Discrete: Not &amp;ldquo;discreet&amp;rdquo;, opposite of continuous, goes in steps. The graphs we worked with can only be expanded in steps, you can&amp;rsquo;t add a half edge or half vertex.
Structure: a set of related values and the operations on them. (integers, graphs).
Like a venn diagram of math and computer science, discrete structures is the combination.</description>
    </item>
    
    <item>
      <title>CS26-reading-notes</title>
      <link>http://zedchance.github.io/notes/CS26/CS26-reading-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS26/CS26-reading-notes/</guid>
      <description>CS 26 Reading Notes #   Ch. 1 Number Representations  Ch. 1 Number Representations #  Theorem 1
Let b be an integer greater than 1. Then if n is a positive integer, n can be expressed uniquely in the form
  \(n=a_k Â·b^k &amp;#43;a_{kâˆ’1} Â·b^{kâˆ’1} &amp;#43;Â·Â·Â·&amp;#43;a_1 Â·b^1 &amp;#43;a_0 Â·b^0 \)  where  \(k\)  is a nonnegative integer,  \(a0, a1, Â· Â· Â· , ak\)  are nonnegative integers less than  \(b\)  and  \(ak â‰  0\)  .</description>
    </item>
    
    <item>
      <title>CS39-lecture-notes</title>
      <link>http://zedchance.github.io/notes/CS39/CS39-lecture-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS39/CS39-lecture-notes/</guid>
      <description>CS 39 Lecture notes #  Aug 21, 2018 #  Using ARM assembly language
RISC - reduced instructions set computer
ARM is a British company that designs intellectual property, now owned by a japanese company (Softbank).
Last year there was 14 billion ARM chips produced
Software you need:
Keil ARM MDK - software development kit for M-series microcontrollers
www.keil.com
(Windows only)
[X] Download Keil tool [2018-08-23]
 Aug 23, 2018 #  A diagram of almost everything</description>
    </item>
    
    <item>
      <title>CS46-lecture-notes</title>
      <link>http://zedchance.github.io/notes/CS46/CS46-lecture-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS46/CS46-lecture-notes/</guid>
      <description>CS 46 Lecture Notes #  August 27 #  #include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;I &amp;lt;3 C\n&amp;#34;); } #include &amp;lt;stdio.h&amp;gt; int main() { for (int i) { printf(&amp;#34;I &amp;lt;3 C\n&amp;#34;); } } #include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;Enter your agge: &amp;#34;); int age; scanf(&amp;#34;%d&amp;#34;, &amp;amp;age); // scanf is expecting a decimal (base 10), and stores it in age  int dogAge = age * 7; printf(&amp;#34;You are %d dog years old \n&amp;#34;, dogAge); } To compile:</description>
    </item>
    
    <item>
      <title>Luhn&#39;s Algorithm</title>
      <link>http://zedchance.github.io/notes/CS46/luhns.c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS46/luhns.c/</guid>
      <description>&lt;h1 id=&#34;luhns-algorithm&#34;&gt;
  Luhn&amp;rsquo;s Algorithm
  &lt;a class=&#34;anchor&#34; href=&#34;#luhns-algorithm&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;An implementation of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Luhn_algorithm&#34;&gt;Luhn algorithm&lt;/a&gt; in the C language.&lt;/p&gt;
&lt;p&gt;This algorithm is used for verification of credit card numbers. It is a simple to follow process that generates the last digit of the credit card (the checksum).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MATH100-lecture-notes</title>
      <link>http://zedchance.github.io/notes/MATH100/MATH100-lecture-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH100/MATH100-lecture-notes/</guid>
      <description>Math 100 lecture notes #  File: MATH100-lecture-notes.pdf  </description>
    </item>
    
    <item>
      <title>MATH102-lecture-20220125</title>
      <link>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220125/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220125/</guid>
      <description>Number Theory #  Syllabus #  File: math102-syllabus.pdf  Notes during orientation #   No complex numbers in this class If we use the variable   \( n \)  , it is assumed it is an integer  \( p \)  assumes a prime number  Warm up #  Breakdown according to oldest age:
 note that 36 appears twice, since Mary needs more time to figure it out it must be this value When Rafael talks about his &amp;ldquo;eldest&amp;rdquo; son that means that one son is older than the rest, so the answer is 9 2 2  Important sets #    \( \mathbb{Z} = \{\ldots, -2, -1, 0, 1, 2, 3, \ldots\} \)  , the set of all integers.</description>
    </item>
    
    <item>
      <title>MATH102-lecture-20220127</title>
      <link>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220127/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220127/</guid>
      <description>The language of divisibility #  The following 7 statements are equivalent:
 18 is divisible by 6 18 is a multiple of 6 6 is a factor or divisor of 18 6 goes into 18, or 6 divides 18    \( \frac{18}{6} \)  is a whole number 18 is equal to 6 times a whole number, which is the same as saying there is  \( 18 = 6k \)  for some  \( k \in \mathbb{Z} \)   In the long division of 18 by 6, the remainder is 0.</description>
    </item>
    
    <item>
      <title>MATH102-lecture-20220201</title>
      <link>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220201/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220201/</guid>
      <description>Divisibility cont. #  There are many ways to represent 24, but there is only 1 way to represent it as a product of primes.
Theorem. Whenever we add a number to itself, the sum will be even.  Proof. Let first number be   \( k \)  , let the second number be  \( k \)  . So if  \[\begin{aligned} k &amp;#43; k = 2k \end{aligned}\]  and  \( 2 | 2k \)   \( \square \)   Example Prove that if  \( 10 | a \)  and  \( 10 | b \)  , then  \( 10 | ma \pm nb \)  , where  \( a, b, m, n \in \mathbb{Z} \)  .</description>
    </item>
    
    <item>
      <title>MATH102-lecture-20220203</title>
      <link>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220203/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220203/</guid>
      <description>Divisibility cont. #  Example Find a number with the amount of divisors of   \( N \)  to be  \( 4 \cdot 6 \cdot 3 \)  .  \[\begin{aligned} N = 7^3 \cdot 11^5 \cdot 41^2 \end{aligned}\]    Theorem. Consider the 4 digit number  \( n = \overline{abcd} \)  .  \( n \)  is divisible by 9 if the sum of its digits  \( a &amp;#43; b &amp;#43; c &amp;#43; d \)  is divisible by 9.</description>
    </item>
    
    <item>
      <title>MATH102-lecture-20220208</title>
      <link>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220208/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220208/</guid>
      <description>Returning to an old problem #  Quiz 1 sols #  2Th review #  </description>
    </item>
    
    <item>
      <title>MATH102-lecture-20220210</title>
      <link>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220210/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220210/</guid>
      <description>3T solutions #  Least common multiples #  Consider   \( a = 2^2 \cdot 5^4 \cdot 7 \cdot 41^{10} \)  and  \( b = 5^2 \cdot 19 \cdot 41 \cdot 47^2 \)  .
If  \( M \)  is a common multiple of  \( a \)  and  \( b \)  , that means that  \( a | M \)  and also  \( b | M \)  .</description>
    </item>
    
    <item>
      <title>MATH102-lecture-20220215</title>
      <link>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220215/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH102/MATH102-lecture-20220215/</guid>
      <description>Quiz 2 solns #  3Th solns #  Some word problems #   Yes No    \( \text{gcd} (220,308) \)    </description>
    </item>
    
    <item>
      <title>MATH170-latex-notes</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-latex-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-latex-notes/</guid>
      <description>MATH170 lecture notes #  File: m170-lecture-notes.pdf  </description>
    </item>
    
    <item>
      <title>MATH170-lecture-20210831</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20210831/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20210831/</guid>
      <description>Course orientation #  File: m170-syllabus.pdf  Notes during orientation #   Will be some technology, matlab, wolfram alpha Lectures all online, synchronous Async videos may be posted  </description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211012</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211012/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211012/</guid>
      <description>MATLAB #  An introduction #  File: m170-matlab-linprog.pdf  For example, lets define a vector
x = [1 2 3] If we want to transpose x, we can use the &#39;:
x&#39; Or we can define a column vector like:
y=[1 2 3] which can also be defined with ;:
y=[1;2;3] So, to define an entire matrix we can use a combination of both:
A=[1 2 3; 4 5 6; 7 8 9] We can do some matrix multiplication:</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211020</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211020/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211020/</guid>
      <description>Two phase procedure #  Unbounded LP problem example #  </description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211021</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211021/</guid>
      <description>Two phase procedure cont. #  Last problem finished #  Detecting a non feasible region #  Can we recognize a non-feasible region using the two phase method?
Phase one completes because we have all negative coefficients in the last row, but since   \( w \not = 0 \)  , there is no solution. We could solve this using Big M method where  \( s_4 &amp;gt; 0 \)  , and  \( z&amp;#39; = z &amp;#43; M s_4 \)  .</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211026</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211026/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211026/</guid>
      <description>Sensitivity analysis cont. #  By increasing the right hand side of the   \( c_1 \)  constraint by 1 unit, we obtain a new  \( \tilde{z} \)  value of  \( \frac{108}{7} \)  .
So the shadow price is  \( z - \tilde{z} = \frac{22}{7} \)  .
Next, identify shadow prices from a completed simplex tableau:
Shadow prices using MATLAB #  A=[2 1; 1 4] b=[3 4]&#39; C=[-7 -6]&#39; lb=[0 0]&#39; [x, u]=linprog(C,A,b,[],[],lb,[]) Optimal solution found.</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211028</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211028/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211028/</guid>
      <description>Sensitivity analysis cont. #  Recall previous example #  So how can we identify the shadow price when we have artificial variables by looking at the last row of the simplex tableau?
Notice that moving the upper constraint up does not change the optimal solution at point   \( C \)  . But if you move the lower constraint up the optimal point will change.
Correction:  \( x_5 \)  replaced  \( x_2 \)  , so the left hand side BV is labeled incorrect.</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211102</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211102/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211102/</guid>
      <description>Sensitivity analysis using Delta method #  Since our new feasible region is smaller, we are getting a sub optimal result (because we are minimizing).
For this impact of   \( \tilde{c_4} \)  on  \( z \)  , we need  \( \Delta \leq -20 \)  .
 At  \( \Delta = -20 \)  ,  \( C=(10,20) \)  is still the optimal solution.</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211104</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211104/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211104/</guid>
      <description>Unrestricted variables in constraints #  In some scenarios, we may allow variables to be negative (like overdrawing an account).
For example:
Now we can solve this new extended problem using the simplex algorithm.</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211109</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211109/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211109/</guid>
      <description>Duality #  So lets find the dual of a previous problem:
This is the primal problem, so lets look at the corresponding dual problem:
A dual problem is: another LP problem that is related to the primal problem with different constraints and objective function.
 This will be a minimization problem (for a maximization primal problem) Two constraints of the primal yield two decision variables fo rthe dual, say   \( y_1 \)  and  \( y_2 \)   To determine the coefficients of the objective function, ie minimize  \[ v= ?</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211116</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211116/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211116/</guid>
      <description>Duality cont. #   and   \( A \to A^T \)    Facts, properties, principals #   Observe that there is a connection between shadow prices and the dual problem. An optimal solution to the symmetric dual of a primal LP problem Let  \( \hat{x} \)  be a feasible solution to a primal problem in normal form with objective function  \[ z = \bar{C}^T \bar{x} \]  Let  \( \hat{y} \)  be a feasible solution to its symmetric dual problem with the objective function  \[ v=\bar{b}^T \bar{y} \]  Let  \[ \hat{z} = \bar{C}^T \bar{x} \]  and  \[ \hat{v} = \bar{b}^T \hat{y} \]  If  \( \hat{z} = \hat{v} \)  , then  \( \hat{x} \)  and  \( \hat{y} \)  are optimal solutions to their respective LP problem, and  \( \hat{z} = \hat{v} \)  is the optimal value for both problems.</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211130</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211130/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211130/</guid>
      <description>The group assignment is related to the example we&amp;rsquo;ll discuss today.
Duality finished up #  Auto trailers example #   the shadow prices of the primal problem are the optimal solution to the dual problem   since   \( \bar{x_1} \)  and  \( \bar{x_2} \)  are non-zero,  \( \bar{c_1} \)  and  \( \bar{c_3} \)  hold with equality  Another example #  Network models #   9 nodes 10 arcs  An example with two sources and three sinks #  Next time:</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211202</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211202/</guid>
      <description>Network models cont. #  Compressor shipment example #   note that this problem only has equality constraints, which makes it a bit easier for us to use technology   as we can see, this is very involved when trying the simplex method with this dimension  There are other approaches to simplify the simplex tableaus (procedures), at least in obtaining a more efficient initial BFS which is somewhat close to the optimal solution.</description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211207</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211207/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211207/</guid>
      <description>Last problem #  Recall the problem we worked on using &amp;ldquo;northwest corner&amp;rdquo; method to get the BFS:
 similar to northwest corner, except that we choose the lowest cost cells first  Shortest path problem #  </description>
    </item>
    
    <item>
      <title>MATH170-lecture-20211209</title>
      <link>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211209/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH170/MATH170-lecture-20211209/</guid>
      <description>Shortest path problem cont. #  Example from mock final #   the dummy line is to balance the supply/demand  The runtime complexity of this method is   \( O(2^n) \)  , there are some faster methods:</description>
    </item>
    
    <item>
      <title>MATH31-comparison-tests</title>
      <link>http://zedchance.github.io/notes/MATH31/MATH31-comparison-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH31/MATH31-comparison-tests/</guid>
      <description>Comparison tests #  Idea: Compare one series to another with a known convergence/divergence (geometric, harmonic, p-series, etc).
Suppose we have two series   \(\sum a_n\)  and  \(\sum b_n\)  with positive terms:
 If  \(a_b &amp;lt; b_n\)  for all  \(n\)  , and  \(\sum b_n\)  converges, then  \(\sum a_n\)  also converges. If  \(a_b &amp;gt; b_n\)  for all  \(n\)  , and  \(\sum b_n\)  diverges, then  \(\sum a_n\)  also diverges.</description>
    </item>
    
    <item>
      <title>MATH31-integral-test</title>
      <link>http://zedchance.github.io/notes/MATH31/MATH31-integral-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH31/MATH31-integral-test/</guid>
      <description>Integral test #  For   \(f(n))\)  is continous, positive, and decreasing, then we can use the integral to show convergence/divergence of our series.
So:
$$ \sum_{n=1}^\infty \text{ and } \int_1^\infty f(x)\ dx $$
will have the same result (either converge or diverge).
 This can tell you convergence/divergence, but does not necessarily give the sum of the series. Convergence is not affected by the addition or subtraction of a finite number of terms from our series.</description>
    </item>
    
    <item>
      <title>MATH31-series</title>
      <link>http://zedchance.github.io/notes/MATH31/MATH31-series/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH31/MATH31-series/</guid>
      <description>Series and sequences #  What is a series #  To evaluate series, first find the partial sum:
  \[\begin{aligned} \sum_{n=1}^\infty n \\ S_n = 1 &amp;#43; 2 &amp;#43; 3 &amp;#43;\ ...\ &amp;#43; n \end{aligned}\]  Find the formula for  \(S_n\)  $$ S_n= \frac{n(n+1)}{2} $$
Take the limit as  \(n \rightarrow \infty\)  $$ \lim_{n \rightarrow \infty} \frac{n(n+1)}{2} = \infty $$
Telescoping #  These series look like two repeating fractions that end up canceling everything except something from the first term and something from the last.</description>
    </item>
    
    <item>
      <title>MATH31-unit-1</title>
      <link>http://zedchance.github.io/notes/MATH31/MATH31-unit-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH31/MATH31-unit-1/</guid>
      <description>Unit 1 #  Notes #  Math 31 Exam 1 SOLN Fall 2018.pdf
Exam stuff #  Math 31 Exam 1 SOLNS Spring 2018.pdf Math 31 Exam 1 SOLNS Spring 2019.pdf Math 31 Fall 2019 LN UNIT 1.pdf</description>
    </item>
    
    <item>
      <title>MATH31-unit-2</title>
      <link>http://zedchance.github.io/notes/MATH31/MATH31-unit-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH31/MATH31-unit-2/</guid>
      <description>Unit 2 #  Notes #     Unit 2      Base notes Math 31 LN Differential Equations CH 9 REVISED Spring 2019.pdf    Math 31 LN UNIT 2 Chapter 6 Fall 2019.pdf    Math 31 UNIT 2 LN (part 2) Spring 2019.pdf   Exam stuff Math 31 Exam 2 SOLNS Spring 2019.pdf    Math 31 Exam 2 Spring 2020.</description>
    </item>
    
    <item>
      <title>MATH31-unit-3</title>
      <link>http://zedchance.github.io/notes/MATH31/MATH31-unit-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/MATH31/MATH31-unit-3/</guid>
      <description>Unit 3 #  File: calculus-2.pdf   Math 31 Sequences and Series Part I Spring 2020.pdf
Chance Zed Chapter 11 Assignment part 1.pdf
Math 31 Series Assignment Part 2 Spring 2020.pdf
Chance Zachary Chapter 11 Assignment Part 2.pdf
Math 31 Chapter 11 Exam 3 Spring 2020.pdf
Chance Zachary Exam 3.pdf</description>
    </item>
    
    <item>
      <title>PHIL103-ec-lecture</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-ec-lecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-ec-lecture/</guid>
      <description>Marybeth Gasman: Are we ready to educate a diverse nation? #  The landscape of higher education
 2014, for the first time the nation&amp;rsquo;s study body, K-12, was majority students of color 2019, almost half (45%) of the nation&amp;rsquo;s college students are students of color 2050, census data predicts that the US will be majority people of color  Faculty
  88% of faculty at 60 top research universities is White</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20200831</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200831/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200831/</guid>
      <description>Applied ethics #   Bioethics, medical ethics, environmental, animal, business, political, sexual, population&amp;hellip;  Why study applied ethics?
 Philosophers are supposed to have a comparative advantage in argument and analysis Ethics is inherently something to apply  Philosphy
 What is involved in doing philosophy well? Pursue the truth Better: present good reasons for thinking one has got things right How good to the reasons have to be? Philosophy isn&amp;rsquo;t supposed to be a game where different sides choose their favorite argument Supposed to avoid idealogical advocacy  Applied ethics and philosophy</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20200907</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200907/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200907/</guid>
      <description>Lecture &amp;ldquo;In which I defend capitalism&amp;rdquo; #  Capitalism (the ideology) says:
 Anything thats peaceful Voluntary trading. not war; not empire  Lecture on causes of wealth and nature #  </description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20200916</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200916/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200916/</guid>
      <description>Capitalism socialism lecture #   Welfare economics #  7. econ2.pptx</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20200924</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200924/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200924/</guid>
      <description>lockean property rights-revised.pdf Posner-IP.pdf</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20200927</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200927/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20200927/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20201008</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201008/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201008/</guid>
      <description>Why are we &amp;ldquo;creeped out&amp;rdquo; when someone we don&amp;rsquo;t know knows something about us?
Another example: a jointly authored book
The question is: How free and open should it be?</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20201014</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201014/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201014/</guid>
      <description>a-short-introduction-to-the-world-of-cryptocurrencies.pdf</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20201024</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201024/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201024/</guid>
      <description>The Law and Economics of Internet Access #  Innovation and Sec 230
 Develop and offer content without fear of legal liability &amp;ldquo;No provider or user of an interactive computer service shall be treated as the publisher or speaker of any information provided by another information content provider.&amp;rdquo; Innovation: want to make it likely that we&amp;rsquo;ll have access to more awesome content.  Net neutrality and Title II FCC public utility regulation</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20201028</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201028/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201028/</guid>
      <description>Corporate Social Responsibility #  Markets, recap&amp;hellip; #   Market mechanisms vs political mechanisms for resource allocation You get (more!) effecient coordination without central direction in a system of property, contract, and consent. Private vices translate into public benefits Social obligations?  CSR #   Friedman&amp;rsquo;s main complain: &amp;ldquo;socially responsible&amp;rdquo; business amounts to a kind of fraud A violation of the fiduciary relatioinship between principal (owners, shareholders) and agent (CEO, management).</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20201104</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201104/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201104/</guid>
      <description>Market and government failures #  What is a market failure? #   A (n unregulated) market failed to generate an efficient outcome Not all the costs associated with a private transaction are internalized. For example: pollution. Or, certain goods/services will tend to be under-provided by the market because of a lack of incentives. For example: a lighthouse. An institution failed in some way: the market.  Typical argument #   Idealized perfectly competitive economic model of a market would achieve some socially optimal (or Pareto efficient) outcome Real world markets sometimes fail to achieve that outcome: &amp;ldquo;Market failure!</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20201110</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201110/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201110/</guid>
      <description>How to be a better person #  How can we manage for better behavior? #   Successful morality interventions need to be based on the correct model of moral psychology. The way to induce better behavior depends on how people make decisions.  Moral psychology #   A study to determine how people (fail to) make moral decisions. Behavioral ethics. Distinct from normative ethics: a study to determine what the moral (i.</description>
    </item>
    
    <item>
      <title>PHIL103-lecture-20201122</title>
      <link>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201122/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHIL103/PHIL103-lecture-20201122/</guid>
      <description>Why be moral? #  Two questions
 Descriptive: would you be moral if you could always get away with immorality? Normative: should you be moral if you could always get away with immorality? Normativity clarification: this is a rational should, not a moral should. Is morality rational?  Rational choice theory
 People have a stable, ordered set of preferences. Actions have utility insofar as they satisfy these preferences. Rational agents always choose the action that has the highest expected utility in light of their preferences.</description>
    </item>
    
    <item>
      <title>PHYS105-lab-20200326</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lab-20200326/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lab-20200326/</guid>
      <description>Centripetal force lab #  The string holds the bob, and the entire mechanism spins in a circle to cause the bob to extend outward and hit the tape marker.
Time for 20 revolutions
Data measured is from inside to center of L
Should be percent difference not % error
Write a brief conclusion after the lab. Usually we try to make our experiments have a small percent error, but until now its been hard to tell if it is indeed small.</description>
    </item>
    
    <item>
      <title>PHYS105-lab-20200402</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lab-20200402/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lab-20200402/</guid>
      <description>Due in 3 weeks.
The Ballistic Pendulum #  2 different ways to measure a projectile
Watch the youtube video
For the theory section: #  How to find initial velocity:
Measure the total height
And the length in the x direction
Kinematics
Then find total time
Solve for t
Plug back in
To make the calculations:
Horizontal measurements
Both of these together is x total
Then measure vertical
Add both together to get y total</description>
    </item>
    
    <item>
      <title>PHYS105-lab-20200423</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lab-20200423/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lab-20200423/</guid>
      <description>Today #  Lab 8 #  Gas pressure arises from the thermal energy of the gas molecules
Pressure on the y axis, temp on x axis
Graph the data, find the x intercept, and that should be near absolute zero. Compare that to the accepted absolute zero for percent diff.</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200319</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200319/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200319/</guid>
      <description>Announcements #   CH 8 HWs due tomorrow Quiz 6 due tomorrow  PDF   Power and Energy Lab due tomorrow Can come to either recitation meetings  Test 2 #   Tuesday 11a - 1p Given in docx and PDF Info posted in Course Info folder Just like in class, only use your big powerful brain and the crib sheet No outside help permitted Please do not post test on Cheggs or other websites, academic misconduct  </description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200326</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200326/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200326/</guid>
      <description>Anouncements #   HW 12 CH6 due tues HW 13 Office hour tomorrow at 11am We will meet for lab today (either meeting) Spring break is coming  Clicker question notes #  $$ \Sigma F = ma \ \Sigma F = -mgy $$
In circular motion the direction of the velocity is tangent to the circle.
Circular motion and Gravity #  Major topics
 Uniform circular motion Centripetal acceleration Gravitation  Circular motion #  Objects moving in a circular path are accelerating.</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200331</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200331/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200331/</guid>
      <description>Annoucements #   HW 13 due tonight HW 14 due fri Quiz 7 posted due 4/16 Centripetal force lab due Fri Recitation today: attend either session Lab on Thurs: attend either session Schedule update by thurs  Today #   More centripetal force  Clicker questions #  Problems #   Ball hanging from pendulum inside moving car turning at 10 mph, what is the radius of the turn?</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200402</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200402/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200402/</guid>
      <description>Announcements #   HW 13 Ch 6 due tomorrow Quiz 7 due 4/14 Lab due tomorrow New lab today Revised schedule posted Office hour tomorrow @ 11am  Today #  Clicker questions #  Gravitational force is always attractive.
To find the net force equaling 0, solve this for x:
Lecture #  $G$ is really small, so for it to be appreciable at least one of the masses needs to be big (for instance Earth).</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200414</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200414/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200414/</guid>
      <description>Anouncements #  Todays new material #  Clicker questions #  The mass of the satellites actually don&amp;rsquo;t matter
The smaller the radius the faster the satelite.
 The bigger the radius the longer the period.
  Discussion #  Last chapter we introduced centripetal acceleration. We briefly introduced what happens when the speed doesn&amp;rsquo;t change. The tangenital component makes the accelerate faster in a circle.
How do we get things spinning in a circle in the first place?</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200416</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200416/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200416/</guid>
      <description>Announcements #  Today #  Clicker questions #     Discussion #  Weight of the beam is in the middle because it is uniform, and the center of mass is in the exact center.
Two conditions for equilibrium, x is positive to right y is positive to up.
Two equations and three unknowns. To get to the solution we need to use the sum of the torques = 0 also.</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200421</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200421/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200421/</guid>
      <description>Announcements #  No graphing exercises on upcoming test despite containing some kinematics.
Today #  Clicker questions #  Radians are unitless. The 1/2 second doesn&amp;rsquo;t have anything to do with the problem.
 Use the first equation
You can also use this equation:
 Use the third equation from above
What is the initial tangential speed $v_{oT}$ and the tangential acceleration $a_T$?
Its slowing down quite fast!
 Discussion #  1:1 correspondence between transational motion and rotational motion.</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200428</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200428/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200428/</guid>
      <description>Announcements #  Test scores
Probably cancel today&amp;rsquo;s recitation.
Today #  Microscopid mechanics will have macroscopic ramifications. We&amp;rsquo;ll have to go over:
 Heat Temperature Internal energy Thermal energy  Temperature #  Prof Harris will almost always use (U) for internal energy instead of (E).
Temperature affects the vibrational energy (E_{vib}), rotational energy (E_{rot}), and the kinetic energy (KE).
Thermal energy
The aspects of the internal energy that is affected by thermal processes.</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200430</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200430/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200430/</guid>
      <description>Announcements #  Today #  Clickers #    Remember temperature is the average kinetic energy of the system.
Discussion #   Note: Ability to derive this next part isn&amp;rsquo;t included in the test.
 Look at a box with one particle:
Now lets add a lot more particles:
These don&amp;rsquo;t need to be derived, but understood. Will be useful on the next exam.
The degree of freedom is the &amp;ldquo;number of boxes&amp;rdquo; you can divide the energy into.</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200505</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200505/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200505/</guid>
      <description>Announcements #  Class postponed until recitation.</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200507</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200507/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200507/</guid>
      <description>Announcements #  Clickers #    Discussion #  Convection:
The warm air is pushed up by the cold air underneath it. Same as buoyant force! This is where the term &amp;ldquo;heat rises&amp;rdquo; comes from.
Then the hot air cools and cycles down.
Radiation:
Infrared heat. Wavelengths that are longer than visible light.
The emissivaty of 1 radiates a lot (like a black surface). Emissivaty of 0 radiates nothing.</description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200512</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200512/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200512/</guid>
      <description>Announcements #  The open ended question on the exam will almost certainly be a heat engine problem.
Today #  There will be recitation this afternoon.
Clickers #    Quick review of thermal processes #  Isobaric (constant pressure)
Isometric (constant volume)
Isothermal (constant temperature)
Adiabatic ((q)
Remember:
Discussion #  According to the second law of thermodynamics, there is no perfect heat engine.
   </description>
    </item>
    
    <item>
      <title>PHYS105-lecture-20200514</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200514/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-lecture-20200514/</guid>
      <description>Announcements #  Today #  Clickers #   Clockwise around the PV diagram is negative work done on the gas.
Discussion #  Container on the left contains 3 times the thermal energy because it has 3 times the amount of particles, even tho the temperatures are the same.
The disorder is proportional to the number of available states (boxes that you can divide each curve into). More temp = more disordered state.</description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200331</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200331/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200331/</guid>
      <description>Angular motion questions #  HW Questions #  1
5
Since traveling less than ideal speed the car slides down the bank.
6
Another problem #  A pendulum swings back and forth with a given length 2m. (Similar to quiz)
It is moving tangenital at 8 m/s
 What is the radial or centripetal acceleration?  What is the tangential acceleration?  What is the tension in the string?</description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200414</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200414/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200414/</guid>
      <description>Anouncements #  Quiz 7 #  Part 1 #  The shape made by swinging the string makes a cone.
To find the angle look at the second equation.
The radius of the circle is $lsin \theta$
Solve for $v$.
Part 2 #  Vertical circle
We&amp;rsquo;re interested in the ball at three different points.
Part A
Solve for $v$
Part B
Solve for $v$
Part C
 HW #  2 #  Positive torque clockwise, negative torque CCW.</description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200416</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200416/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200416/</guid>
      <description>This is usually lab time but today it will be recitation.
Announcements #   Spine problem
To find these unknowns we use the sum of the torques
Fill out distances
Find perpendicular components
Solve for $F_m$
Back muscle exerts 2.3 times your weight to hold you up!
Total force
Just bending over the force you put on your spine is 2.5 times your body weight.
 Kinematics problem
Final angular velocity will be 0</description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200421</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200421/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200421/</guid>
      <description>Quiz 8 #  Part 1
What is the tension $T_L$?
Part 2
Because the disc is spinning you must add in the rotational component. $I$ Will be given.
Doesn&amp;rsquo;t depend on mass.
 Topics to be covered on exam #  Rotational translation
Centripetal acceleration
Gravitational laws
Angular velocity
If something is rolling
 HW #  6 #  Convert to seconds
Use the period around the sun to find the speed</description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200428</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200428/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200428/</guid>
      <description>Announcements #  Clicker #   The only thing that doesn&amp;rsquo;t change with temperature is mass.
 Atoms are also mostly empty space.
 Ideal gas law #  Molecules of a gas bouncing off the walls of a container on average is the gas pressure.
Gas pressure arises from the temperature of the gas molecules.
Increasing the temp increases the pressure. Increasing the number of molecules also increases the temperature.</description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200430</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200430/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200430/</guid>
      <description>HW #  2 #  A
B
Solve for (K)
5 #  7 #  Part b asks for the same thing but with water, then you find the difference in the overflows.
Next HW #  For the next HW assignment we need to define gauge pressure.
The gauge pressure is like what you measure when you measure your tire pressure. Its not the pressure of the gas inside, its the pressure of the gas inside above normal atmosphere.</description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200505</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200505/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200505/</guid>
      <description>Announcements #  Today #  Discussion #  The melting process is breaking the bonds
The temp stays the same while changing from liquid to gas also.
Melting and evaporating are cooling processes.
Freezizng and condensating are warming processes.
 The system is the ice, aluminum, and the water. Isolated from the environment.
There are three possible cases:
We know the water and liquid will cool, but we&amp;rsquo;re letting the sign take care of it.</description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200507</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200507/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200507/</guid>
      <description>Announcements #  Discussion #  N means no change C means change on this summary.
  If you travel around a PV diagram in the clockwise direction the net work will be negative. If counterclockwise, the work done on the gas is positive.
HW #  5 tonights #  7 tomorrows #  </description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200512</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200512/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200512/</guid>
      <description>Announcements #  HW #  3 #  4 #  7 #   Other questions #  It is reflecting all colors because of its crystal structure, so it is not absorbing a lot of heat.  It adds a lot of thermal mass so it takes a lot more energy to cool down the entire room.
Air is a worse conductor of heat than water.
Shiney side will reflect more, so shiny side in lets heat thru then traps it inside.</description>
    </item>
    
    <item>
      <title>PHYS105-recitation-20200514</title>
      <link>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200514/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/PHYS105/PHYS105-recitation-20200514/</guid>
      <description>HW 22 #  4 #  Solve for (T_H)
10 #  HW 21 #  2 #  Quiz 11 #  Calculate the value (P_A) and the circled empty values of the table:</description>
    </item>
    
    <item>
      <title>RPTA125-lecture-20220125</title>
      <link>http://zedchance.github.io/notes/RPTA125/RPTA125-lecture-20220125/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/RPTA125/RPTA125-lecture-20220125/</guid>
      <description>Leisure, the Individual, and Contemporary Society #  Syllabus #  File: rpta125-syllabus.pdf  Notes during orientation #   the greyed out rows on the tentative schedule in the syllabus are weeks when we don&amp;rsquo;t meet via Zoom   minimum of 5000 words total for the class broken up into smaller assignments 2 large papers, several smaller papers, several discussions  </description>
    </item>
    
    <item>
      <title>RPTA125-lecture-20220201</title>
      <link>http://zedchance.github.io/notes/RPTA125/RPTA125-lecture-20220201/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/RPTA125/RPTA125-lecture-20220201/</guid>
      <description>Overview of Leisure #  To endure rather than to enjoy means: trying to make a living, just to get by. I plan on being able to balance work life with leisure to not burn out.
What is leisure? #  Leisure as a state of mind #  Leisure is political #  </description>
    </item>
    
    <item>
      <title>RPTA125-lecture-20220208</title>
      <link>http://zedchance.github.io/notes/RPTA125/RPTA125-lecture-20220208/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/RPTA125/RPTA125-lecture-20220208/</guid>
      <description>Recreation and Play #   social capital = network of relationships  Definition #  Play #  Types #  Definitions #  Reminders #  </description>
    </item>
    
    <item>
      <title>RPTA125-lecture-20220215</title>
      <link>http://zedchance.github.io/notes/RPTA125/RPTA125-lecture-20220215/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/RPTA125/RPTA125-lecture-20220215/</guid>
      <description>Reminders #  History of leisure #  </description>
    </item>
    
    <item>
      <title>STATS50-lecture-notes</title>
      <link>http://zedchance.github.io/notes/STATS50/STATS50-lecture-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/STATS50/STATS50-lecture-notes/</guid>
      <description>STATS 50 lecture notes #  File: STATS50-lecture-notes.pdf  </description>
    </item>
    
  </channel>
</rss>
