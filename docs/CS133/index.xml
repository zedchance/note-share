<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS133 on Notes</title>
    <link>http://zedchance.github.io/notes/CS133/</link>
    <description>Recent content in CS133 on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/CS133/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS133-lecture-20210125</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210125/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210125/</guid>
      <description>Abstraction #   A generalization of something too complext to be dealt with in its entirety For humans not computers  It is a techinque we use to compensate for the relatively puny capacity of our brains There aren&amp;rsquo;t enough neurons (or connections) in our brain to process the rich detail around us during a single moment in time   Successful designers developer abstractions and hierarchies of abstractions for complex entities and move up and down this hierarchy with splendid ease.</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210208</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210208/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210208/</guid>
      <description>UML #  Since there isn&amp;rsquo;t a way to pass a new DisplayPanel object into the constructor, it is a composition.
Example CRC card building
Clean code #  Design principles #  &amp;ldquo;The Art of Clean Code&amp;rdquo; video #  Summary:
Victor Rentea&amp;rsquo;s clean code video had a lot of amazing information for making sure that the code you write is considered &amp;ldquo;clean.&amp;rdquo; I think that clean code is a very important part of being a good programmer because it conveys the sense that you care about your team&amp;rsquo;s ability to read your code.</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210210</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210210/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210210/</guid>
      <description>Inheritance #  Replace inheritance with delegation #  Polymorphism #  Interfaces #  Extending multiple interfaces only applies to other interfaces</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210215</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210215/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210215/</guid>
      <description>CN1 #  Components #  Layout managers #  Building the GUI #  </description>
    </item>
    
    <item>
      <title>CS133-lecture-20210217</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210217/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210217/</guid>
      <description>Event driven #  laidOut() is called once the component is fully &amp;ldquo;laid out&amp;rdquo; (once it&amp;rsquo;s drawn after the show() method is called).
Command design pattern #  Observer design pattern #  The old way of doing it: #  </description>
    </item>
    
    <item>
      <title>CS133-lecture-20210227</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210227/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210227/</guid>
      <description>Design Patterns #  Strategy pattern #  An example in codename one
Composite pattern #  An example of the &amp;ldquo;wrong way to do things&amp;rdquo;
A refactored way:
Decorator pattern #  As a reminder, this is not the same as the composite pattern:
State pattern #  Pree&amp;rsquo;s metapatterns #  Concerning the state pattern vs the strategy pattern
Singleton pattern #  Note the synchronize keyword in the method header, this makes the method thread safe.</description>
    </item>
    
    <item>
      <title>CS133-lecture-20210301</title>
      <link>http://zedchance.github.io/notes/CS133/CS133-lecture-20210301/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS133/CS133-lecture-20210301/</guid>
      <description>Visitor pattern #  This becomes hard to maintain, and violates the open closed principle.
The concrete visitors are the extensible operations we can perform to add more features to the concrete elements.
Why the visitor pattern? #  Single vs double dispatch (polymorphism). Java supports single dispatch out of the box, but double isn&amp;rsquo;t supported out of the box.
Animal dog = new Dog(); Animal cat = new Cat(); Double dispatch is not openly supported, in other words you can&amp;rsquo;t have unique interactions between 2 different classes dynamically.</description>
    </item>
    
  </channel>
</rss>
