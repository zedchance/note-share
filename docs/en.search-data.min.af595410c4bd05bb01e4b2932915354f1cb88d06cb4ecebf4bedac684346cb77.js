'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/notes/CS10/',title:"CS10",section:"Lecture Notes",content:"CS10 – Intro to Computer Science #    CS10-labs    processing\n   "}),a.add({id:1,href:'/notes/CS12/',title:"CS12",section:"Lecture Notes",content:"CS12 – Programming Concepts and Methods I #    CS12-lecture-notes    java\n   "}),a.add({id:2,href:'/notes/CS13/',title:"CS13",section:"Lecture Notes",content:"CS13 – Programming Concepts and Methods II #    CS13-lecture-notes    java\n   "}),a.add({id:3,href:'/notes/CS130/',title:"CS130",section:"Lecture Notes",content:"CS130 – Data Structures and Algorithms #    CS130-exercise-solutions-1       CS130-lecture-20200831    syllabus\n   CS130-lecture-20200902    asymptotic notation\nrecursion\ntail recursion\n   CS130-lecture-20200909    space complexity\ntime complexity\n   CS130-lecture-20200914    time complexity\nspace complexity\n   CS130-lecture-20200916    mergesort\n   CS130-lecture-20200921    mergesort\nquicksort\n   CS130-lecture-20200923    quicksort\n   CS130-lecture-20200928    priority queues\nquicksort\n   CS130-lecture-20200930    heapsort\npriority queues\n   CS130-lecture-20201005    heapsort\n   CS130-lecture-20201007    count sort\nheapsort\nradix sort\n   CS130-lecture-20201012    binary search\nradix sort\nsymbol table\n   CS130-lecture-20201014    binary search\n   CS130-lecture-20201019    binary search\n   CS130-lecture-20201021    review\n   CS130-lecture-20201028    2-3 search tree\nred-black BST\n   CS130-lecture-20201102    2-3 search tree\nred-black BST\n   CS130-lecture-20201104    red-black BST\nB-tree\nunordered symbol table\n   CS130-lecture-20201109    unordered symbol table\nhashing\n   CS130-lecture-20201116    unordered symbol table\nhashing\nlinear probing\n   CS130-lecture-20201118    symbol table\ndisjoint set\n   CS130-lecture-20201123    disjoint set\nunion find\n   CS130-lecture-20201125    graph\nundirected graph\ndepth first search\n   CS130-lecture-20201130    graph\nbreadth first search\ndirected graph\ntopological sort\n   CS130-lecture-20201202    graph\nweighted graph\nminimum spanning tree\ntopological sort\nedge weighted digraph\nkosaraju\u0026#39;s algorithm\nprim\u0026#39;s algorithm\nkruskal\u0026#39;s algorithm\n   CS130-lecture-20201207    shortest path tree\ndijkstra\u0026#39;s algorithm\nbellman-ford algorithm\nturing machine\n   CS130-lecture-20201209    review\n   CS130-priority-queues       CS130-sorting-algorithms    mergesort\nquicksort\n   "}),a.add({id:4,href:'/notes/CS131/',title:"CS131",section:"Lecture Notes",content:"CS131 – Software Engineering #    CS131-lecture-20200901    software engineering\n   CS131-lecture-20200903    software engineering\nsoftware development life cycles\nagile\n   CS131-lecture-20200908    agile\n   CS131-lecture-20200910    agile\nscrum\n   CS131-lecture-20200915    use case\n   CS131-lecture-20200917    agile\n   CS131-lecture-20200922    contextual inquiry\n   CS131-lecture-20200924    scrum\nuser stories\n   CS131-lecture-20200929    human computer interaction\ncontextual inquiry\n   CS131-lecture-20201001    contextual inquiry\n   CS131-lecture-20201006    737 Boeing disaster\n   CS131-lecture-20201008    human computer interaction\n   CS131-lecture-20201013       CS131-lecture-20201015    git\n   CS131-lecture-20201020    REST\n   CS131-lecture-20201022    software architecture\ncrc\n   CS131-lecture-20201027    sprint review\n   CS131-lecture-20201029    software architecture\n   CS131-lecture-20201103    UML\nclass diagrams\n   CS131-lecture-20201105    UML\nclass diagrams\nsoftware design\n   CS131-lecture-20201110    class diagrams\nUML\nsoftware design\ncode design\n   CS131-lecture-20201112    code design\n   CS131-lecture-20201119    implementation\nstatic analysis\ndynamic analysis\nrefactoring\n   CS131-lecture-20201124    project management\nverification/validation\n   CS131-lecture-20201201    verification/validation\n   CS131-lecture-20201203    verification/validation\n   CS131-lecture-20201208    devops\n   CS131-study-guide-1       CS131-study-guide-2       CS131-study-guide-3       CS131-study-guide-4       "}),a.add({id:5,href:'/notes/CS133/',title:"CS133",section:"Lecture Notes",content:"CS133 – Object Oriented Computer Graphics #    CS133-lecture-20210125    abstraction\nmodularity\ncoupling\ncohesion\nencapsulation\n   CS133-lecture-20210208    UML\nsoftware design\nclean code\n   CS133-lecture-20210210    inheritance\npolymorphism\ninterfaces\n   CS133-lecture-20210215    GUI\ncodename one\n   CS133-lecture-20210217    codename one\nevent driven\ncommand design\nobserver design\n   CS133-lecture-20210227    software design\ndesign patterns\n   CS133-lecture-20210301    design patterns\n   CS133-lecture-20210307    clean code\n   CS133-lecture-20210310    color theory\nGUI\n   CS133-lecture-20210314    GUI\ncodename one\n   CS133-lecture-20210407    transformations\n   "}),a.add({id:6,href:'/notes/CS135/',title:"CS135",section:"Lecture Notes",content:"CS135 – Computer Theory and Programming Languages #    CS135-hw-20210203       CS135-hw-20210302    racket\n   CS135-lecture-20210126       CS135-lecture-20210129    finite automata\n   CS135-lecture-20210201    finite automata\n   CS135-lecture-20210204    regular expressions\n   CS135-lecture-20210205    finite automata\nregular expressions\n   CS135-lecture-20210209    pumping lemma\n   CS135-lecture-20210216    regular expressions\nfinite automata\n   CS135-lecture-20210217    pumping lemma\n   CS135-lecture-20210218    immutability\nracket\n   CS135-lecture-20210225    tail recursion\naccumulators\nracket\n   CS135-lecture-20210227    functional programming\nrecursion\nracket\n   CS135-lecture-20210307    racket\nmergesort\nlambdas\nclosure\n   CS135-lecture-20210309    tail recursion\nracket\n   CS135-lecture-20210310    context-free grammar\npush-down automata\n   CS135-lecture-20210311    push-down automata\n   CS135-lecture-20210315    context-free grammar\nparse trees\nambiguity\n   CS135-lecture-20210318    context-free language\npumping lemma\n   CS135-lecture-20210329    context-free grammar\npush-down automata\npumping lemma\n   CS135-lecture-20210405    compilers\nlexers\nparsers\n   CS135-lecture-20210407    lexers\n   CS135-lecture-20210419    lexers\nparsers\nrecursive-descent predictive-parsing\n   "}),a.add({id:7,href:'/notes/CS137/',title:"CS137",section:"Lecture Notes",content:"CS137 – Computer Organization #    CS137-lecture-20210126    syllabus\n   CS137-lecture-20210128       CS137-lecture-20210202    IEEE754\n   CS137-lecture-20210204    IEEE754\n   CS137-lecture-20210209    combinational circuits\ndemorgan\u0026#39;s theorem\n   CS137-lecture-20210211    karnaugh map\n   CS137-lecture-20210216    full adder\n   CS137-lecture-20210218    full adder\n   CS137-lecture-20210223    demorgan\u0026#39;s theorem\n   CS137-lecture-20210225    multiplexers\n   CS137-lecture-20210302    sequential circuits\n   CS137-lecture-20210304    sequential circuits\ns-r latch\n   CS137-lecture-20210309    review\n   CS137-lecture-20210316    sequential circuits\nfinite state machine\n   CS137-lecture-20210318    sequential circuits\nfinite state machine\n   CS137-lecture-20210330    sequential circuits\nfinite state machine\nmoore machine\n   CS137-lecture-20210401    finite state machine\nmoore machine\nmealy machine\n   CS137-lecture-20210406    mealy machine\nsequential circuits\n   CS137-lecture-20210408    sequential circuits\n   CS137-lecture-20210413    sequential circuits\n   CS137-lecture-20210415    memory\n   "}),a.add({id:8,href:'/notes/CS138/',title:"CS138",section:"Lecture Notes",content:"CS138 – Computer Networking and Internet #    CS138-lecture-20210126    syllabus\n   CS138-lecture-20210128    network edge\n   CS138-lecture-20210202    network edge\nnetwork core\n   CS138-lecture-20210204    network core\ndelay\nloss\nthroughput\n   CS138-lecture-20210209    network core\ndelay\nthroughput\n   CS138-lecture-20210211    protocol layers\nnetwork security\nnetwork history\napplication layer\n   CS138-lecture-20210216    application layer\nhttp\n   CS138-lecture-20210218    http\ncookies\nproxy\n   CS138-lecture-20210223    web caching\nftp\nemail\n   CS138-lecture-20210225    dns\n   CS138-lecture-20210302    dns\np2p\n   CS138-lecture-20210304    sockets\n   CS138-lecture-20210309    transport layer\nUDP\n   CS138-lecture-20210311    UDP\n   CS138-lecture-20210316    review\n   CS138-lecture-20210330    piplined protocols\ngo-back-n\nselective repeat\n   CS138-lecture-20210401    TCP\n   CS138-lecture-20210406    TCP\nflow control\ncongestion control\n   CS138-lecture-20210408    TCP\ncongestion control\nthroughput\nnetwork layer\n   CS138-lecture-20210413    review\nvirtual circuits\ndatagrams\n   CS138-lecture-20210415    network layer\nswitching fabrics\ninternet protocol\nIPv4\n   CS138-lecture-20210420    network layer\nIPv4\nDHCP\nNAT\nICMP\nIPv6\n   "}),a.add({id:9,href:'/notes/CS26/',title:"CS26",section:"Lecture Notes",content:"CS26 – Discrete Structures #    CS26-lecture-notes    discrete structures\npython\n   CS26-reading-notes       "}),a.add({id:10,href:'/notes/CS39/',title:"CS39",section:"Lecture Notes",content:"CS39 – Intro to Computer Architecture #    CS39-lecture-notes    assembly\n   "}),a.add({id:11,href:'/notes/CS46/',title:"CS46",section:"Lecture Notes",content:"CS46 – System Programming with C #    CS46-lecture-notes    C\n   Luhn\u0026#39;s Algorithm    C\n   "}),a.add({id:12,href:'/notes/MATH100/',title:"MATH100",section:"Lecture Notes",content:"MATH100 – Applied Linear Algebra #    MATH100-lecture-notes    linear algebra\n   "}),a.add({id:13,href:'/notes/MATH31/',title:"MATH31",section:"Lecture Notes",content:"MATH31 – Calculus II #    MATH31-comparison-tests    series\n   MATH31-integral-test    integration\n   MATH31-series    series\n   MATH31-unit-1       MATH31-unit-2       MATH31-unit-3       "}),a.add({id:14,href:'/notes/PHIL103/',title:"PHIL103",section:"Lecture Notes",content:"PHIL103 – Business and Computer Ethics #    PHIL103-ec-lecture       PHIL103-lecture-20200831    applied ethics\n   PHIL103-lecture-20200907    division of labor\n   PHIL103-lecture-20200916    capitalism/socialism\n   PHIL103-lecture-20200924    property rights\n   PHIL103-lecture-20200927    property rights\n   PHIL103-lecture-20201008    privacy\n   PHIL103-lecture-20201014    blockchain\n   PHIL103-lecture-20201024    net neutrality\n   PHIL103-lecture-20201028    corporate social responsibility\n   PHIL103-lecture-20201104    market failures\n   PHIL103-lecture-20201110    behavior\n   PHIL103-lecture-20201122    morality\n   "}),a.add({id:15,href:'/notes/PHYS105/',title:"PHYS105",section:"Lecture Notes",content:"  PHYS105-resources       PHYS105-lab-20200326    centripetal force\n   PHYS105-lab-20200402    ballistic pendulum\n   PHYS105-lab-20200423    ideal gas law\n   PHYS105-lecture-20200319       PHYS105-lecture-20200326    circular motion\n   PHYS105-lecture-20200331    circular motion\n   PHYS105-lecture-20200402    gravitational forces\n   PHYS105-lecture-20200414    torque\nequilibrium\n   PHYS105-lecture-20200416    equilibrium\nrotational motion\n   PHYS105-lecture-20200421    rotational motion\n   PHYS105-lecture-20200428    thermodynamics\n   PHYS105-lecture-20200430    kinetic theory of gases\ncalorimetry\n   PHYS105-lecture-20200505       PHYS105-lecture-20200507    convection/radiation\n   PHYS105-lecture-20200512    heat engines\nthermodynamics\n   PHYS105-lecture-20200514    heat engines\nthermodynamics\nentropy\n   PHYS105-recitation-20200331    angular motion\n   PHYS105-recitation-20200414       PHYS105-recitation-20200416    equilibrium\nkinematics\nrotational motion\n   PHYS105-recitation-20200421       PHYS105-recitation-20200428    ideal gas law\n   PHYS105-recitation-20200430       PHYS105-recitation-20200505    convection/radiation\n   PHYS105-recitation-20200507    ideal gas law\n   PHYS105-recitation-20200512       PHYS105-recitation-20200514       "}),a.add({id:16,href:'/notes/STATS50/',title:"STATS50",section:"Lecture Notes",content:"STATS50 – Intro to Probability and Statistics #    STATS50-lecture-notes    stats\n   "}),a.add({id:17,href:'/notes/sample/',title:"Sample",section:"Lecture Notes",content:'Format testing #  Voluptatem sunt ut asperiores. #  Quis iusto non et aut omnis officiis tempora. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit. Quis iusto non et aut omnis officiis tempora. Quis iusto non et aut omnis officiis tempora. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit.\nDanger!!!\nVoluptatem sunt ut asperiores. Quis iusto non et aut omnis officiis tempora. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit.\n\\[f(x) = \\sqrt{n}\\]\none Voluptatem sunt ut asperiores. Quis iusto non et aut omnis officiis tempora. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit.  Another Voluptatem sunt ut asperiores. Quis iusto non et aut omnis officiis tempora. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit.    Here is the first column. Et fuga quae sed. Tempore facilis maiores quis ut qui quis a cumque. Accusamus quia error est. Veritatis vero dolor et molestiae exercitationem.\nSystem.out.println(\u0026#34;Yo, world!\u0026#34;); Nostrum et eveniet dolorum. Soluta sint voluptas eligendi. Qui molestiae enim laborum necessitatibus sed cumque velit. Laborum aut repellendus et qui possimus architecto cum. Quis laboriosam nostrum quia.\n Here is some more stuff in the second column.\n// code   \\[\\begin{aligned} f(x) = \\sqrt{n} \\end{aligned}\\]   mermaid.initialize({ "flowchart": { "useMaxWidth":true }, "theme": "default" } ) classDiagram class Test { + int x + int y + getLocation() } Here we go with some more. Voluptate quo corporis explicabo nobis. In excepturi ea enim pariatur qui inventore quibusdam.\n  gitGraph: options { "nodeSpacing": 150, "nodeRadius": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit merge newbranch Example 2 Is this, here we go.\ncode in here \\[f(x) = \\sqrt{n}\\]\nId non fuga molestias doloribus. Temporibus iure quam sequi rerum accusantium libero. Dolores odio eaque reprehenderit veniam temporibus voluptatem. Possimus non expedita blanditiis sit sed voluptatibus iste. Et inventore odit possimus itaque maxime dolorum debitis. Eos explicabo possimus repellat. Earum qui fuga laudantium.\n  Here is some info.\nI think I can keep putting stuff below.\n \\[\\begin{aligned} f(x) = 200000 \\end{aligned}\\]   Look out for this warning.\nNostrum et eveniet dolorum. Soluta sint voluptas eligendi. Qui molestiae enim laborum necessitatibus sed cumque velit. Laborum aut repellendus et qui possimus architecto cum. Quis laboriosam nostrum quia. Voluptatem sunt ut asperiores. Quis iusto non et aut omnis officiis tempora. Odit aut ullam nisi voluptas a. Est animi et ut natus molestias sit.\n More down here #   \\[\\begin{aligned} f(x) = \\int_a^b \\mathrm{d}x \\end{aligned}\\]  Gist inside    Here\npublic static void main(String[] args) { // cool  System.out.println(\u0026#34;Here is some text!\u0026#34;); } Mermaid diagrams #  classDiagram Man graph TD 1 -- 2 2 -- 3 HEAD -- 3 graph TD s1([s1]) s2([s2]) s1 --|a| s1 s1 --|b| s2   pie title NETFLIX "Time spent looking for movie" : 90 "Time spent watching it" : 10 sequenceDiagram Alice - Bob: Hello Bob, how are you? Bob--John: How about you John? Bob--x Alice: I am good thanks! Bob-x John: I am good thanks! Note right of John: Bob thinks a longlong time, so longthat the text doesnot fit on a row. Bob--Alice: Checking with John... Alice-John: Yes... John, how are you? sequenceDiagram Client - Server: GET /index Note right of Server: The server receives the request, and responds Server - Client: OK 200 classDiagram class Shape{  noOfVertices draw() } class Color{  RED BLUE GREEN WHITE BLACK } classDiagram GameObject '}),a.add({id:18,href:'/notes/PHYS105/PHYS105-resources/',title:"PHYS105-resources",section:"PHYS105",content:"   Resources      Text book UniversityPhysicsVolume2-OP.pdf   Lab coversheet p105L Lab Coversheet sp17.pdf   Text 3 notes p105 Test 3 notes.pdf       My stuff      Quiz 6 Quiz-6.pdf   Test 2 PHYS105-test2.pdf    "}),a.add({id:19,href:'/notes/CS10/CS10-Processing-labs/',title:"CS10-labs",section:"CS10",content:"CS10 Labs #  Lab 1 - My \u0026ldquo;creature\u0026rdquo; #  /* Zed Chance Lab 1 CS 10 Summer 18 My \u0026#34;creature\u0026#34; */ //Setup size(800,600); background(0); //MENS BATHROOM SIGN  //Signpost rectMode(CENTER); noStroke(); fill(113,86,86); rect(200,475,30,250); //Background circle fill(70,89,255); ellipseMode(CENTER); stroke(255); strokeWeight(5); ellipse(200,200,350,350); //Head noStroke(); fill(220); ellipse(200,100,70,70); //Torso rectMode(CENTER); rect(200,190,60,100); //Arms rect(200,150,100,20,10); rectMode(CORNER); rect(145,140,20,100,10); rect(235,140,20,100,10); //Legs rect(170,230,27,100,10); rect(203,230,27,100,10); //WOMENS BATHROOM SIGN  //Signpost rectMode(CENTER); noStroke(); fill(113,86,86); rect(600,475,30,250); //Background circle fill(70,89,255); ellipseMode(CENTER); stroke(255); strokeWeight(5); ellipse(600,200,350,350); //Head noStroke(); fill(220); ellipse(600,100,70,70); //Torso rectMode(CENTER); rect(600,190,60,100); //Arms rect(600,150,100,20,10); rectMode(CORNER); stroke(220); strokeWeight(25); line(560,155,535,235); line(640,155,665,235); //Dress quad(585,190,565,255,635,255,615,190); //Legs noStroke(); rect(570,230,27,100,10); rect(603,230,27,100,10); //ARROW SIGNS //left background rectMode(CENTER); fill(220); rect(200,450,150,75,10); fill(150); rect(200,450,145,70,10); //left arrow fill(255); rect(210,450,60,25); triangle(190,425,190,475,150,450); //right background rectMode(CENTER); fill(220); rect(600,450,150,75,10); fill(150); rect(600,450,145,70,10); //right arrow fill(255); rect(590,450,60,25); triangle(610,425,610,475,650,450); Lab 2 - Making my creature redraw with the mouse\u0026rsquo;s movement #  /* Zed Chance Lab 2 CS 10 Summer 18 Making my creature redraw with the mouse\u0026#39;s movement */ //Setup void setup() { size(400, 600); background(0); //Signpost  rectMode(CENTER); noStroke(); fill(113, 86, 86); rect(200, 475, 30, 250); //Background circle  fill(70, 89, 255); ellipseMode(CENTER); stroke(255); strokeWeight(5); ellipse(200, 200, 350, 350); } //Continuously redraw the human void draw() { //Declare mouse  int x = mouseX; int y = mouseY; //Head  stroke(0); strokeWeight(1); //Had to add weight, otherwise it was hard to tell if it was moving  fill(220,x,y); ellipse(x,y,70,70); //was 200,100  //Arms  rect(x,y+50,100,20,10); //was 200,150  rectMode(CORNER); rect(x-55,y+40,20,100,10); //was 145/140  rect(x+35,y+40,20,100,10); //was 235/140  //Legs  rect(x-30,y+130,27,100,10); //was 170,230  rect(x+3,y+130,27,100,10); //was 203,230  //Torso  rectMode(CENTER); rect(x,y+90,60,100); //was 200,190 } //Click mouse to reset void mousePressed() { background(0); //Signpost  rectMode(CENTER); noStroke(); fill(113, 86, 86); rect(200, 475, 30, 250); //Background circle  fill(70, 89, 255); ellipseMode(CENTER); stroke(255); strokeWeight(5); ellipse(200, 200, 350, 350); println(hour(),\u0026#34;:\u0026#34;,minute(),\u0026#34;:\u0026#34;,second(),\u0026#34;-\u0026#34;,\u0026#34;Mouse input detected: Background reset\u0026#34;); } Lab 4 - Launching my \u0026ldquo;creature\u0026rdquo; like a rocket #  /* Zed Chance Lab 4 CS 10 Summer 18 Launching my \u0026#34;creature\u0026#34; like a rocket */ //Initialize variables float r = 0; float g = 0; float b = 0; float x = 0; float y = 0; void setup() { size(400,600); x = width/2; //x is centered  y = height + 50; //starts 50 pixels below  background(0); } void draw() { background(0); //Head  noStroke(); fill(255,255,255); ellipse(x,y,70,70); //Arms  rect(x,y+50,100,20,10); rectMode(CORNER); rect(x-55,y+40,20,100,10); rect(x+35,y+40,20,100,10); //Legs  rect(x-30,y+130,27,100,10); rect(x+3,y+130,27,100,10); //Torso  rectMode(CENTER); rect(x,y+90,60,100); //Rockets  r); b = 5; g); fill(r,g,b); //Jets random color between yellow and red  triangle(x-55,y+135,x-35,y+135,x-45,y+160); //Hand jets  triangle(x+55,y+135,x+35,y+135,x+45,y+160); triangle(x-30,y+225,x-5,y+225,x-18,y+255); //Feet jets  triangle(x+30,y+225,x+5,y+225,x+18,y+255); //Blast off!  x); y = y - 2.5; } Lab 5 - Creature screensaver #  /* Zed Chance Lab 5 CS 10 Summer 18 Creature screensaver */ //Initialize variables float r = 0; float g = 0; float b = 0; float x = 0; float y = 0; float xSpeed = 3; float ySpeed = 1; void setup() { size(600,600); x = width/2; y = height/4; background(0); } void draw() { background(0); //Horizontal movement  x = x + xSpeed; if (x \u0026gt; width-55 || x \u0026lt; 55) { xSpeed = xSpeed*-1; } //Vertical movement  y = y + ySpeed; if (y \u0026gt; height-230 || y \u0026lt; 35) { ySpeed = ySpeed*-1; } //Color changes with quadrant  if (x \u0026lt; width/2 \u0026amp;\u0026amp; y \u0026lt; height/2) { r = 0; g = 0; b = 255; } if (x \u0026gt; width/2 \u0026amp;\u0026amp; y \u0026lt; height/2) { r = 255; g = 0; b = 0; } if (x \u0026lt; width/2 \u0026amp;\u0026amp; y \u0026gt; height/3) { r = 0; g = 255; b = 0; } if (x \u0026gt; width/2 \u0026amp;\u0026amp; y \u0026gt; height/3) { r = 0; g = 255; b = 255; } //Fill body with color determined by above  fill(r,g,b); noStroke(); //Head  ellipse(x,y,70,70); //Arms  rect(x,y+50,100,20,10); rectMode(CORNER); rect(x-55,y+40,20,100,10); rect(x+35,y+40,20,100,10); //Legs  rect(x-30,y+130,27,100,10); rect(x+3,y+130,27,100,10); //Torso  rectMode(CENTER); rect(x,y+90,60,100); } Lab 6 - Multiplying creature with loops #  /* Zed Chance Lab 6 CS 10 Summer 18 Multiplying creature with loops */ //Setup size(800,300); background(0); //Initialize variables float x = -20; float y = 50; float r = 0; float g = 0; float b = 0; while (x \u0026lt; width) { //Color  noStroke(); fill(r,g,b); //Head  ellipse(x,y,70,70); //Arms  rect(x,y+50,100,20,10); rectMode(CORNER); rect(x-55,y+40,20,100,10); rect(x+35,y+40,20,100,10); //Legs  rect(x-30,y+130,27,100,10); rect(x+3,y+130,27,100,10); //Torso  rectMode(CENTER); rect(x,y+90,60,100); //Randomly change color pallette  r); g); b); //Move creature over  x = x + 120; } Lab 7 - Using a function to create multiple creatures #  /* Zed Chance Lab 6 CS 10 Summer 18 Using a function to create multiple creatures */ //Define my creature function void myCreature(float x,float y,color c) { //Color  noStroke(); fill(c); //Head  ellipse(x,y,70,70); //Arms  rect(x,y+50,100,20,10); rectMode(CORNER); rect(x-55,y+40,20,100,10); rect(x+35,y+40,20,100,10); //Legs  rect(x-30,y+130,27,100,10); rect(x+3,y+130,27,100,10); //Torso  rectMode(CENTER); rect(x,y+90,60,100); } void setup() { size(800,800); background(0); } void draw() { //Call my creature function in draw function  myCreature(random(width),random(height),color(random(255),random(255),random(255))); } "}),a.add({id:20,href:'/notes/CS12/CS12-lecture-notes/',title:"CS12-lecture-notes",section:"CS12",content:"CS 12 Lecture notes #  Aug 20, 2018 #  [X] Download Java JDK and jGRASP [2018-08-20]\nA class is a “blueprint\u0026quot; for objects in object-oriented coding\n Aug 22, 2018 #  class #  All Java programs are structured in a class. It is a the fundamental part of a Java program. The simplest programs have a main method, which contains all of the code. The actual java library only has around 40 commands, but it has an extensive library of classes that you can use. ​main​ is the entry point to the code.\nA more serious java program also includes a class​, but it will generally start with fields, then constructors, then accessors, then mutators, then general methods.\npublic class FirstJava { public static void main(String[] args) { System.out.println(\u0026#34;Hello from Java\\n\u0026#34;); } } The public class determines how exposed the class is to the world. class means were going to create a structure these sort of things. FirstJava is the identifier of the class. It is simply a name for the class, created by the programmer, must start with a alphabetic character. The java way is to capiatlize the first character of a class, although it doesn’t need to be. A string is a contiguously allocated sequence of bites. \\n is an escape character to make a new line.\nimport java.util.Scanner; public class MilesPerGallon { public static void main(String[] args) { double miles; double gallons; double mpg; Scanner kb); System.out.print( \u0026#34;Enter miles driven: \u0026#34; ); miles); System.out.print( \u0026#34;Enter gallons used: \u0026#34; ); gallons); mpg = miles / gallons; System.out.println(\u0026#34;Your car drove \u0026#34; + mpg + \u0026#34; miles per gallon\u0026#34;); }// end main }// end class public static void main(String[] args)​\npublic means that it is exposed, a visibility specifier. static means that main exists, its ready to be used. void means that it doesn’t return anything. main is the name of the method, a method is a block of code that does something. All java applets must have a main method. (String[] args) is the parameter list.\n Aug 27, 2018 #   Programming is a craft, with a lot of trial and error.\n Developing software:\n Understand the problem Develop our key algorithm in pseudocode (plain english) Test the algorithm with pencil and paper Code the algorithm in the target language Test the code (arguably the hardest part of the development)  Usually have to go back to step 4, sometimes back to step 2, and if still not working then step 1. If steps 1-3 go well then 4-5 are easy.    Algorithms characteristics:\n Unambiguous Executable Terminates Zero or more inpurts One or more outputs  To develop an algorithm:\n Determine the inputs and the outputs (if you know this step its extremely helpful)  Evaluate solutions (survey the landscape)   Break our solution into smaller pieces (divide and conquer) Describe each subtask in pseudocode Test pseudocode with a desk-check (pencil and paper test)  Pseudocode for making breakfast:\n Fill kettle with water Set kettle on burner Turn burner on high Grind coffee Put pan on burner Turn burner on med Put butter in pan Crack eggs in pan Put english muffin in toaster scramble eggs Pour boiling water into coffee maker Pull english muffins out of toaster place eggs on muffins pour coffee into mug  Pseudocode for Babylonian square root a:\n Start with a / 2 this is g then find average of g and a / g  this is your newg newg) / 2` repeat until 2 consequtive guesses are “close enough”   display newg  The rules of quality software #   Quality software works  It correctly incorporates its specification   Quality software can be read and understood  good variable names commented code clear code not clever code indentation   Quality software is easy to modify   Aug 29, 2018 #  Program to calculate the area of a rectangle area = length * width\npseudocode:\n get length from user get width from user area = length * width print area  import javax.swing.JOptionPane; public class RectangleArea { public static void main(String[] args) { double length; double width; double area; length); width); area = length * width; System.out.println(\u0026#34;Area is \u0026#34; + area); }//end main }//end class JOptionPane makes the user input much more user-friendly by using pop-up dialog boxes. The showInputDialog is expecting a string, but the length variable is expecting a double. So the Double.parseDouble takes the string of numbers and turn it into a double.\nClasses contain:\n Fields Constructor General Methods (behaviors)   Sep 5, 2018 #  Data Types in Java #  Integers:\n   Integers Bits Range     byte 8 -128 \u0026gt; 127   short 16 -32,768 \u0026gt; 32,767   int 32 ~± 2 billion   long 64 ~± 9.2e18 (really big)    //Example byte myByte; myByte = 23; //This is legal myByte) short myShort = 0; //Legal myShort = -100000; //Illegal, out of range  int myInt = 100; long myLong; Twos complement:\n $2 ^ {(bits - 1)} - 1 = max$\n$-2 ^ {(bits - 1)} = min$\n For example in 8 bits:\n $2^{(8 - 1)} - 1)$\n$-2^{(8 - 1)})$\n (The reason you minus one from the max is to compensate for zero)\nTo go from positive to negative (for example in a byte) invert the bits and add 1\nFor example with the decimal number 5:\n $0101 = 5_{10}$\n$1010 + 1 = 1011 = -5_{10}$\n Floating point types:\n   Floats Bits Range Accuracy     float 32 ~± 2 billion ~7 decimal digit accuracy   double 64 ~± 9.2e18 (really big) ~15 decimal digit accuracy    //Examples byte myByte = 97; int myInt = 5; myInt = myByte; //This is legal, they are both integers and it will fit in the int type myBye) float myFloat = 3004.215; int myInt = 315; double myDouble = 297.8; myDouble) myFloat = myInt; //Legal myInt) myFloat = myDouble; //Illegal, 64 bits cannot fit in 32 bits Other types:\n   Other data types Bits Info     char 16 Unicode character set   boolean 1 true or false    Example:\n ‘A’ = 65 = 0x0041\n‘B’ = 66 = 0x0042\n‘C’ = 67 = 0x0043\n‘0’ = 48 = 0x0030\n‘1’ = 49 = 0x0031\n //Example char myChar = \u0026#39;A\u0026#39;; //Use single quotes to assign a char System.out.println(myChar); //Example boolean myBool = true; //Can only be true or false Strings:\nString is a class, not an intrinsic data types. This makes them less limited than the built-in data types.\n//Example public class StringFun { public static void main(String[] args) { String name = \u0026#34;Dave\u0026#34;; String notHere = \u0026#34;\u0026#39;s not here man\u0026#34;; String both = name + notHere; //Concatenation of both strings  System.out.println(both); } } Prints ​Dave’s not here man​\nStrings are just concatenated chars from an array.\n Sep 10, 2018 #  Cat class #     Fields Type     name String   weight double   color String   age int       Methods Return     meow() void   sleep() void   scratch() void   eat() void   birthday() void    public class Cat { //Fields  private String name; private double weight; private String color; private int age; //Constructors  public Cat() { name = \u0026#34;Cat\u0026#34;; weight = 8; color = \u0026#34;Black\u0026#34;; age = 5; }//end default constructor, used to make it easy for testing  public Cat (String n, double w, String c, int a) { name = n; weight = w; color = c; age = a; }//end constructor  //Accessors, let us access a field  public String getName() {return name;} public double getWeight() {return weight;} //Mutators, let us change a field  public void setName(String nn) {name = nn;} public void setWeight(double nw) {weight = nw;} //General methods  public void meow() { System.out.println(name + \u0026#34; is meowing\u0026#34;); } public void hairball() { System.out.println(name + \u0026#34; is making a hairball\u0026#34;); } }//end Cat class In another file to test this:\npublic class CatTest { public static void main(String[] args) { //Reference variable  Cat cat1); //Calling methods  cat1.meow(); cat1.hairball(); //Using an accessor  System.out.println( cat1.getName() ); //Using a mutator  System.out.println(\u0026#34;Current weight: \u0026#34; + cat1.getWeight() ); //seeing current weight  cat1.setWeight(13.2); //new weight  System.out.println(\u0026#34;New weight: \u0026#34; + cat1.getWeight() ); //seeing new weight  } }  Sep 12, 2018 #  Lab 1: Aircraft Class #  Create a Java class the encapsulates the concept of a small aircraft.\nYour class should have the following fields:\n   Type Field Name Description     String manufacturer Name of aircraft manufacturer, e.g., Cessna   String model Model number of the aircraft, e.g., 172   double mtow Maximum takeoff weight in pounds   double emptyWeight Empty weight in pounds.   double fuelBurnRate Fuel burn rate in gallons/hour    Accessors and mutators for each field, except fuelBurnRate.\nYour class should override the toString() method and return a string with manufacturer and model number.\nYour class should have general methods as follows:    Visibility Return Method name Comment     public double usefulLoad() // returns the maximum takeoff weight minus the empty weight.   public double fuelWeight(double gallons) // returns the weight of gallons of fuel. Aviation fuel (100LL) weighs 6 lbs. per gallon.   public double fueledWeightMargin (double hours) // remaining weight margin    Write a main method that instantiates an airplane and tests the various methods.\nEmployee Class #     Variables Type     name String   salary double       Methods Return     raiseSalary(double) void    public class Employee { private String name; private double salary; public Employee (String n, double s) { name = n; salary = s; } public void raiseSalary(double p) { salary *= p + 1; } }  Sep 17, 2018 #  Making use of the graphics frame:\nGraphicsFrame.java and Drawable.java are available on canvas. Use these files but do not modify them.\nChicken class #     Variables Type     name String   weight double       Methods Return     crow() void   peck() void   draw() void    This will use the Chicken class, GraphicsFrame class, Drawable class, and a MakeChicken class (which will contain our main). These must all be in the same folder.\nUsing the GraphicsFrame\n Create the base class ( the class you want to draw ) Put the GraphicsFrame.java and Drawable.java into the same folder  drawString() prints to the graphics window. println() only prints to the console. implements keyword after a class refers to an interface class. This is basically a promise to put the method that the class is implementing in your code. This is referring to the draw() method. This is needed in the Chicken class. The chicken class with the draw() method cannot draw itself, but can be used to draw. Use setColor() and getColor() to change the color back to the default after its drawn so the default color isn\u0026rsquo;t changed for future draws.\n Sep 19, 2018 #  Everything inherits from Object.java. The class Object.java has a method called toString() which returns the address of where the object lives in memory. This method is called on default if you were to call an object on its own, i.e. System.out.println(a1); is the same as calling System.out.println(a1.toString);. To override toString() you could put in your own aircraft class public String toString() {return manufacturer + \u0026quot; \u0026quot; + model;} for example. The toString() method should return something descriptive about the object, in the case of our Aircraft class, it returns the manufacturer and model of the aircraft object.\nDonut class #     Variables Type     type String   shape char   x coordinate int   y coordinate int   color Color    import java.awt.Color; import java.awt.Graphics; public class Donut implements Drawable { private String type; private char shape; //C for circular, R for rectangle  private Color color; private int x,y; public Donut() { type = \u0026#34;Glazed\u0026#34;; shape = \u0026#39;C\u0026#39;; color = Color.YELLOW; x = y = 400; } public Donut(String t, char s, Color c, int px, int py) { type = t; shape = s; color = c; x = px; y = py; } public void draw(Graphics g) { //Draw code goes here  } }  Sep 24, 2018 #  Lab 2: BAC Calculation #     Fields Data type     name String   weight, in kg double   gender, M or F char   standard drinks (SD) double   drinking period (DP) double       Local constants Data type     body water (BW, 0.58 for male, 0.49 for female, constants) double   metabolism rate (MR, 0.015 for male, 0.017 for female, constants) double    public class EstimatedBloodAlcoholContent { private String name; private double weight; //kg  private char gender; //M or F  private double SD; //Standard drinks: 10 grams of ethanol per drink  private double DP; //Drinking hours  public EstimatedBloodAlcoholContent() { name = \u0026#34;Jane Doe\u0026#34;; weight = 70; gender = \u0026#39;F\u0026#39;; SD = 2.5; DP = 2; } //Full constructor goes here  //Accessors  public String getName() {return name;} public double ebac() { double BW = 0; double MR = 0; if (gender) { BW = 0.49; MR = 0.017; } else //gender == \u0026#39;M\u0026#39;  { BW = 0.58; MR = 0.015; } return (0.806 * SD * 1.2) / (BW * weight) - (MR * DP); }//end ebac  public String toString() { return name + \u0026#34;, \u0026#34; + gender; } public static void main (String[] args) { EstimatedBloodAlcoholContent pf); System.out.println(pf.getName() + \u0026#34;: \u0026#34; + pf.ebac()); } }//end class toString() should return something that is \u0026ldquo;representative of the object\u0026rdquo;, and should always be overriden.\n Oct 1, 2018 #   Ch. 4 Quiz [2018-10-08] Midterm is on 17th of Oct, covers Ch. 1 - 5.2 (only if and if..else from Ch. 5) [2018-10-17] Make midterm notes (Allowed one 8.5 x 11 sheet of paper) [2018-10-17]  Decision statements #  Control Statement review:\n Simple Sequence  Blocks are executed sequentially   Decision statements  if, if..else, switch   Iterate (repeat/loop)  if (and if..else):\nif (boolean_expression) { //Code block goes here } If the boolean_expression is true, then the code block gets executed, if false the block is skipped and the flow of the program continues normally.\nBoolean expressions are formed with relational operators:\n   Symbol Meaning Example Notes     == Is equal to a == 5 Works with fundamental data types, but be careful with floating point types   != Is not equal b != a    \u0026gt; Greater than 5 \u0026gt; 4 true   \u0026lt; Less than 10 \u0026lt; 15 false   \u0026gt;= Greater than or equal a \u0026gt;= value    \u0026lt;= Less than or equal a \u0026lt;= c + 5 Arithmetic is allowed    Example:\nif (value \u0026gt;= 21) { //Code } A simple program to check drinking age:\nif (age \u0026gt;= 21) { System.out.println(\u0026#34;Come on in and kill some brain cells\u0026#34;); } else { System.out.println(\u0026#34;Go home punk); } More complicated (waterfall type if):\nif (age \u0026lt; 21) { System.out.println(\u0026#34;No beer for you\u0026#34;); } else if (age \u0026lt;= 29) { System.out.println(\u0026#34;Come on in and spend your limited money killing braincells\u0026#34;); } else if (age \u0026lt;) { System.out.println(\u0026#34;Come in and spends lots and lots of money\u0026#34;); } else if (age \u0026lt;= 49) { System.out.println(\u0026#34;You\u0026#39;re a bit old but we want your money\u0026#34;); } else //over 49 { System.out.println(\u0026#34;Get back in your Impala and listen to your 8-track\u0026#34;); }  Oct 3, 2018 #  Side read: Physics for Game Programmers by Grant Palmer\nLift and drag calculation #  Lift and drag for a rectangle wing:\n $lift = \\frac{1}{2}ρv^2clA$\n$drag = \\frac{1}{2}ρv^2cdA$\n    Type Name Variable Description     final double rho ρ (rho) Density of air at STP (standard temp and pressure). Looking at sea level air density ($1.225 kg/m^3$)   double v velocity Velocity in meters per second (will need to be converted to knots)   double cl lift coeffecient Dimensionless   double cd drag coeffecient Dimensionless   double b wing span In meters   double c wing chord In meters    public class Wing { private final double rho = 1.225; //kg/m^3  private double v; //meters per second  private double cl; //dimensionless coeffecient of lift  private double cd; //dimensionless drag  private double b; //span in meters  private double c; //chord in meters  public Wing() { v) cl = 0.4; //coeffecient of lift  cd = 0.08;//drag  b = 9.25; //meters  c = 1.25; //chord  } public Wing(double pv, double pcl, double pcd, double pb, double pc) { v = pv; cl = pcl; cd = pcd; b = pb; c = pc; } //Accessors for all fields  //Mutators for b and c  public double lift() { return 1.0/2 * rho * v * v * cl * area(); } public double liftkg() { return lift() / 9.81; } public double area() { return b * c; } public static void main(String[] args) { Wing cruiseWing); System.out.println(\u0026#34;Area: \u0026#34; + cruiseWing.area() + \u0026#34; square meters\u0026#34;); System.out.println(\u0026#34;Lift: \u0026#34; + cruiseWing.lift() + \u0026#34; N\u0026#34;); System.out.println(\u0026#34;Lift: \u0026#34; + cruiseWing.lift() + \u0026#34; kg\u0026#34;); Wing stallWing); System.out.println(\u0026#34;Area: \u0026#34; + stallWing.area() + \u0026#34; square meters\u0026#34;); System.out.println(\u0026#34;Lift: \u0026#34; + stallWing.lift() + \u0026#34; N\u0026#34;); System.out.println(\u0026#34;Lift: \u0026#34; + stallWing.lift() + \u0026#34; kg\u0026#34;); } }//end Wing The lift() method must use a floating point number in the calculation of 1/2 otherwise with integer math it equals 0. By putting at least one decimal in the calculation (1.0/2) it forces Java to use floating point math. Also handling the $v^2$ is as easy as multiplying it by itself, however for higher powers Math.pow(v, 2) would be a better option. For example $v^5$: Math.pow(v, 5)\n Oct 8, 2018 #  Variables are declared inside a method, and fields are global to a class. Fields ultimately become a variable when an instance of an object is created.\nif..else worksheet #  public class ifElse1 { public static void main(String[] args) { int a = 100; int b = 50; System.out.println(\u0026#34;a); System.out.println(\u0026#34;a != b: \u0026#34; + (a != b)); System.out.println(\u0026#34;a \u0026gt; b: \u0026#34; + (a \u0026gt; b)); System.out.println(\u0026#34;a \u0026lt; b: \u0026#34; + (a \u0026lt; b)); System.out.println(\u0026#34;a \u0026gt;= b: \u0026#34; + (a \u0026gt;= b)); System.out.println(\u0026#34;a \u0026lt;= b: \u0026#34; + (a \u0026lt;= b)); } } Tip worksheet #  pseudo:\n get check amount get satisfaction level from customer based on satisfaction level  calculate tip   display amount, tip, satisfaction level  import javax.swing.JOptionPane; public class ifElse2 { public static void main(String[] args) { double amount; double tip = 0; int satisfactionLevel; String sasLevel; amount); satisfactionLevel); if (satisfactionLevel) { tip = amount * 0.20; sasLevel = \u0026#34;Very satisfied\u0026#34;; } else if (satisfactionLevel) { tip = amount * 0.15; sasLevel = \u0026#34;Satisfied\u0026#34;; } else if (satisfactionLevel) { tip = amount * 0.10; sasLevel = \u0026#34;Somewhat satisfied\u0026#34;; } else { tip = 0; sasLevel = \u0026#34;Not satisfied\u0026#34;; } System.out.println(\u0026#34;Check amount: \u0026#34; + check); System.out.println(\u0026#34;Tip: \u0026#34; + tip); System.out.println(sasLevel); } } JOptionPane doesn\u0026rsquo;t need to be instantiated as an object, because all the methods are static inside the class.\nswitch statement #  switch(exp) { case 1: //Code for case 1  break; case 2: //Code for case 2  break; case 3: //Code for case 3  break; default: //Default case code (runs if no other case is met)  break; } exp must be a integer or a String expression. switch statements only work for exact matches, not greater or less expressions. The code in each case must end with a break otherwise the other cases will execute also. The code in each statement can have curly braces around it but it doesn\u0026rsquo;t need them.\nswitch (satisfactionLevel) { case 2: tip = amount * 0.15; sasLevel = \u0026#34;Satisfied\u0026#34;; break; case 1: tip = amount * 0.20; sasLevel = \u0026#34;Very satisfied\u0026#34;; break; case 3: tip = amount * 0.10; sasLevel = \u0026#34;Somewhat satisfied\u0026#34;; break; default: tip = 0; sasLevel = \u0026#34;You suck!\u0026#34;; break; }  Oct 10, 2018 #  More if..else: #  pseudo\n get float from user check  is zero is pos is neg   print corresponding messages also check  if number is less than 1 if number is more then 1000000    import java.util.Scanner; public class ifelse0 { public static void main(String[] args) { Scanner kb); double input; System.out.print(\u0026#34;Enter a number: \u0026#34;); input); if (input \u0026gt; 0) { System.out.println(\u0026#34;The number is positive\u0026#34;); } else if (input) { System.out.printlnt(\u0026#34;The number is zero\u0026#34;); } else //input \u0026lt; 0  { System.out.printlnt(\u0026#34;The number is negative\u0026#34;); } if (Math.abs(input) \u0026lt; 1) { System.out.println(\u0026#34;The number is small\u0026#34;); } else if (input \u0026gt; 1000000) { System.out.println(\u0026#34;The number is large\u0026#34;); } } } Escape velocity #  The average person can jump off the ground with a velocity of 3.13 m/s (about 7mph) without fear of leaving the planet. However, if an astronomer jumps with this velocity while standing on Halley\u0026rsquo;s Comet, will the astronaut ever come back down? Create a Java test program that allows the user to input a launch velocity (m/s) from the surface of a small body and determine whether the jumper will return to the surface.\n $v_{escape} = \\sqrt{ 2 \\frac{GM}{R} }$\n$G)\n$M)\n$R)\n public class Escape { public static void main(String[] args) { final double G = 6.67E-11; double M = 2.2E14; //mass in kg  double R = 5500; //radius in m  double vEscape; vEscape); System.out.printlnt(\u0026#34;Escape Velocity: \u0026#34; + vEscape); if (vEscape \u0026lt; 3.13) { System.out.printlnt(\u0026#34;You are leaving Halley\u0026#39;s comet\u0026#34;); } else { System.out.printlnt(\u0026#34;You are staying on Halley\u0026#39;s comet\u0026#34;); } } } Scientific notation can be entered in using the E for exponent. (6.67E-11 is the same as writing $6.67 * 10^{-11}$)\nLab 3: Robot #  See Labs/L3Robot/RobotClass.pdf\n Oct 15, 2018 #  String class #  Strings are objects, that hold values about the string. Some of the fields include the length of the string. Strings also have methods because they are objects. length() returns the length of the string. Strings are immutable, if a method returns a string it is technically a new string.\nimport javax.swing.JOptionPane; public class StringTest { public static void main(String[] args) { String s1 = \u0026#34;Hello, world!\u0026#34;; String s2; int i = 4; s2); System.out.println(s1); System.out.println(s1.length()); //prints length  System.out.println(s1.toUpperCase()); //prints string in upper case  System.out.println(s1.charAt(i)); //prints the char at the speicified index (declared above)  System.out.println(s1.charAt(s1.length() - 1)); //prints the last char  System.out.println(s1.endsWith(\u0026#34;world!\u0026#34;)); //prints boolean if the suffix is found  System.out.println(s2); System.out.println(s1.equals(s2)); System.out.println(s1.equalsIgnoreCase(s2)); } } When calling the toUpperCase() method, the string is changed to a different string, but the original s1 is unaffected. charAt(int i) is a method that returns the char at the specified index (starting at 0). Strings are immutable (not mutatable). endsWith(String suffix) returns a boolean if the suffix is at the end of the string checked. equals() returns a boolean if the strings are equal, equalsIgnoreCase() returns a boolean without looking at the case sensitivity.\nString s1 = \u0026#34;Hello\u0026#34;; String s2 = \u0026#34;Hello\u0026#34;; System.out.println(s1); This prints true, because the way Java allocates memory, technically speaking, since the 2 strings are of identical contents, Java points s1 and s2 at the same object in memory. If the object is then changed later it creates another object to store the changed string.\n Oct 22, 2018 #  while loops #   Review:\nThree control structores\n Sequence Branching Iteration (loops)   while loops are used to make iteration that is event-based, meaning it usually means the loop must run an unknown amount of times. (Contrasted with the for loop, where you know the amount of times the loop must run)\nwhile(boolean_expression) { /* Code to be executed while boolean_expression is true When the body of the loop is finished, the boolean_expression is checked again If boolean_expression is false the body is skipped */ } (You can break out of the loop at any point, however this is considered to be poor programming.)\npublic class WhileThing { public static void main(String[] args) { int count = 1; while(count \u0026lt;= 10) { System.out.print(count + \u0026#34; \u0026#34;); count++; } } } Prints:\n 1 2 3 4 5 6 7 8 9 10\n More examples:\npublic class StringSlicer { public static void main(String[] args) { int i = 0; String myString = \u0026#34;Stuff in the String.\u0026#34;; while (i \u0026lt; myString.length()) { System.out.println(myString.charAt(i)); i++; } } } StringSlicer prints a string vertically\npublic class OnesAndZeros { public static void main(String[] args) { int i = 0; int onesCount = 0; int zerosCount = 0; int otherCount = 0; String myString = \u0026#34;1110101xx00\u0026#34;; while (i \u0026lt; myString.length()) { switch (myString.charAt(i)) { case \u0026#39;1\u0026#39;: onesCount++; break; case \u0026#39;0\u0026#39;: zerosCount++; break; default: otherCount++; break; } i++; } System.out.println(\u0026#34;onesCount); System.out.println(\u0026#34;zerosCount); System.out.println(\u0026#34;otherCount); } } Prints:\n onesCount = 5\nzerosCount = 4\notherCount = 2\n OnesAndZeros counts the amount of 1s and 0s in a string. It also counts any other char under the otherCount variable.\n Oct 24, 2018 #  for loop #  for (initialize counter; boolean_expression; increment counter) { //code to be executed in loop } All looping can be done with a while loop, however, the for loop makes it conveinent to see all the pieces of the loop. for loops are used for counted loops, not necessarily event-based loops. The initialization of the counter doesn\u0026rsquo;t need to be inside the parameters of the for loop, however you want to try to limit the scope of variables as much as possible, so unless you need that variable after the loop, keep the initialization inside the parameters.\nExample:\npublic class Loopy { public static void main(String[] args) { for (int i) { System.out.print(i + \u0026#34; \u0026#34;); } } } Prints:\n 1 2 3 4 5 6 7 8 9 10\n The initialization of the counter only happens as you enter the loop for the first pass. The boolean_expression happens everytime you get to the top of the loop. The increment happens at the bottom of the loop. In this example, the scope of i is only inside the loop.\nMore examples:\npublic class ValidEmail { public static void main(String[] args) { String email = \u0026#34;myEmail@somePlace.com\u0026#34;; int atCount = 0; //for this excercise valid emails have only one @ symbol  int dotCount = 0; //and only one . symbol  for (int i) { if (email.charAt(i)) { atCount++; } if (email.charAt(i)) { dotCount++; } } if (atCount) { System.out.println(\u0026#34;This is a valid email\u0026#34;); } else { System.out.println(\u0026#34;This is not a valid email\u0026#34;); System.out.println(email); } } } public class FirstAt { public static void main(String[] args) { String email = \u0026#34;myEmail@somePlace.com\u0026#34;; int i = 0; while (i \u0026lt; email.length() \u0026amp;\u0026amp; email.charAt(i) != \u0026#39;@\u0026#39;) { i++; } if (i \u0026lt; email.length()) { System.out.println(\u0026#34;@ symbol is at index: \u0026#34; + i); } else { System.out.println(\u0026#34;No @ symbol\u0026#34;); } } } Order the boolean_expression properly, so you must put the increment before the check of the array because otherwise it will check an out of bounds index before checking the increment.\n Oct 29, 2018 #  Arrays #  An array is nothing more then a list. Arrays are homogenous, meaning all the elements of an array is of the same data type. Indecies in arrays start at 0.\nint[] grades = new int[8]; //must specify the size of the array  grades[0] = 92; //to set an individual element grades[1] = 85; grades is the name of the integer array list with 8 cells. This also loads each cell with 0s. The size of the array must be a positive integer. 92 will be at the first cell (index 0) of the array. grades[0] reads as \u0026ldquo;grades sub zero\u0026rdquo;.\nfor (int i) { System.out.println(grades[i]); } length doesn\u0026rsquo;t need parenthesis after it because it is a value in the array object, not a method.\nint total = 0; for (int i) { total = total + grades[i]; } int average = total / grades.length; total is being used as an accumlator for the sum of the array\u0026rsquo;s elements. You can then divide total by grades.length to get the average.\npublic class ArrayTest { public static void main(String[] args) { int[] myArray = new int[8]; for (int i) { System.out.println(\u0026#34;Index: \u0026#34; + i + \u0026#34; is \u0026#34; + myArray[i]); } } } An array can be automatically initialized using this syntax:\nint[] myArray = {92, 85, 64, 23, 32, 28, 34, 85}; Java will automatically make the array size based on how many elements are in the first list.\nTo fill an array with random data:\nimport java.util.Random; public class RandomArray { public static void main(String[] args) { Random rangen); int[] randomArray = new int[100]; for (int i) { randomArray[i]); } } } nextInt() will return a random integer inside the limits of an integer. The parameter inside nextInt is the upper limit exclusive of the number you want to generate. nextInt(100) would make random numbers between 0 and 99.\n Oct 31, 2018 #  Sorting and searching arrays #  Bubble swap compares 2 elements and swaps them if the first element is bigger. The loop continues until each element has been swapped.\nArray declaration review:\nString[] myArray = new String[5]; //makes an array of strings with 5 cells  myArray[0]) Code to write a bubble sort:\npublic class BubbleSort { public static void printArray(int[] a) { for (int i) { System.out.print(a[i] + \u0026#34;, \u0026#34;); } System.out.println(\u0026#34;-----\u0026#34;); } public static void main(String[] args) { int[] n = {94, 28, 67, 125, 8}; for (int outer) { for (int i) { if (n[i] \u0026gt; n[i + 1]) { int temp = n[i]; n[i] = n[i + 1]; n[i + 1] = temp; } } } printArray(n); } } import java.util.Random; public class AnotherSort { public static void main(String[] args) { Random rangen); int[] n = new int[1000]; for (int i) { n[i]); } } } A better way to sort is to use java.util.Arrays, in this class there is a sort() method that is the fastest sort available to us. Using a bubble sort is slow, but it works. Sorting an array of 1 million cells with a bubble sort takes around 30 min, whereas sort() in the arrays class can do 100 million in a second or so, maxing out the heap at 1 billion.\n Nov 14, 2018 #  Stacks #  Infix expression: $20 + 4 * 2$\nPostfix expression (RPN): 20 4 2 * +\nThe computer doesn\u0026rsquo;t know the order of operations, so while the computer is chugging along reading things it doesn\u0026rsquo;t know what to do first. By putting the operands at the end, the computer can correctly do the evaluation.\nPost fix rules:\n If the token is a number  push to the stack   If the token is an operator  Pop the stack twice Then apply the operator. Drop on top    Infix: (3 + 2) * 4\nRPN: 3 2 + 4 *\nPseudo:\npush(int e)\n If stack is not full  increment stack pointer stack[sp] = e    int pop()\n temp = stk[sp] decrement stack return temp  boolean isEmpty()\n return sp == -1  boolean isFull()\n return stack.length - 1 == sp   Nov 26, 2018 #  ANYCUBIC Photon\nThe New New Thing (Book about netscape)\nJava Swing (GUI) #  GUI\u0026rsquo;s are built from 2 different ideas, the view (GUI) and the model (code). A third piece called the controller ties these 2 pieces together. This entire idea is called a software pattern. (Model-view-controller paradigm, MVC).\nimport javax.swing.*; import java.awt.*; //abstract window toolkit import java.awt.event.*; //action listener  public class FirstWindow extends JFrame implements ActionListener { private JLabel myLabel; private JButton myButton; public FirstWindow() { setLayout(new FlowLayout()); //sets layout  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //  setSize(400, 200); //width and heigth in pixels  //Controls  myLabel); add(myLabel); myButton); add(myButton); myButton.addActionListener(this); //tells constructor that action listener is in this code  setVisible(true); //boolean that renders window  } public void actionPerformed(ActionEvent ae) { myLabel.setText(\u0026#34;You pressed the button\u0026#34;); } public static void main(String[] args) { FirstWindow fw); } } Inheret from JFrame. extends keyword inherts from the class after. setLayout() determines what layout manager you want to use to make the window. The next thing needed is the close operation, in this case we want to exit on close so there isn\u0026rsquo;t memory leak. JLabel makes text in the window.\n Nov 28, 2018 #  Feet to meters GUI #  Model:\npublic class Conversions { private final double FEET_TO_METERS_CONVERSION = 0.3048; private double n; //number  public Conversions(double valueToConvert) { n = valueToConvert; } public double feetToMeters() { return n * FEET_TO_METERS_CONVERSION; } public static void main(String[] args) { Conversions c); System.out.println(c.feetToMeters()); } } View:\nimport javax.swing.*; import java.awt.*; import java.awt.event.*; public class FeetToMetersView extends JFrame implements ActionListener { private JTextField tfFeet; private JLabel lblMeters; private JButton bConvert; public FeetToMetersView() { //Setup  setLayout(new GridLayout(3, 2, 5, 5)); //rows, columns, 5 pixels padding inbetween boxes  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(250,125); //Controls  add(new JLabel(\u0026#34;Feet:\u0026#34;, JLabel.RIGHT)); tfFeet); add(tfFeet); add(new JLabel(\u0026#34;Meters:\u0026#34;, JLabel.RIGHT)); lblMeters); lblMeters.setBorder(BorderFactory.createLineBorder(Color.BLACK)); add(lblMeters); bConvert); add(bConvert); bConvert.addActionListener(this); setVisible(true); } public void actionPerformed(ActionEvent ae) { double feet); Conversions conv); double meters); lblMeters.setText(Double.toString(meters)); } public static void main(String[] args) { FeetToMetersView ftmv); } }  Dec 3, 2018 #  Review #  Declaring an array field:\nprivate double[] nums; nums = new double[20]; Most missed questions on exam:\n 41/2 (ints)  = 20   the last character index position in a String variable naemd address is address.length()  false    "}),a.add({id:21,href:'/notes/CS13/CS13-lecture-notes/',title:"CS13-lecture-notes",section:"CS13",content:"CS 13 Lecture Notes #  Jan 28, 2019 #   Download BlueJ [2019-01-29]  Weather class #  public class Weather { private double highTemp; private double lowTemp; private String condition; private int rainChain; public Weather (double h, double l, String c, int r) { highTemp = h; lowTemp = l; condition = c; rainChain = r; } public double delta() { return highTemp - lowTemp; } public String toString() { return \u0026#34;High: \u0026#34; + highTemp + \u0026#34;, Low: \u0026#34; + lowTemp + \u0026#34;, Condition: \u0026#34; + condition + \u0026#34;, Chance of rain: \u0026#34; + rainChance; } } Using this class we can make another to populate a forecast\npublic class Forecast { private Weather days[]; private int nextDay; public Forecast() { days = new Weather[4]; nextDay = 0; } public void addDay(double h, double l, String c, int r) { Weather w); days[nextDay] = w; nextDay++; } public void display() { for (int i) { System.out.println(days[i]); } } }  Jan 30, 2019 #  Constructors #  Purpose of the constructor: Initialize variables, and do any other work necessary to get the object usable. The new keyboard actually makes the object, not the constructor.\nWeather w); The new keyboard happens first, which allocates memory for the object. Then the constructor is called and the object is filled with the parameters. Then finally the address set aside by new is set to the w variable.\nWeather x = w; x will contain the same address that w contains.\nForecast f = new Forecast(); f points at the address of a new Forecast object, which has another pointer to an array filled with nulls.\nf.addDay(60, 40, \u0026#34;Cloudy\u0026#34;, 10); This creates a weather object that then gets filled with the parameters from the constructor. The address that is inside the w object is then copied to the first slot in the array. The w object then dies when it leaves the scope of the method.\nAbout this class #  First half:\n Builds upon CS12 (variables, loops, conditionals, objects, classes) Starts to look at more complicated data structures  Second half:\n Larger projects Team work, collaboration Version control Communication tools  Arrays #  int[] a = new int[10]; is valid\nint b[10]; is not valid in Java\na[5] = 6; is valid because they are both array.\na[6] = \u0026quot;Hello\u0026quot;; is not valid because it is a type mismatch.\na[a[5]] = 8; is valid, a[5] evaluates to an integer, so it puts 8 into a[6]. Whatever is inside the square brackets must evaluate to an integer.\nLimitations:\n Can\u0026rsquo;t change the size of an array once declared. Can\u0026rsquo;t access out of bounds Can\u0026rsquo;t delete an element Can\u0026rsquo;t search for an element Can\u0026rsquo;t sort them   Feb 4, 2019 #  Why do classes/objects exist?\n A class lets us group related data together Attach code (methods) to the data Structurally encapsulate things to organize larger projects  The purpose of a class is to package data together and provide methods to manipulate the data.\nFor example in a class called Player for the super mario bros game: Data\n size color speed x y isSolid score lives  Actions (methods)\n run jump fall duck die slideDown goToNextLevel shoot spawn pause  Expanding arrays #  String[] arr)];\npublic class ElastArray { private String arr[]; int size; public ElastArray() { arr = new String[5]; size = 0; } public void add(String s) { if (size) //array full  { String[] arr2)]; //create expanded array  for (int i) //copy old values  { arr2[i] = arr[i]; } arr = arr2; //point old array to new  arr[size] = s; //add string  size++; } else { arr[size] = s; //add string  size++; } } }  Feb 6, 2019 #  More methods for our MetaArray class #  /** * Clear out entire array */ public void clear() { } /** * Delete an element from the array, reducing its size */ public void remove(int index) { } /** * Replace the element at index with new string */ public void set(int index, String s) { } /** * Return the element at a given index */ public String get(int index) { } /** * Insert a new element into array */ public void insert(int index, String s) { } /** * Return how many items in the array */ public int size() { } /** * Search the array for the target. Return the index * of the first occurrence. */ public int indexOf(String target) { } /** * Returns true if the array contains the string */ public boolean contains(String target) { } Insert method\n Should insert object into the index, and shift everything else down. How to:  Must start at the right and shift things down while greater then the index.    Exception: A catastrophic error occurred. Causes program to terminate. Goes \u0026ldquo;around' the normal return channel. When exceptions are generated, they are thrown. The caller will catch it.\n Feb 11, 2019 #  Generic data types #  To specify a data type that can be a variable, you can use angle brackets after the class name.\npublic class Box\u0026lt;T\u0026gt; { T x; public Box() { x = null; } public Box(T o) { x = o; } public void set(T value) {x = value;} public T get() {return x;} } The \u0026lt;T\u0026gt; after the class name makes the actual data type that a Box object is made of a variable. That way you can make a Box that holds any data type, but only that data type.\nWhen creating the object, you must specify the data type in angle brackets:\nBox\u0026lt;String\u0026gt; b);  Feb 13, 2019 #  \u0026ldquo;Evens\u0026rdquo; game #  public class Evens { private int pile, p1, p2; private String p1name, p2name; private int turn; public Evens(String p1n, String p2n) { p1name = p1n; p2name = p2n; pile = 15; p1 = p2 = 0; turn = 0; } public void take(int a) { if (a \u0026gt; pile || a \u0026gt; 3 || a \u0026lt; 0 || isGameOver()) { throw new IllegalMoveException(); } if (turn % 2) //player 1s turn  { p1 = p1 + a; } else { p2 = p2 + a; } pile = pile - a; turn++; } public boolean isGameOver() { return (pile); } public String whoWon() { if (p1 % 2) { return p1name; } else { return p2name; } } public String toString() { return \u0026#34;Pile: \u0026#34; + pile + \u0026#34;, \u0026#34;+ p1name + \u0026#34;:\u0026#34; + p1 + \u0026#34;, \u0026#34; + p2name + \u0026#34;:\u0026#34; + p2; } } The point of the game is to have an even number of chips left. This can be tested using a test code file and JUnit\nimport static org.junit.Assert.*; import org.junit.After; import org.junit.Before; import org.junit.Test; /** * Test class EvensTest. */ public class EvensTest { @Test public void testGame() { Evens e); assertEquals(\u0026#34;Pile: 15, A:0, B:0\u0026#34;, e.toString()); e.take(3); assertEquals(\u0026#34;Pile: 12, A:3, B:0\u0026#34;, e.toString()); e.take(2); assertEquals(\u0026#34;Pile: 10, A:3, B:2\u0026#34;, e.toString()); e.take(1); assertEquals(\u0026#34;Pile: 9, A:4, B:2\u0026#34;, e.toString()); assertEquals(false, e.isGameOver()); e.take(3); e.take(3); e.take(3); assertEquals(true, e.isGameOver()); assertEquals(\u0026#34;B\u0026#34;, e.whoWon()); } @Test (expected) public void testEvil() { Evens e); e.take(4); } @Test (expected) public void testEvil2() { Evens e); e.take(-1); } @Test (expected) public void testEvil3() { Evens e); e.take(3); e.take(3); e.take(3); e.take(3); e.take(3); e.take(3); } } The @Test annotation right before the method header is called an annotation. This is how you \u0026ldquo;tag\u0026rdquo; methods to be tested. (expected) to make sure its playing properly.\nModel-View-Controller\n Model is the math underlying the program View is how it appears on the screen Controller is how you interact with the two  Test-Driven-Development\n Writing code to pass the tests and writing tests to break the code.  Refactoring\n Making changes to the code without changing its behavior.   Feb 20, 2019 #  Linked lists #  Analogy: A train. Each car can only hold one thing and each car is hooked up to the one following it. Each train car is called a node.\npublic class Node { Object item; Node next; } This is a self-referential class. Each node will hold both the item you want it to contain and the address of the next node. Also note that everything in this class is public.\nNode a); a.item = \u0026#34;Alpha\u0026#34;; Node b); b.item = \u0026#34;Beta\u0026#34;; //Hook together a.next = b; Node c); c.item = \u0026#34;Gamma\u0026#34;; b.next = c; a.next.next.item //shows item in c Attaching things to the end of the \u0026lsquo;train\u0026rsquo; gets longer and longer. If you hook things to the front of the linked list it will be faster.\nNode n); n.item = \u0026#34;Alpha\u0026#34;; Node m); m.item \u0026#34;Beta\u0026#34;; m.next = n; Node t); t.item = \u0026#34;Gamma\u0026#34;; t.next = m; You can reuse the variables. This means you\u0026rsquo;re essentially adding a car to the front of the train and calling that the new first car.\nNode n); n.item = \u0026#34;Alpha\u0026#34;; Node p); p.item = \u0026#34;Beta\u0026#34;; p.next = n; n = p; In a new class:\npublic class LList { Node first; public LList() { first = null; } public void addFirst(Object o) { Node p); //new node with object  p.item = o; p.next = first; //make new node point at first  first = p; //make p new first  } public int size() { if (first) { return 0; } Node temp = first; //not creating a new object, just pointing  int count = 1; while (temp.next != null) { count++; temp = temp.next; } return count; } }  Feb 25, 2019 #  LList continued #  Get To get contents of a Node, you must use a loop and \u0026ldquo;hop\u0026rdquo; along each car until you get to where you want to be.\nThe \u0026ldquo;locomotive\u0026rdquo; in the train can keep track of both first and last which can make adding things to the end of the train a lot faster as it becomes bigger.\npublic void addLast(object o) { Node n); n.item = o; last.next = n; n.next = null; last = n; }  Feb 27, 2019 #  Speed of our MetaArray and LList #  Adding to LList is called an O(1) operation. Means order of 1 operation to add something onto the LList.\nAdding to the MetaArray is grows by an percentage, however, if you average the times of this operation out it is still an O(1) operation. Adding to the MetaArray using a constant amount ( not a percentage ) then adding a successive element to the array becomes longer and longer, this is called an O(n) operation.\n   Type addFirst addLast insert (middle) remove (end) size toString clear indexOf get     ArrayList O(1) amortized O(1) O(n) O(1) O(1) O(n) O(1) O(n) O(1)   LinkedList O(1) O(1) O(n) O(1) O(n) O(n) o(1) O(n) O(n)     Mar 4, 2019 #  Stacks #  A data structure (like a stack of paper)\n   Method Description     push(o) adds item o to stack   pop() returns the item on top of the stack, then removes it   peek() shows item on top of stack   clear() clears stack   isEmpty() returns true if stack is empty    import java.util.LinkedList; public class Stack\u0026lt;X\u0026gt; { private LinkedList\u0026lt;X\u0026gt; s; public Stack() { s); } public void push(X o) { s.addLast(o); } public X pop() { X temp); s.remove(s.size() - 1); return temp; } public void clear() { s.clear(); } public X peek() { return s.get(s.size() - 1); } public boolean isEmpty() { return s.size() == 0; } } When using extends\n This sets up a is-a relationship, for example, Stack is-a LinkedList This makes Stack have all the methods that LinkedList has  When encapsulating inside the class\n This sets up a has-a relationship Stack has-a LinkedList inside of it   Sidenote: When you can\u0026rsquo;t think of a placeholder name, use: foo, bar, baz, qux, quux \u0026hellip;\n  Mar 6, 2019 #  Dog class #  public class Corgi { private String name; private int age; public Corgi(String n, int a) { name = n; age = a; } public String sleep() { return \u0026#34;Zzzzzz\u0026#34;; } public String eat() { return \u0026#34;Chomp chomp!\u0026#34;; } public String bark() { return \u0026#34;Woof!\u0026#34;; } public String toString() { return name + \u0026#34; \u0026#34; + age; } public void birthday() { age++; } }  2 more classes (Shiba and Dachshund)\n import java.util.ArrayList; public class Kennel { ArrayList\u0026lt;Corgi\u0026gt; corgis; ArrayList\u0026lt;Shiba\u0026gt; shibas; ArrayList\u0026lt;Dachshund\u0026gt; dachshund; public Kennel() { corgis); shibas); dachshunds); } public void addCorgi(Corgi c) { corgis.add(c); } public void addShiba(Shiba s) { shibas.add(s); } public void addDachshund(Dachshund d) { dachshunds.add(d); } } Scaling this up becomes problematic because everytime you want to add another breed of dog you need to add methods and arraylists for it. To generalize this, we will make a Dog interface.\npublic interface Dog { public String eat(); public String bark(); public String sleep(); public String toString(); public void birthday(); } Interfaces list all the methods that you want all Dogs to do.\nNow in Corgi class add the word implements after the class\npublic class Corgi implements Dog { } You can then make new dogs like this: Dog d); This makes the only the methods available to Dog available in variable d, it can be cast as a Corgi to gain access all the methods that Dog doesn\u0026rsquo;t have but Corgi does.\n Mar 11, 2019 #   Midterm is wednesday (4/20) [2019-05-06]  LList unit tests #  Concerning Rigorous test 2: Problem is usually with remove() method, make 4 cases:\n List with 1 item Remove last item Remove first item Remove from middle  Postfix notation #  Infix notation puts the operations in between the numbers. Postfix puts the operator after the operands (numbers).\nIf its a number: Push onto stack If its a operator Pop 2 and perform the operation then push\n 20 3 4 + + = 27\n6 8 2 + - = -4\n 4 + 2 * 3 - 8 / 6 + 7 + 9\n4 + 2 3 * - 8 / 6 + 7 + 9\n4 + 2 3 * - 8 6 / + 7 + 9\n4 2 3 * + - 8 6 / + 7 + 9\n4 2 3 * + 8 6 / - + 7 + 9\n4 2 3 * + 8 6 / - 7 + + 9\n4 2 3 * + 8 6 / - 7 + 9 +\n Mar 13, 2019 #  Postfix stack #  When splitting a string into pieces (using split), the split pieces are called \u0026ldquo;tokens\u0026rdquo;.\nimport java.util.Stack; public class Postfix { String expr; Stack\u0026lt;Double\u0026gt; stack; public Postfix(String e) { expr = e; stack); } public double eval() { String[] tokens); for (String token : tokens) { if (token.equals(\u0026#34;+\u0026#34;)) { double a); double b); stack.push(a + b); } else if (token.equals(\u0026#34;-\u0026#34;)) { double a); double b); stack.push(b - a); } else // Must be a number  { try { double n); stack.push(n); } catch (java.lang.NumberFormatException n) { throw new UnknownToken(); } } } return stack.peek(); } } New java shortcut, the for each loop:\nfor (String token : tokens) { } tokens is the array you are walking thru, and token is a variable that refers to each element of the array. This is a for each loop. (This is like for i in list: in python)\n Apr 18, 2019 #  JavaFX #  Terminology\n Stage  A window   Scene  A container to put things in Can have more then one scene per window    import javafx.application.Application; import javafx.stage.Stage; import javafx.scene.layout.Pane; import javafx.scene.Scene; import javafx.scene.shape.Circle; public class First extends Application { public void start(Stage window) { window.show(); window.setTitle(\u0026#34;First!\u0026#34;); window.setSize(600, 400); Pane canvas); window.setScene(new Scene(canvas, 600, 400)); Circle c); canvas.getChildren().add(c); } }  Smoot calc #  public class Distance { double feet; public Distance(double f) { feet = f; } /** 1 smooth equals 5 foot 7 inches */ public double toSmoots() { return feet / (5 + 7.0/12.0); } } import javafx.application.Application; import javafx.stage.Stage; import javafx.scene.Scene; import javafx.scene.layout.Pane; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.scene.control.Button; import javafx.event.ActionEvent; public class UI extends Application { TextField feetField; TextField smootField; public void start(Stage window) { window.show(); window.setTitle(\u0026#34;Smoot Calc\u0026#34;); Pane canvas); Scene myScene); window.setScene(myScene); Label feetLabel); Label smootLabel); canvas.getChildren().add(feetLabel); canvas.getChildren().add(smootLabel); feetLabel.relocate(20, 50); smootLabel.relocate(20, 100); feetField); smootField); canvas.getChildren().add(feetField); canvas.getChildren().add(smootField); feetField.relocate(80, 48); smootField.relocate(80, 98); Button goButton); Button clearButton); canvas.getChildren().add(goButton); canvas.getChildren().add(clearButton); goButton.relocate(80, 150); clearButton.relocate(150, 150); goButton.setOnAction(this::handleGoButton); clearButton.setOnAction(this::handleClearButton); } public void handleGoButton(ActionEvent ae) { //Get feet from feetField  String feet); //Create distance object  double dfeet); Distance d); //Convert  double smoots); //Output to smootField  smootField.setText(\u0026#34;\u0026#34; + smoots); } public void handleClearButton(ActionEvent ae) { feetField.setText(\u0026#34;\u0026#34;); smootField.setText(\u0026#34;\u0026#34;); } } The :: in the setOnAction() method refers to which class the method to call is in. (class::method)\n Mar 27, 2019 #  Git #  Terminology:\n Working directory  Where you edit, compile, run program   Repository  Where the backups are kept Local  On your local machine   Remote  On a server     Commit  Make a backup   Push  Upload local repo to remote repo   Pull  Download remote repo to local repo     Apr 22, 2019 #  JSON data from Java class #  URL consists of 4 parts\nhttps://www.sierracollege.edu/student-services/financial-aid.php ^ protocol ^ host ^ path newsapi.org\nTo call the newsapi:\nhttps://newsapi.org/v2/everything/?q=whattosearchfor\u0026amp;apiKey=\npublic class News { public static void main(String[] args) { // Prompt  Scanner in); System.out.print(\u0026#34;Enter query: \u0026#34;); String keyword); // URL with keyword  String urlString = \u0026#34;https://newsapi.org/v2/everything?q=\u0026#34; + keyword + \u0026#34;\u0026amp;apiKey=\u0026#34;; //TODO add apiKey  try { // Make URL object  URL url); // Open stream readers for incoming data  InputStream is); InputStreamReader isr); BufferedReader br); //  JsonParser parser); JsonElement results); // Show title of article 0  String title) .getAsJsonArray().get(0) .getAsJsonObject().get(\u0026#34;title\u0026#34;) .getAsString(); System.out.println(title); // Print out all titles  JsonArray titles) .getAsJsonArray(); for (int i) { String title) .get(\u0026#34;title\u0026#34;).getAsString(); System.out.println(\u0026#34;\u0026#34; + i + \u0026#34; \u0026#34; + title); } } catch (MalformedURLException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } } Make a new directory called libs inside idea project. Put gson-2.8.5.jar inside, then choose \u0026ldquo;Add As Library\u0026rdquo; from right click menu\n Apr 24, 2019 #  Sanitizing data #  Clean up data before submitting\n May 15, 2019 #  "}),a.add({id:22,href:'/notes/CS130/CS130-exercise-solutions-1/',title:"CS130-exercise-solutions-1",section:"CS130",content:"For example if   \\( n = 6 \\)  :\n \\[\\begin{aligned} t(n) \u0026amp;= t(n) \\cdot t(n-1) \\cdot t(n-2) \\cdot t(n-3) \\cdot t(n-4) \\cdot t(n-5) \\\\ \u0026amp;= \\underbrace{6 \\cdot 5 \\cdot 4 \\cdot 3 \\cdot 2 \\cdot 1}_{\\text{this happens } n \\text{ times}} \\end{aligned}\\]  So we have a time complexity of  \\( O(n) \\)  .\n   "}),a.add({id:23,href:'/notes/CS130/CS130-lecture-20200831/',title:"CS130-lecture-20200831",section:"CS130",content:"Syllabus #  The required text is available for free in the school library\nBoth sections will take the exam together\nModule 1 #  Test cases will usually be provided.\n"}),a.add({id:24,href:'/notes/CS130/CS130-lecture-20200902/',title:"CS130-lecture-20200902",section:"CS130",content:"Concerning the survey from last class #  The differences between an array and a linked list:\n Access: arrays can access an spot instantly, linked lists need to iterate from the head until they reach the target. Size: arrays are fixed in size, linked lists can become bigger or smaller  Stacks can be implemented using a linked list or an array. FILO\nQueues can be implemented using a linked list or a circular array. FIFO\nRecursion #  Recursive functions must have a base case, otherwise you will get an infinite loop!\n f1 has no base case f2 doesn\u0026rsquo;t reduce the problem to the base case (no n - 1) f3 needs to check the base case first f4 recursive call is infinite when n \u0026gt; 0  Algorithm analysis #  "}),a.add({id:25,href:'/notes/CS130/CS130-lecture-20200909/',title:"CS130-lecture-20200909",section:"CS130",content:"Runtime analysis cont. #  Big Oh notation is pretty much the only asymptotic notation used.\nInitializing arrays of ints in Java initializes everything to 0, so it is a linear process. The if statement has an else with a loop, so at a worse case it is O(n).\nOn line 73, you have to count the other functions runtime analysis also.\n"}),a.add({id:26,href:'/notes/CS130/CS130-lecture-20200914/',title:"CS130-lecture-20200914",section:"CS130",content:"Annoucements #  New webcam usage survey\nExercise solutions:\n Runtime analysis cont. #  Space complexity analysis #  1MB) kB\nStrings have the fields: start address, length, offset, hash\nFor example:\nstr = \u0026quot;Java\u0026quot;; str1); The space is constant because the sub string isn\u0026rsquo;t copied, just more references are made.\n c + 4n, so O(n)  32 + 64n)  Normally you don\u0026rsquo;t count the space of the parameters or the return.\nTime complexity is O(n) Space complexity is O(1)\n"}),a.add({id:27,href:'/notes/CS130/CS130-lecture-20200916/',title:"CS130-lecture-20200916",section:"CS130",content:"Exercise solutions #  For example if   \\( n = 6 \\)  :\n \\[\\begin{aligned} t(n) \u0026amp;= t(n) \\cdot t(n-1) \\cdot t(n-2) \\cdot t(n-3) \\cdot t(n-4) \\cdot t(n-5) \\\\ \u0026amp;= \\underbrace{6 \\cdot 5 \\cdot 4 \\cdot 3 \\cdot 2 \\cdot 1}_{\\text{this happens} \\,n\\, \\text{times}} \\end{aligned}\\]  So we have a time complexity of  \\( O(n) \\)  Space complexity cont. #  Time complexity of this is  \\( O(n) \\)  . Space complexity is  \\( O(1) \\)  .\nSorting #  Requires 2 smaller arrays already sorted.\nCompares the two elements under the cursors, sorted into a new array in non-decreasing order. Copy the smallest one to the destinatino array, and move the cursor forward on respective array.\nWhen one cursor goes past the end of an array you just copy the other cursor over.\ni is the cursor for the left array, j is the cursor for the right array. The first array is the first half of a and the second is the second half of a.\nLets assume hi - lo + 1.\nWe split each array until each array only has 1 element. The reason for this is because an array with 1 element is sorted!\nLets analyze the space complexity. The recursive method is  \\( O(log(n)) \\)  . The first sort method is  \\( n \u0026#43; log(n) \\)  so it is  \\( O(n) \\)  .\nLets analyze runtime complexity.\n "}),a.add({id:28,href:'/notes/CS130/CS130-lecture-20200921/',title:"CS130-lecture-20200921",section:"CS130",content:"Annoucements #  First assignment open\nMergesort cont. #  Solution to last exercise:\n The first sort method:\n space complexity is O(n) running time is  The second method\n space complexity is O(1) running time is O(nlog(n))  An example of a stable sorting algorithm:\nUnsorted: [3(1), 2, 1, 5, 3(2)] (where the (1) indicates that it is the first 3 in the array)\nSorted: [1, 2, 3(1), 3(2), 5] this is stable [1, 2, 3(2), 3(1), 5] this is unstable\nFor example if you have two arrays: [1, 3, 5] and [7, 9, 11] you can check the last element of the first array against the first element of the second, you can skip the merge.\nQuick sort #  "}),a.add({id:29,href:'/notes/CS130/CS130-lecture-20200923/',title:"CS130-lecture-20200923",section:"CS130",content:"Annoucements #  Assignment 1 has unlimited attempts, the last attempt counts.\nSubstrings #  Quicksort cont. #  Space complexity is O(1). Running time is O(n).\nExercise posted:\nSpace complexity best case is O(log(n)), and worst case is O(n). Running time best case is O(log(n)), and worst case is O(n).\n"}),a.add({id:30,href:'/notes/CS130/CS130-lecture-20200928/',title:"CS130-lecture-20200928",section:"CS130",content:"Dev environment #  JDK 11 JUnit 5 Module with all docs for setup\nFilenames: assignment1_ZedChance.zip\nQuicksort exercise solutions #  Quicksort cont. #  Runningtime is O(n)\nPriority queues #  a is complete b is complete c is incomplete d is not a binary tree e is incomplete f is complete\na is a height of 0 b-d is a height of 1 e-f is a height of 2\nfirst tree is neither second tree is max heap third tree is min heap\n"}),a.add({id:31,href:'/notes/CS130/CS130-lecture-20200930/',title:"CS130-lecture-20200930",section:"CS130",content:"Regarding quicksort 3-way #  Used for when there is a lot of duplicate keys, for example sorting by US state.\nHeap and priority queues #  Index starts at 1 so the math to find the child or parent works.\nSize starts at 0, but is incremented BEFORE it is used for the pq position.\nSpace complexity of swim method is O(1).\nSwap root and highest index and decrement index to break it off\nChoose the bigger child when sink starts\nSwap item if bigger, choosing bigger child to compare to\nSink space complexity is O(1).\nBest case running time is O(1) (if there are only 2 children). Worst case is O(lg(n)).\nIt sinks tree by tree\n"}),a.add({id:32,href:'/notes/CS130/CS130-lecture-20201005/',title:"CS130-lecture-20201005",section:"CS130",content:"Assignment 1 solutions #  Heapsort #  With the goal of non-decreasing order.\nSink each parent starting with the last, and working down.\nNow to sort, swap last element, reduce heap size, and sink item down\nThe element at the end will be put into place.\nRunning time for sink is O(lg(n)) Running time for entire sort is O(nlg(n)) worst case, best case)\nSpace complexity for sink is O(1) Space complexity for sort is O(1)\n"}),a.add({id:33,href:'/notes/CS130/CS130-lecture-20201007/',title:"CS130-lecture-20201007",section:"CS130",content:"Running time complexity: 3n + k) Space time complexity: O(n + k) Stable algorithm\nSort from least significant position to most significant position\n Runtime of findLargestStrings is O((n+m)log(m)) Space complexity is O(m)\n"}),a.add({id:34,href:'/notes/CS130/CS130-lecture-20201012/',title:"CS130-lecture-20201012",section:"CS130",content:"Annoucements #  Midterm exam on 21, unless pushed back to 26th.\nThe format is open book, open notes, no webcam. During class time so it will be timed. One question at a time, randomly shuffled, and you can\u0026rsquo;t go back to work on previous questions.\nRadix sort #  In this example: D = 3, K = 10. Sort from the least significant digit to the most significant digit.\nIf we use count sort to sort, our runtime is O(D * (N + K)).\nBest case is O(n) Worst case O(n^2) Average O(n)\nBest/worst case space complexity os O(1)\nSymbol table #  When a duplicate is added the value is overwritten. Ordered symbol tables are sorted by key.\nkey, value \u0026ldquo;\u0026rdquo;, 0 \u0026ldquo;S\u0026rdquo;, 1 \u0026ldquo;E\u0026rdquo;, 3 \u0026ldquo;A\u0026rdquo;, 2 \u0026ldquo;R\u0026rdquo;, 1 \u0026ldquo;C\u0026rdquo;, 1 \u0026ldquo;H\u0026rdquo;, 1 \u0026ldquo;X\u0026rdquo;, 1 \u0026ldquo;M\u0026rdquo;, 1 \u0026ldquo;P\u0026rdquo;, 1\nWhen it reaches the \u0026ldquo;E\u0026rdquo;, it adds 1 to the value. maxFreqKey would be \u0026ldquo;E\u0026rdquo;.\n"}),a.add({id:35,href:'/notes/CS130/CS130-lecture-20201014/',title:"CS130-lecture-20201014",section:"CS130",content:"RE: Midterm exam #  Oct 26, 7p-8:15p\nMake sure to join using SSO.\nOne question at a time, can\u0026rsquo;t go back. Open notes, open book.\nBinary search tree cont. #  Solutions for last exercises\nThis is invalid\nThis is valid\nThis is valid\nBest case runtime is O(1). Worst case runtime is O(n).\nBest case space complexity is O(1). Worst case space complexity is O(n).\nBest case runtime for put method is O(1). Worst case runtime for put method is O(n).\nBest case spacetime for put is O(1). Worst case spacetime for put is O(n).\nThe minimum key is as far left as possible.\npublic Key max() { if (root) return null; else return max(root).key; } private Node max(Node node) { if (node.right) return node; else return max(node.right); } public int height() { if (root) return 0; else return height(root); } private int height(Node node) { int leftSize); int rightSize); if (leftSize \u0026gt; rightSize) { // hmm  } } "}),a.add({id:36,href:'/notes/CS130/CS130-lecture-20201019/',title:"CS130-lecture-20201019",section:"CS130",content:"BST cont. #  Running time is O(n). Space complexity best case is O(lgn). Space complexity worst case is O(n).\n"}),a.add({id:37,href:'/notes/CS130/CS130-lecture-20201021/',title:"CS130-lecture-20201021",section:"CS130",content:"Midterm review #  MidTermReview.txt\nContents Everything covered from Module 1 to Module 6\nAnalysis of algorithm\n Asymptotic notations Best-case, average-case, worst-case Be able to provide time and space analysis for an given algorithm  Memory of a process\n What are the four sections? (code, data, heap, stack) What does each section contain? Understand function call and stack-based memory allocation  Recursion\n Base case Recursive vs. iterative approach, every recursive method can be implemented iteratively Consider stack-based memory allocation in space analysis  Sorting Algorithms\n merge sort, quick sort, heap sort, count sort, radix sort Sorting algorithm implementation \u0026amp; application, performance analysis and comparison  Data structures\n Binary tree Complete binary tree, priority queue, binary max/min heap Binary search tree Common operations for each data structure and their implementation Usages of data structures  Question types\n Single or Multiple choices Short answer Algorithm analysis (time and space)  Note\n The best way to prepare for the exam is to review class notes and related sections in the text book, and redo in-class exercises as well as homework questions. The mid-term exam will be open-book and open-notes.   Assignment 2 solutions #  Assignment 3 solutions #  "}),a.add({id:38,href:'/notes/CS130/CS130-lecture-20201028/',title:"CS130-lecture-20201028",section:"CS130",content:"2-3 Tree #   An empty tree is a 2-3 A BST is a 2-3 search tree no is yes  Search miss\nWorst case running time for 2-3 tree search is O(lgn). Remember the height of a 2-3 tree is between (floor(\\log_3 N)) and (floor(log_2 N)). So in the worst case it searches the entire height of the tree + 1.\nIt inserts it into the 3 node to preserve the balance of the 2-3 tree.\nCreates a temporary 4 node, then it splits.\nThe worst-case running time for 2-3 tree insertion is O(lgn)\nInvalid red-black BSTs\nThis is perfectly \u0026ldquo;black balanced\u0026rdquo; because each null leaf is 2 black links to the root. The height is 4 because you consider both black and red links.\n (i) is not black balanced, so not red-black BST (ii) is not black balanced, also key order is wrong, so not red-black BST (iii) is black balanced, special case where there is no red links (but they\u0026rsquo;re not required), so yes it is a red-black BST (iv) is black balanced, and red links are valid, key order is good, so red-black BST   "}),a.add({id:39,href:'/notes/CS130/CS130-lecture-20201102/',title:"CS130-lecture-20201102",section:"CS130",content:"One line is black, 2 lines is red\nis false  Runtime of rotateLeft is O(1). Space complexity is O(1).\nOur definition is left leaning so it needs to be rotated left.\nThe runtime of put is O(lgn). Space complexity is O(lgn).\n"}),a.add({id:40,href:'/notes/CS130/CS130-lecture-20201104/',title:"CS130-lecture-20201104",section:"CS130",content:"Midterm solutions #  Red-black BST exercise solution #  M is the number of children per node.\nEach non-leaf node has between 3 and 5 children for above example. Each leaf node has between 3 and 5 data items.\nUnordered symbol tables #  "}),a.add({id:41,href:'/notes/CS130/CS130-lecture-20201109/',title:"CS130-lecture-20201109",section:"CS130",content:"Hash codes should use all of the fields.\nAny perms of strings with the same letters will have the same hashcode, therefore this is a bad hash function.\nThe worst case runtime for put is O(n). The best case runtime for put is O(1). Space complexity for put is O(1).\nBest case runtime for get is O(1) and worst case is O(n). Space complexity for get is O(1).\nThe load factor is the number of key value pairs (N) divided by the table size (M), so (\\frac{10}{5}).\n"}),a.add({id:42,href:'/notes/CS130/CS130-lecture-20201116/',title:"CS130-lecture-20201116",section:"CS130",content:"C goes to the next open value because they collide\nresize is called if the table is \u0026gt;= being half full.\nThe first 8 insertions before the resize:\nPut the existing keys (they rehash), then continue putting the rest of the list\nA is true B is false C is true (another case of A basically) D is false (another case of B)\nFor get: best case runtime is O(1), worst case is O(n). For resize: avg runtime is O(m). For put: amortized O(1) runtime.\nLoad factor must be \u0026lt; 1 otherwise it will infinitely loop thru the table on a search miss.\nWe can\u0026rsquo;t simply set a key to null to delete, becauses if there are keys that hash to that index we won\u0026rsquo;t be able to find it. We start by setting the first key to null, then we have to rehash and reput the keys in the same cluster.\n"}),a.add({id:43,href:'/notes/CS130/CS130-lecture-20201118/',title:"CS130-lecture-20201118",section:"CS130",content:"Suppose: n = inputs.length m)`\nAverage runtime is O(n + m). Space complexity is O(m).\nModule 9, Ch 1.5 #  CORRECTION: Count should be decremented each time thru\n"}),a.add({id:44,href:'/notes/CS130/CS130-lecture-20201123/',title:"CS130-lecture-20201123",section:"CS130",content:"Quick union example\n   index 0 1 2 3 4 5 6 7 8 9     id 1 1 1 8 3 0 5 1 8 8       id 0 1 2 3 4     id 1 2 3 4 4    O(n^2) runtime if unioning linear items.\nWeighted union example\n   id 0 1 2 3 4 5 6 7 8 9     id 6 2 6 4 4 6 6 2 4 4    CORRECTION: 0 should be the root.\nCORRECTION: "}),a.add({id:45,href:'/notes/CS130/CS130-lecture-20201125/',title:"CS130-lecture-20201125",section:"CS130",content:"Answer: ( \\frac{2E}{V}) avg number of degree.\nIf you have V, no self loop, no parallel edges, what is maximum edges?\nAnswer: ( \\frac{V(V-1)}{2} )\nSo if you have (V), considered sparse.\nAdjacency lists represent each edge twice, so the number of spaces taken (number of nodes) is (2E). So the full space used by this is (V + 2E), so our space complexity is O(E + V).\n(V - 1)  Depth-first search trace on whiteboard:\nCount) worst case runtime.\nBack to the analysis of the algorithm:\nWorst case space is from a linear graph: "}),a.add({id:46,href:'/notes/CS130/CS130-lecture-20201130/',title:"CS130-lecture-20201130",section:"CS130",content:"Exercise solns #  Graph cont. #  Gets shortest path because it starts by searching all edges that are 1 away, then 2 away, and so forth.\nTracing the BFS implementation\nEnter the loop\nPath tree on right ^\nPerformance:\n Worst case runtime is O(E) or O(V+E) Worst case space complexity O(V), when every vertice is added to the queue   There is a maximum of (V(V-1)) vertices in a digraph with no parallel or self-loops. \u0026ldquo;Each edge can connect to every other edge.\u0026rdquo; The minimum number of edges is (V-1).   The indegree for 6 is 2 The outdegree for 6 is 1  Space complexity of reverse is O(V+E). Runtime complexity is O(V+E).\nWhat vertices are reachable from\n Source 1: 1 Source 2: 0, 1, 2, 3, 4, 5 Source 1,2,6: All except 7 and 8  Directing cycle\nThis would be impossible to take any courses. There cannot be any directed cycles in the digraph, it would be impossible to find the topological order. (This is a DAG).\nTopological sort with DFS trace\nVertexes in different color have been visited\n0, 3, 7, 6, 5 are reachable from 0. Now go by vertex order and check 1\nNow check 2\nEverything has been visited now. Our reversePost is finished. All edges flow from left to right.\nThe runtime for the constructor is O(V+E). Space complexity for the constructor is O(V).\n0: 6 1: 11 2: 0, 3 3: 6, 10 4: 1 5: 2, 10 6: 2 7: 8, 11 8: 1, 4 9: 10: 3 11: 8 "}),a.add({id:47,href:'/notes/CS130/CS130-lecture-20201202/',title:"CS130-lecture-20201202",section:"CS130",content:"Exercise solutions #  On the whiteboard:\nStart on vertex 0\nMove onto vertex 2, need to exhaust all vertices\nMove onto vertex 7\nThe reverse post order is : 8, 7, 2, 3, 0, 6, 9, 10, 11, 12, 1, 5, 4\nGraph cont. #  These are considered strongly connected. Also considered a strongly connected digraph.\n5 strongly connected components.\nReversed graphs are still strongly connected in the same components. A reversed graph\u0026rsquo;s reverse post order will show each component. Visit each vertex in the reverse post order and keep track of which ones have been visited, each vertex will be able to reach all the other vertex in the same component.\nA strongly connected digraph has 1 strong component.\nA DAG has (V) strong components.\nWeighted graphs #  If a graph is not connected, it doesn\u0026rsquo;t have a spanning tree.\nFor an edge-weighted graph with (V) vertices, a MST has (V - 1) edges.\nAnother look at the implementation:\nWorst case time comes from the pq operation.\nThis type of graph gives the maximum size of the pq.\nSkipping the eager prim implementation\nThe for loop on 13 is O(ElgE). The union find is O(ElgV). and since E is greater than or equal to the vertices minus 1, the overall runtime is O(ElgE).\nIt won\u0026rsquo;t connect v and w because it will create a cycle.\nEdge weighted digraphs #  "}),a.add({id:48,href:'/notes/CS130/CS130-lecture-20201207/',title:"CS130-lecture-20201207",section:"CS130",content:"Exercise solutions #  Single source shortest paths #  TYPO fixed in column 5 relax 4:\nThe max space taken by the IndexMinPQ is O(V - 1).\nDecimal to binary, and back\nIs a BST seach a P problem? Yes It is also a NP problem. It is not a NP-Complete problem.\n"}),a.add({id:49,href:'/notes/CS130/CS130-lecture-20201209/',title:"CS130-lecture-20201209",section:"CS130",content:"Review #  Assignment 5 solutions #  8:\n9:\nCORRECTION: 8 is a weight of 78, the picture is correct but the table shows 82.\n11:\nAssignment 4 solutions #  Rest of code in solutions on canvas\nFinal review #  "}),a.add({id:50,href:'/notes/CS130/CS130-priority-queues/',title:"CS130-priority-queues",section:"CS130",content:"Maxpq #  MaxPQ.java\n/** * MaxPQ (maximum priority queue) implemented from Algorithms (Sedgewick, Wayne) * pg. 318 */ public class MaxPQ\u0026lt;Key extends Comparable\u0026lt;Key\u0026gt;\u0026gt; { private Key[] pq; // heap-ordered complete binary tree  private int n = 0; // pq[0] is unused, heap uses pq[1..n]  /** * Create new empty max priority queue. * Useful if inserting one by one, where each element * is inserting at the end and \u0026#34;swims\u0026#34; up into place. * @param max maximum size of queue */ public MaxPQ(int max) { pq) new Comparable[max + 1]; } /** * Creates new max priority queue from existing array. * Takes an existing array and \u0026#34;sinks\u0026#34; each parent into * place decrementing from the last parent. * @param a array to create maxpq from */ public MaxPQ(Key[] a) { n = a.length; pq) new Comparable[n * 2]; for (int i) { pq[i] = a[i - 1]; } heapify(pq); } /** * Inserts a new item into the maxpq. * First adds the item to the end of the queue * then swims the item up into position. * @param v item to insert */ public void insert(Key v) { pq[++n] = v; swim(n); } /** * Deletes the root of the maxpq. * First swaps last item with root * then sinks the item down into position. * @return item at root */ public Key delMax() { Key max = pq[1]; exchange(1, n--); pq[n + 1] = null; sink(1); return max; } /** * Swims item up into position. * @param k index to swim up */ private void swim(int k) { while (k \u0026gt; 1 \u0026amp;\u0026amp; less(k / 2, k)) { exchange(k / 2, k); k = k / 2; } } /** * Sinks item down into position. * @param k index of item to sink down */ private void sink(int k) { while (2 * k \u0026lt;= n) { int j = 2 * k; if (j \u0026lt; n \u0026amp;\u0026amp; less(j, j + 1)) j++; if (!less(k, j)) break; exchange(k, j); k = j; } } /** * Sinks parents in a decrementing order. * Orders an array into a max heap. * @param a array to heapify */ private void heapify(Key[] a) { for (int i) { sink(i); } } /** * Checks to see if the maxpq is empty. * @return true if empty */ public boolean isEmpty() { return n == 0; } /** * Returns size of maxpq. * @return size as int */ public int size() { return n; } private boolean less(int i, int j) { return pq[i].compareTo(pq[j]) \u0026lt; 0; } private void exchange(int i, int j) { Key t = pq[i]; pq[i] = pq[j]; pq[j] = t; } public String toString() { String ret = \u0026#34;\u0026#34;; for (int i) { ret += pq[i] + \u0026#34; \u0026#34;; } return ret; } public static void main(String[] args) { Comparable[] a = {\u0026#34;S\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;R\u0026#34;, \u0026#34;T\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;X\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;M\u0026#34;, \u0026#34;P\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;E\u0026#34;}; MaxPQ\u0026lt;String\u0026gt; test); // this constructor heapifies  System.out.println(test); System.out.println(\u0026#34;Size: \u0026#34; + test.size()); System.out.println(\u0026#34;Inserting W\u0026#34;); test.insert(\u0026#34;W\u0026#34;); System.out.println(test); System.out.println(\u0026#34;Inserting J\u0026#34;); test.insert(\u0026#34;J\u0026#34;); System.out.println(test); System.out.println(\u0026#34;Deleting: \u0026#34; + test.delMax()); System.out.println(test); System.out.println(\u0026#34;Deleting: \u0026#34; + test.delMax()); System.out.println(test); System.out.println(\u0026#34;Inserting S\u0026#34;); test.insert(\u0026#34;S\u0026#34;); System.out.println(test); } } "}),a.add({id:51,href:'/notes/CS130/CS130-sorting-algorithms/',title:"CS130-sorting-algorithms",section:"CS130",content:"Merge #  Merge.java\n/** * Mergesort algorithm implemented from Algorithms (Sedgewick, Wayne) * Section 2.2, pg. 270 */ public class Merge { private static Comparable[] aux; public static void sort(Comparable[] a) { aux = new Comparable[a.length]; sort(a, 0, a.length - 1); } private static void sort(Comparable[] a, int lo, int hi) { // sort a[lo..hi]  if (hi \u0026lt;= lo) return; // base case  int mid) / 2; // find mid point  sort(a, lo, mid); // sort left half (recursive call)  sort(a, mid + 1, hi); // sort right half (recursive call)  merge(a, lo, mid, hi); // merge 2 sorted arrays  } private static void merge(Comparable[] a, int lo, int mid, int hi) { // merge a[lo..mid] with a[mid + 1..hi]  int i = lo, j = mid + 1; for (int k) { aux[k] = a[k]; } for (int k) { if (i \u0026gt; mid) // left side exhausted  { a[k] = aux[j++]; } else if (j \u0026gt; hi) // right side exhausted  { a[k] = aux[i++]; } else if (less(aux[j], aux[i])) // right side is \u0026lt; left side  { a[k] = aux[j++]; } else // left side is \u0026lt; right side  { a[k] = aux[i++]; } } } private static boolean less(Comparable v, Comparable e) { return v.compareTo(e) \u0026lt; 0; } public static void main(String[] args) { Comparable[] test = {55, 61, 22, 97, 56, 96, 96, 88, 57, 49, 31, 48}; // Comparable[] test = {\u0026#34;M\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;R\u0026#34;, \u0026#34;G\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;S\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;R\u0026#34;, \u0026#34;T\u0026#34;}; // Comparable[] test = {\u0026#34;Cool\u0026#34;, \u0026#34;12345\u0026#34;, \u0026#34;Hello\u0026#34;, \u0026#34;Aardvark\u0026#34;, \u0026#34;Archive\u0026#34;};  for (int i) { System.out.print(test[i] + \u0026#34; \u0026#34;); } System.out.println(); Merge.sort(test); for (int i) { System.out.print(test[i] + \u0026#34; \u0026#34;); } } } Quick #  Quick.java\n/** * Quicksort algorithm implemented from Algorithms (Sedgewick, Wayne) * Section 2.3, pg. 288 */ public class Quick { public static void sort(Comparable[] a) { sort(a, 0, a.length - 1); } private static void sort(Comparable[] a, int lo, int hi) { if (hi \u0026lt;= lo) return; // base case  int j); // partition and return index of pivot point // System.out.print(\u0026#34;lo: \u0026#34; + lo + \u0026#34;\\tj: \u0026#34; + j + \u0026#34;\\thi: \u0026#34; + hi + \u0026#34;\\t\u0026#34;);  print(a); sort(a, lo, j - 1); // sort left half (recursive call)  sort(a, j + 1, hi); // sort right half (recursive call)  } private static int partition(Comparable[] a, int lo, int hi) { // Partition into a[lo..i - 1], a[i], a[i + 1..hi]  int i = lo, j = hi + 1; // left and right cursors  Comparable v = a[lo]; // pivot item  while (true) { while (less(a[++i], v)) if (i) break; // scan from left until item is greater than pivot  while (less(v, a[--j])) if (j) break; // scan from right until it em is less than pivot  if (i \u0026gt;= j) break; // if cursors pass each other break  exchange(a, i, j); // exchange items at cursors  } exchange(a, lo, j); // put pivot item in place  return j; // return pivot item index  } private static boolean less(Comparable v, Comparable e) { return v.compareTo(e) \u0026lt; 0; } private static void exchange(Comparable[] a, int i, int j) { Comparable t = a[i]; a[i] = a[j]; a[j] = t; } public static void print(Comparable[] a) { for (int i) { System.out.print(a[i] + \u0026#34; \u0026#34;); } System.out.println(); } public static void main(String[] args) { // Comparable[] test = {\u0026#34;Q\u0026#34;, \u0026#34;U\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;S\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;R\u0026#34;, \u0026#34;T\u0026#34;};  Comparable[] test = {10, 12, 14, 9, 5, 10, 50, 52, 58, 3, 0, 15, 64}; print(test); Quick.sort(test); print(test); } } Analysis #     Algorithm Running time complexity Space complexity     Merge    \\( O(nlog(n)) \\)    \\( O(n) \\)     Quick Best:  \\( O(nlog(n)) \\)  Worst:  \\( O(n^2) \\)   Best:  \\( O(log(n)) \\)  Worst:  \\( O(n) \\)      "}),a.add({id:52,href:'/notes/CS131/CS131-lecture-20200901/',title:"CS131-lecture-20200901",section:"CS131",content:"Syllabus #  CSC131Syllabus_Penn.pdf\nSend email prior to office hours, makes it easier.\nA team project will happen.\nNotes are allowed during quizes! Don\u0026rsquo;t miss a quiz!\nhttps://padlet.com/azizipenn/cuj51f9q36w079ko\nWhat is computer engineering? #  "}),a.add({id:53,href:'/notes/CS131/CS131-lecture-20200903/',title:"CS131-lecture-20200903",section:"CS131",content:"HW 1 #  Article on Boeing 737 MAX disaster. Due next week.\nHow do we create software? #  This is the \u0026ldquo;original approach\u0026rdquo; to software engineering:\nDeployments can be done by the developers, or a separate team. Maintenance is typically done by developers, original or not.\nSLDC Models #  Waterfall Model #  The completed output from one phase is the necessary input to the next level.\nPrototype model #  Spiral model #  Adhoc model #  Agile process models #  https://padlet.com/azizipenn/dwj4dd61srbeitgp\n"}),a.add({id:54,href:'/notes/CS131/CS131-lecture-20200908/',title:"CS131-lecture-20200908",section:"CS131",content:"Agile cont. #  The generic model for \u0026ldquo;doing\u0026rdquo; agile\nWe will be using Scrum for this class.\nA daily standup is a timed event where the whole team gathers and stands together and checks in with each other.\nRetrospectives: at the end of a piece of work you will look back and try to improve.\n"}),a.add({id:55,href:'/notes/CS131/CS131-lecture-20200910/',title:"CS131-lecture-20200910",section:"CS131",content:"Breakout room exercise #  Our group is thinking waterfall.\nAgile\nSpiral\n Agile frameworks #  An example of a Trello board\n"}),a.add({id:56,href:'/notes/CS131/CS131-lecture-20200915/',title:"CS131-lecture-20200915",section:"CS131",content:"Annoucements #  First quiz at the end of next week, covers the first 4 weeks. It\u0026rsquo;ll be open over the weekend. Use case homework has been published. Going to hold off on discussion on the 737 MAX HW until case study is finished. Team survey is open!\nSoftware requirements #  How do you translate all of the elicited data into requirements?\n In-Class_and_HW_Activity 3_Use Case Description.pdf\nBusiness Use Case Name: International flight check-in\nTrigger: Customer approaches check in\nPreconditions: Ticket, e-ticket, name and flight number, at least destination\nPost conditions: Boarding pass, some helpful instructions\nActors: Check-in agent, client, computer system, airline company\nBasic flow:\n Get the passengers ticket, or record locator. Check that this is the right passenger, flight, and destination. Ask for passport, check picture and expiry Check for FF number, if none ask if passenger wishes to join and add temp number Check if computer assigned seat is okay, if automatically assigned. Otherwise ask seat preference and assign seat manually. Ask passenger wants to check bags, and verify carry-on is acceptable. Print bag tags and attach to bags, place checked bags on conveyor belt. Print boarding pass, make sure passenger knows where they are headed and what time the flight boards.  "}),a.add({id:57,href:'/notes/CS131/CS131-lecture-20200917/',title:"CS131-lecture-20200917",section:"CS131",content:"Use case template recap #  Traditional requirements #  Agile requirements #  "}),a.add({id:58,href:'/notes/CS131/CS131-lecture-20200922/',title:"CS131-lecture-20200922",section:"CS131",content:"3Cs #  https://docs.google.com/presentation/d/1zvpwRAHGJwOE9QqhNkLQHHftV6guk7rNxwDQ6RuYhZA/edit#slide=id.g998494e7fd_0_119\nhttps://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-activity-diagram/;WWWSESSIONID=C67B13698C795B1642BC5FB95C52D8F8.www1\n"}),a.add({id:59,href:'/notes/CS131/CS131-lecture-20200924/',title:"CS131-lecture-20200924",section:"CS131",content:"Annoucements #  Quiz opens up tonight at midnight\nUser stories cont #  Scrum #  "}),a.add({id:60,href:'/notes/CS131/CS131-lecture-20200929/',title:"CS131-lecture-20200929",section:"CS131",content:"Annoucements #  HW4 is due Oct 5 Team assignment 1 agreement is posted\n3C examples #  A good example:\nA \u0026ldquo;cloudy\u0026rdquo; example:\nAnother good example:\n\u0026ldquo;Kinda cloudy\u0026rdquo; example:\nHuman computer interation concepts #  "}),a.add({id:61,href:'/notes/CS131/CS131-lecture-20201001/',title:"CS131-lecture-20201001",section:"CS131",content:"HCI cont. #  ProjectDesc-OscarsProject.pdf\nSome questions we might want to ask:\n  How do the users usually watch movies\n tv with streaming service pc with streaming service x3    how often do you watch movies\n  How far through the movies do you usually watch\n  What language do they speak\n  "}),a.add({id:62,href:'/notes/CS131/CS131-lecture-20201006/',title:"CS131-lecture-20201006",section:"CS131",content:"737 Boeing disaster #  Unexpected by the pilots, the engineers knew.\n"}),a.add({id:63,href:'/notes/CS131/CS131-lecture-20201008/',title:"CS131-lecture-20201008",section:"CS131",content:"HCI finished #  Accessability slide\n "}),a.add({id:64,href:'/notes/CS131/CS131-lecture-20201013/',title:"CS131-lecture-20201013",section:"CS131",content:"Project, sprint 0 #  "}),a.add({id:65,href:'/notes/CS131/CS131-lecture-20201015/',title:"CS131-lecture-20201015",section:"CS131",content:"Git #  "}),a.add({id:66,href:'/notes/CS131/CS131-lecture-20201020/',title:"CS131-lecture-20201020",section:"CS131",content:"Annoucements #  Our next quiz is next fri 30\nREST #  "}),a.add({id:67,href:'/notes/CS131/CS131-lecture-20201022/',title:"CS131-lecture-20201022",section:"CS131",content:"Software architecture #  Architecture has styles, and this can be translated to software terms also\nCRC (Class responsibility collaboration) #  CRC Cards are a brainstorming technique to help you think about the design of your application.\nLike the 3C\u0026rsquo;s card, its meant to be done on a 3x5 card. The assumption is its not permanent, you\u0026rsquo;re not locked in.\nClasses should only be responsible for its own information. It shouldn\u0026rsquo;t be responsible for keeping track of or holding another class\u0026rsquo;s data.\nhttps://padlet.com/azizipenn/tkzowdu0pkocinpz\n"}),a.add({id:68,href:'/notes/CS131/CS131-lecture-20201027/',title:"CS131-lecture-20201027",section:"CS131",content:"Sprint 0 Review and Retrospective #  The review is about the product.\nThe retrospective is about the process. Make some concrete goals for the next sprint. Instead of \u0026ldquo;improve communication\u0026rdquo;, make it something concrete like \u0026ldquo;We agree to communicate via X and respond within Y time.\u0026rdquo;\n1. What went well in the sprint? #  Our team was able to create a persona from the contextual inquiry of multiple people. Our team was able to get an idea of some future user stories that will need to be completed in the next sprint. Our team was able to setup the project shell and familiarize ourselves with the general workflow. Our team was able to come up with ideas for a mockup UI.\n  What motivated us to do it?\n We did contextual inquiry to be able to make a persona. We set up our project shell in a remote repository and familiarized everyone with the general workflow of the project contribution.    What did we do differently to make it a success?\n We took a lot of different input, from other perspectives, to make a convincing persona. We had several meetings to discuss the details of the persona.    Which training, skill, or knowledge contributed to the difference? Which strong point in you makes it happen?\n Past IDE and Git experience let us set up our project shell.    Which strong points of your team that made it happen?\n Set up a step by step how-to tutorial on how to make sure the project is running correctly. Set up a step by step how-to tutorial on the general workflow for contributing to the project.    2. What went wrong in the Sprint? #  Familiarizing ourselves with Flying Donut took longer than expected.\n  How did it go wrong?\n Navigating the tool wasn\u0026rsquo;t as intuitive as we thought. The sprint was never actually started and as labelled as \u0026ldquo;postponed\u0026rdquo;.    What did you do that went wrong?\n We never \u0026ldquo;started\u0026rdquo; the sprint because all team members weren\u0026rsquo;t all joined. We didn\u0026rsquo;t assign every team member to the skill debt story.    Were you aware of what you were doing that went wrong?\n We were aware that learning Flying Donut was taking longer than expected.    Did you understand it wrong and hence implemented wrong? Did you understand right but still it went wrong?\n We understood the idea and what Flying Donut is for, however it took a little time to learn how to use it effectively.    What did we do well?\n In the end, we figured out Flying Donut enough for it to work for our team.    3. What we had learned in the sprint? #  We learned how to create a persona and do contextual inquiry. We learned how to set up our remote repository for our team. We learned how to set up sprints using Flying Donut. We learned what our project needs to accomplish at a high level. We are learning how to effectively use our meeting time.\n  Which techniques were useful?\n Coming together as a team and meeting on the weekends helped jump start the sprint 0 tasks. Our Discord channel and project-setup guide was useful in making sure that everyone had their IDE setup correctly.    Which techniques were not useful?\n Creating the persona wasn\u0026rsquo;t as useful as we thought.    What went in a smooth fashion during this sprint?\n The contextual inquiry went in a smooth fashion. Our remote repository and IDE setup went in a smooth fashion.    What did not go smooth during this sprint?\n Backlog setup and user stories. Making sure that our user stories were well refined. Assigning ourselves to user stories/tasks.    What learning during this Sprint can educate us for the upcoming Sprint?\n We need to correctly assign ourselves to tasks in the sprint, and make sure we are meeting regularly as an entire team.    4. What should we do differently in the next sprint? #  We need to refine our user stories, and make sure that they are from the perspective of the user, and that they show what the story should accomplish. We need to create more user stories that give shape to the bigger picture of the project.\n  How can the strength of the individual be utilized to resolve the issue?\n As Scrum Master, I\u0026rsquo;ll make it a point to read our user stories in the backlog every once in a while during a meeting.    What should be done often to prevent the issue from arising again?\n Once project development begins, it will be easier to identify user stories that aren\u0026rsquo;t specific enough.    Which actions must be implemented immediately for which you have the bandwidth and capability? Identify the 1 thing to be changed and explain how you could change it?\n During our meetings, we need to identify and create user stories. During our meetings, we will groom the backlog to make sure our user stories fit the bigger picture.    What strategies will work to complete the job?\n More backlog grooming, and more team communication.    Corrective actions #    What will you do in the upcoming Sprint to complete this action? How will you do it to make it a success?\n During meetings, we will make a point to read and refine our user stories and make sure we have enough tasks for the team.    When will you do it during the Sprint?\n The user story refinement needs to be done towards the beginning of the sprint.    Do you require help to complete this?\n Our team feels confident in our ability to better refine our backlog.    What additional support do you require?\n If our team needs additional support, online tutorials would help.    How will you let me know that you completed it?\n Our sprint backlog will be better refined, and documented on Flying Donut.    What will you do next after accomplishing this during the Sprint?\n We will have a good idea on how to setup the next sprint from what we learned during this one.    "}),a.add({id:69,href:'/notes/CS131/CS131-lecture-20201029/',title:"CS131-lecture-20201029",section:"CS131",content:"Reminder #  Quiz opens at fri and closes mon at midnight. 35 min to complete 17 questions.\nArchitecture cont. #  SOA: Service oriented architecture\n"}),a.add({id:70,href:'/notes/CS131/CS131-lecture-20201103/',title:"CS131-lecture-20201103",section:"CS131",content:"https://www.youtube.com/watch?v=UI6lqHOVHic\n"}),a.add({id:71,href:'/notes/CS131/CS131-lecture-20201105/',title:"CS131-lecture-20201105",section:"CS131",content:"A solution\n\u0026ldquo;Design specs\u0026rdquo; aren\u0026rsquo;t a part of the agile process, but this basic idea holds in sprint plannings.\n"}),a.add({id:72,href:'/notes/CS131/CS131-lecture-20201110/',title:"CS131-lecture-20201110",section:"CS131",content:"Correction from UML lectures #  Correction: there is no distinction between a filled in triangle between inheritance when inheriting from abstract or concrete.\nSOLID cont. #  Code Design #  Singleton pattern #  Factory pattern #  "}),a.add({id:73,href:'/notes/CS131/CS131-lecture-20201112/',title:"CS131-lecture-20201112",section:"CS131",content:"Architecture\n Application – layers – what do the layers do Where do the different components live Whats the interface between layers  Design principles\n Symptoms of bad design – rigid, fragile, easier to modify with hacks (viscosity) SOLID – employed by frameworks  Design patterns\n Used in frameworks – a lot employ the factory pattern May be used ourselves, iterator pattern? Singleton?  On tuesday we need a diagram of the application structure.\n"}),a.add({id:74,href:'/notes/CS131/CS131-lecture-20201119/',title:"CS131-lecture-20201119",section:"CS131",content:""}),a.add({id:75,href:'/notes/CS131/CS131-lecture-20201124/',title:"CS131-lecture-20201124",section:"CS131",content:"Final will be essay and same format as other exams. May be cumulative.\nProject management #  Verification and validation #  "}),a.add({id:76,href:'/notes/CS131/CS131-lecture-20201201/',title:"CS131-lecture-20201201",section:"CS131",content:""}),a.add({id:77,href:'/notes/CS131/CS131-lecture-20201203/',title:"CS131-lecture-20201203",section:"CS131",content:""}),a.add({id:78,href:'/notes/CS131/CS131-lecture-20201208/',title:"CS131-lecture-20201208",section:"CS131",content:"DevOps #  "}),a.add({id:79,href:'/notes/CS131/CS131-study-guide-1/',title:"CS131-study-guide-1",section:"CS131",content:"Study guide 1 #  Fall2020-Quiz 01 Study Guide_Revised.pdf\n1. Know one of the definitions of software engineering presented in class. #  2. Be able to identify an SDLC model given a diagram and/or it’s unique characteristics #  Waterfall #  The completed output from one phase is the necessary input to the next level.\nPrototype model #  Spiral model #  Adhoc model #  Agile #  3. Know the common SDLC phases and what’s is done in each #  4. Know a few pros and cons of each model #  5. Know some of the top agile techniques #  A daily standup is a timed event where the whole team gathers and stands together and checks in with each other.\nRetrospectives: at the end of a piece of work you will look back and try to improve.\n6. Know some characteristics of the Agile frameworks discussed in class #  Scrum #  Kanban #  XP #  7. Know the roles and responsibilities in Scrum. #  ##8. Know properties of a good requirement\n9. Know what each IEEE quality attribute means #   Note: omitted 10, 11, 12 from study guide\n 13. Know what a Use Case is (but we won’t have Use case description or diagrams until next quiz.) #  14. Know 3C’s #  15. Know user stories and how to break them up. #  "}),a.add({id:80,href:'/notes/CS131/CS131-study-guide-2/',title:"CS131-study-guide-2",section:"CS131",content:"Study guide 2 #  1. Know the main purpose and general process of conducting a Contextual Inquiry. #  2. Know what is a persona. #  3. Be able to describe the flow of an Activity Diagram. #  4. Know Scrum roles, artifacts and events. #    Understand their definition/purpose/responsibilities.\n  Know the Scrum lifecycle and order of events.\n  5. Know the 3C’s(Card, Conversation, Confirmation). #  6. Know what a Wireframe, Mockup and Storyboard are. #  7. Be able to enumerate three elements from the design, SAC, CAP and/or FeVERprinciples discussed in class (e.g. Simplicity, Contrast, Error Prevention \u0026amp; Recovery). #  8. Know what XML and JSON look like. #  9. Know what the 200, 404 and 500 HTTP status codes mean. #  10. Know the basic Git commands. #  "}),a.add({id:81,href:'/notes/CS131/CS131-study-guide-3/',title:"CS131-study-guide-3",section:"CS131",content:"Software Architecture #  1. Given an architecture diagram or description, identify the architecture style. #  2. Know 1 advantage and disadvantage of: #    Client-Server\n  Layered \u0026amp; Mutli-tiered\n  Model-View-Controller\n  Pipe and filter\n  3. Given a class diagram, answer some questions about relationships/properties. #  4. Name and explain(brief) some symptoms of poor design. #  5. Name and explain(brief) three general design principles. #  6. Given a design that breaks a SOLID principle, identify a solution. #  7. Define Coupling and Cohesion. Know the ideal levels of each (low coupling, high cohesion.) #  8. What and why of design patterns, in general. #  9. Design pattern types (Creational, Structural, Behavioral) #  10. A problem solved by a design pattern and how the design pattern provides a solution. For example, given a problem what design pattern(s) would be most appropriate. Only select from set of patterns covered in class. #  Singleton\nFactory\nComposite\nIterator\nObserver\nStrategy\n11. The difference between Static \u0026amp; Dynamic analysis #  e.g. SonarQube\n12. Strengths \u0026amp; Weaknesses of manual and automated static analyses. #  13. Identify/define measurements done by Static Analysis tool #  14. Define Refactoring \u0026amp; its purpose #  15. The refactoring process #  "}),a.add({id:82,href:'/notes/CS131/CS131-study-guide-4/',title:"CS131-study-guide-4",section:"CS131",content:"CS131-study-guide-1 #   Software engineering definitions SDLC lifecycles SDLC phases Pros and cons of each SDLC model Top agile techniques Agile frameworks, characteristics Scrum roles/responsibilities Requirements, properties of good requirements IEEE quality attributes Use case 3C\u0026rsquo;s User stories, how to break them up  CS131-study-guide-2 #   Contextual inquiry Persona Scrum roles, artifacts, events 3C\u0026rsquo;s Mockups, wireframe, story board Design elements, SAC, CAP FeVER XML, JSON 200, 404, 500 HTTP codes Git commands, basic  CS131-study-guide-3 #   Architecture style, monolith, client-server, layered, pipe/filter, event driven, model-view-controller, service based, microservice Advantages and disadvantages of architectures Class diagrams Symptoms of poor design Design principles, SOLID, KISS, YAGNI etc SOLID principles in detail Coupling and cohesion Why use design patterns? Design pattern types, creational/structural/behavioral What pattern provides the best solution? Static and dynamic analysis Refactoring  Final study guide #  Project Management #    Constraints   Triple Constraint Theory / Brooks Law   Quality/Testing #    Validation vs. verification   Terminology (defect, trigger, etc)   White Box vs. Black Box Testing   Given flow graph, define all possible paths 5. Types of tests (unit, system, etc.)\n  Partition input values   DevOps #  Covered in CS131-lecture-20201208\n DevOps Terminology (SLA, Operations, CI/CD etc.) How DevOps differs from traditional Operations/Maintenance phase DevOps components  "}),a.add({id:83,href:'/notes/CS133/CS133-lecture-20210125/',title:"CS133-lecture-20210125",section:"CS133",content:"Abstraction #   A generalization of something too complext to be dealt with in its entirety For humans not computers  It is a techinque we use to compensate for the relatively puny capacity of our brains There aren\u0026rsquo;t enough neurons (or connections) in our brain to process the rich detail around us during a single moment in time   Successful designers developer abstractions and hierarchies of abstractions for complex entities and move up and down this hierarchy with splendid ease.  Examples\n Anytime we see a simple interface covering a more complex system, you should think \u0026ldquo;abstraction\u0026rdquo;  A car is a very complex machine but the interface is simple A video game controller only has a few buttons, but underneath the controller is a complex mechanism A programming language can be fairly simple, but it translates the instructions you write into machine code, which is complex   Data types are abstractions  A linked list abstracts a collection of connected nodes A node abstracts the detail of a structure holding an instance of a primitive data type and a pointer   Functions are abstractions  A function abstracts the details of an algorithm, with a simple name e.g. fahrenheitToCentrigrade()    Form consistent abstractions\n Abstraction is the ability to engage with a concept while safely ignoring some of its details Base classes and interfaces are abstractions  i.e. UIComponent (or any GUI toolkit) Mammal (classic superclass when discussing OO) The interface defined by a class is an abstraction of what the class represents   You shouldn\u0026rsquo;t have to look at the method body code to understand what this method does  someObject.toString()    What is OO?\n Procedural paradigm:  Software is organized around the notion of procedures Procedural abstraction  Works as long as the data is simple   Adding data abstractions  Groups together the pieces of data that describe some entity Helps reduce the system\u0026rsquo;s complexity, such as Records and structures     Object oriented paradigm:  Organizing procedural abstractions in the context of data abstractions    OO paradigm\nAn approach to the solution of problems in which all computations are performed in the context of objects.\n The objects are instances of classes, which:  are data abstractions container procedural abstractions that operate on the objects   A running program can be seen as the collectino of objects collaborating to perform a given task  What is a class?\n A unit of abstraction in an OO program Represents similar objects  its instances   A kind of software module  Describes its instances' structure (properties) contains methods to implement their behavior   A blueprint  we can use this blueprint to create new objects   Are a container in which we define the properties and behaviors of the objects that will become our system faciliate the organization of concepts within the domain of the system We think of them as having responsibilities, but vlasses are an organization tool, its really the objects that have the responsibilitiy Classes are for the developer, they are the organizational bridge between our understanding of the software system and its runtime behavior.  Whats an object?\n A chunk of structured data in a running software system Has properties  represents its state   Has behavior  how it acts and reacts May simulate the behavior of an object in the real world     An object is a bundle of capabilities It is defined by what it can do  not how it does it   Practically, this means an object is defined by the messages that it can send and receieve The methods that handle these messages comprise the sole interface to the outside world Yes, objects have data, but the makeup of that data should be irrelevant Focus on what objects can do!  The prime directive\n Never ask an object for information that you need to do something; rather, ask the object that has the information to do the work for you!\n Modularity #   The goal of design is to partition the system into modules and assign responsibility among the components\n Many languages embrace the concept of a module\n Packages are named using the concatenation of the enclosing packagee names Types (classes) must declare what package they belong to  Otherwise they are placed in the \u0026ldquo;default\u0026rdquo; (unnamed) package   Packages name become part of the class name, for following class has the full name solarSystem.planets.earth.Human  package solarSystem.planets.earth; // a class defining species originating on Earth public class Human { // class declarations and methods }  The goal of design is to partition the system into modules and assign responsibility among the components in a way that  High cohesion within modules, and Loose coupling between modules   Modularity reduces the total complexity a programmer has to deal with at anyone time assuming:  Functions are assigned to modules in a way that groups similar functions together (separation of concerns), and There are small, simple, well-defined interfaces between modules (information hiding)   The principles of cohesion and coupling are probably the most important design principles for evaluating the effectiveness of a design  Encapsulation #  Access modifiers\n public  any class has acesss   protected  Only code in the package, or subclasses can access   (blank) default is called package protected private  Only code written in the class can access Inheritance still occurs    So do we need getters and setters in example 1? No. The class is really just a structure. If the class were imbued with some more behavior, then we should revisit this question.\nSo back to the point example, we are not hiding information at all. With the balance example, we agree there should be something hidden (the balance).\n"}),a.add({id:84,href:'/notes/CS133/CS133-lecture-20210208/',title:"CS133-lecture-20210208",section:"CS133",content:"UML #  Since there isn\u0026rsquo;t a way to pass a new DisplayPanel object into the constructor, it is a composition.\nExample CRC card building\nClean code #  Design principles #  \u0026ldquo;The Art of Clean Code\u0026rdquo; video #  Summary:\nVictor Rentea\u0026rsquo;s clean code video had a lot of amazing information for making sure that the code you write is considered \u0026ldquo;clean.\u0026rdquo; I think that clean code is a very important part of being a good programmer because it conveys the sense that you care about your team\u0026rsquo;s ability to read your code.\nMy biggest surprise after watching the video was that writing clean code has little to do with the actual formatting of your file. Instead, it has to do with the way you organize your file. Simple things like making sure that each function is only doing one thing, and not adding ambiguous words to your class/function names. Another big aspect of writing clean code has to do with the continual refactoring and maintenance of your code. To sum up Victor\u0026rsquo;s ideas: once your code works don\u0026rsquo;t consider yourself done. It takes an ongoing effort to maintain clean code because of the ever evolving nature of software engineering.\nAnother very interesting aspect of Victor\u0026rsquo;s talk had to do with comments. Comments can easily become redundant if the code you are writing follows good naming conventions and isn\u0026rsquo;t obfuscated in any way. Victor explains that you should always be able to express what your code is doing with code, and comments will fall out of sync with code when it is inevitably changed in the future.\nA good point Victor had was on the topic of OOP. It is a common misunderstanding that just because your class has private fields and public accessors that you are practicing OOP. He explained that most business logic will lend itself nicely to procedural code, and that you can successfully utilize OOP by putting short and simple procedural code inside what he called \u0026ldquo;logic containers.\u0026rdquo;\nOverall, all of his explanations were very good and should make a lot of sense to someone who strives to write clean code, myself included.\n"}),a.add({id:85,href:'/notes/CS133/CS133-lecture-20210210/',title:"CS133-lecture-20210210",section:"CS133",content:"Inheritance #  Replace inheritance with delegation #  Polymorphism #  Interfaces #  Extending multiple interfaces only applies to other interfaces\n"}),a.add({id:86,href:'/notes/CS133/CS133-lecture-20210215/',title:"CS133-lecture-20210215",section:"CS133",content:"CN1 #  Components #  Layout managers #  Building the GUI #  "}),a.add({id:87,href:'/notes/CS133/CS133-lecture-20210217/',title:"CS133-lecture-20210217",section:"CS133",content:"Event driven #  laidOut() is called once the component is fully \u0026ldquo;laid out\u0026rdquo; (once it\u0026rsquo;s drawn after the show() method is called).\nCommand design pattern #  Observer design pattern #  The old way of doing it: #  "}),a.add({id:88,href:'/notes/CS133/CS133-lecture-20210227/',title:"CS133-lecture-20210227",section:"CS133",content:"Design Patterns #  Strategy pattern #  An example in codename one\nComposite pattern #  An example of the \u0026ldquo;wrong way to do things\u0026rdquo;\nA refactored way:\nDecorator pattern #  As a reminder, this is not the same as the composite pattern:\nState pattern #  Pree\u0026rsquo;s metapatterns #  Concerning the state pattern vs the strategy pattern\nSingleton pattern #  Note the synchronize keyword in the method header, this makes the method thread safe.\nFactory pattern #  Abstract factory pattern #  "}),a.add({id:89,href:'/notes/CS133/CS133-lecture-20210301/',title:"CS133-lecture-20210301",section:"CS133",content:"Visitor pattern #  This becomes hard to maintain, and violates the open closed principle.\nThe concrete visitors are the extensible operations we can perform to add more features to the concrete elements.\nWhy the visitor pattern? #  Single vs double dispatch (polymorphism). Java supports single dispatch out of the box, but double isn\u0026rsquo;t supported out of the box.\nAnimal dog = new Dog(); Animal cat = new Cat(); Double dispatch is not openly supported, in other words you can\u0026rsquo;t have unique interactions between 2 different classes dynamically.\nSomething like\ndog.makeSound(cat); Gives a compilation because they are of Animal type.\nFunctional programming languages like scheme can support double (and multi) dispatch.  An example with credit cards #  This table displays the interaction between 2 objects, the credit card and the offer type.\npublic interface CreditCard { String getName(); accept(OfferVisitor v); } public class BronzeCreditCard implements CreditCard { getName() {return \u0026#34;Bronze\u0026#34;;} void accept(OfferVisitor v) { v.visitBronzeCreditCard(this); } } public interface OfferVisitor { void visitBronzeCreditCard(BronzeCreditCard bronze); } public class GasOfferVisitor implements OfferVisitor { void visitBronzeCreditCard(BronzeCreditCard bronze) { // code to compute cashback for a bronze card buying gas  } } public class HotelOfferVisitor implements OfferVisitor { void visitBronzeCreditCard(BronzeCreditCard bronze) { // code to compute cashback for a bronze card paying for a hotel  } } We can continue to add more offers without having to rewrite anything in our card classes.\nSo this is how its used:\nBronzeCreditCard bronze = new BronzeCreditCard(); HotelOfferVisitor hotelVisitor = new HotelOfferVisitor(); GasOfferVisitor gasVisitor = new GasOfferVisitor(); // the interaction between a bronze card and a hotel offer bronze.accept(hotelVisitor); // the interaction between a bronze card and a gas offer bronze.accept(gasVisitor); The visitor pattern is usually going to be used if your class structure isn\u0026rsquo;t changed often, but the operations performed on the structure change quite a bit. Can be used when traversing a structure of items and needing to perform different operations on each node (compilers).\n"}),a.add({id:90,href:'/notes/CS133/CS133-lecture-20210307/',title:"CS133-lecture-20210307",section:"CS133",content:"Make your code suck less #  12. Schedule time to lower technical debt #  11. Favor high cohesion #  10. Favor loosing coupling #  9. Program with intention #  8. Avoid primitive obsession #  7. Prefer clear code over clever code #  6. Apply Zinsser\u0026rsquo;s principle on writing #  5. Comment why, not what #  4. Avoid long methods – Apply SLAP #  3. Give good meaningful names #  2. Do tactical code reviews #  Never say whats wrong, always say what can be better.\n1. Reduce state and state mutation #  Start with methods and the fields (and getters/setters) will fall into place.\nRecap #  "}),a.add({id:91,href:'/notes/CS133/CS133-lecture-20210310/',title:"CS133-lecture-20210310",section:"CS133",content:"Basic color theory #  RGB is an additive color model.\nCMYK is a subtractive color model.\nRefresh rates, frame buffers, v-sync #  Video game aesthetics #  "}),a.add({id:92,href:'/notes/CS133/CS133-lecture-20210314/',title:"CS133-lecture-20210314",section:"CS133",content:"GUI Basics #  CN1 Component example #  In DigitalClockComponent:\nThen in AppMain:\n"}),a.add({id:93,href:'/notes/CS133/CS133-lecture-20210407/',title:"CS133-lecture-20210407",section:"CS133",content:"Graphics #  Transformations #  Transformations using matrices #  Applying transformation with matrices #  Active matrix areas #  Concatenation of transformations #  Images within 2D games #  Image characteristics #  Image repository #  Alpha blending #  Alpha compositing #  Additive blending #  "}),a.add({id:94,href:'/notes/CS135/CS135-hw-20210203/',title:"CS135-hw-20210203",section:"CS135",content:"FSM #  Alphabets: {a, b} or {0, 1}\n  Strings which begin and end with a different letter\n#alphabet a b #states 0 aa ab ba bb #initial 0 #accepting ab ba #transitions 0:a\u0026gt;aa 0:b\u0026gt;bb aa:a\u0026gt;aa aa:b\u0026gt;ab bb:b\u0026gt;bb bb:a\u0026gt;ba ab:b\u0026gt;ab ab:a\u0026gt;aa ba:a\u0026gt;ba ba:b\u0026gt;bb   Strings with at least 2 occurences of ab\n#alphabet a b #states 0 s1 1 s2 2 #initial 0 #accepting 2 #transitions 0:a\u0026gt;s1 0:b\u0026gt;0 s1:a\u0026gt;s1 s1:b\u0026gt;1 1:a\u0026gt;s2 1:b\u0026gt;1 s2:a\u0026gt;s2 s2:b\u0026gt;2 2:a\u0026gt;2 2:b\u0026gt;2   Strings with exactly one 0 and at least one 1\n#alphabet 0 1 #states s0 onezero oneone good garb #initial s0 #accepting good #transitions s0:0\u0026gt;onezero s0:1\u0026gt;oneone onezero:1\u0026gt;good onezero:0\u0026gt;garb oneone:0\u0026gt;good oneone:1\u0026gt;oneone good:0\u0026gt;garb good:1\u0026gt;good garb:0\u0026gt;garb garb:1\u0026gt;garb   Strings that container ab\n#alphabet a b #states s0 s1 good #initial s0 #accepting good #transitions s0:a\u0026gt;s1 s0:b\u0026gt;s0 s1:b\u0026gt;good s1:a\u0026gt;s1 good:a\u0026gt;good good:b\u0026gt;good   Strings that start with ab\n#alphabet a b #states s0 s1 good garb #initial s0 #accepting good #transitions s0:a\u0026gt;s1 s0:b\u0026gt;garb s1:a\u0026gt;garb s1:b\u0026gt;good good:a\u0026gt;good good:b\u0026gt;good garb:a\u0026gt;garb garb:b\u0026gt;garb   Draw a deterministic FA (a DFA) using the alphabet {0,1} that recognizes all strings that either begin or end with three 0s (or both).\n#alphabet 0 1 #states s0 s1 s2 good #initial s0 #accepting good #transitions s0:0\u0026gt;s1 s0:1\u0026gt;s0 s1:0\u0026gt;s2 s1:1\u0026gt;s0 s2:0\u0026gt;good s2:1\u0026gt;s0 good:0\u0026gt;good good:1\u0026gt;s0   RE #  Alphabets are {a,b} and {0,1}\n Strings which begin and end with the same letter a(a+b)*a + b(a+b)*b Strings with exactly two occurences of ab a*(abab)b* + a*(abab)b* + b*(abab)a* + b*(abab)b* (a* + b*)(abab)(a* + b*) Strings with at most two occurences of ab ``  "}),a.add({id:95,href:'/notes/CS135/CS135-hw-20210302/',title:"CS135-hw-20210302",section:"CS135",content:"Old MM2 hw #  1 Write a recursive Racket function \u0026ldquo;sum-alternate\u0026rdquo; that takes a positive integer x as a parameter. The function should return the sum of all the integers x, x-2, x-4, x-6, etc, as long as the numbers are positive. For example, (sum-alternate 5) should evaluate to 5+3+1, and (sum-alternate 6) should evaluate to 6+4+2.\n(define (sum-acc sum acc) (if (\u0026lt;= sum 0) acc (sum-acc (- sum 2) (+ sum acc)))) (define (sum-alternate sum) (sum-acc sum 0))   2 Write a recursive Racket function \u0026ldquo;sum\u0026rdquo; that takes two integers as parameters, each greater or equal to zero, and evaluates to their sum. In this problem, you must use the built-in functions add1 and sub1 and may not use the built-in functions \u0026ldquo;+\u0026rdquo; or \u0026ldquo;-\u0026rdquo;. For example, (sum 2 3) should evaluate to 5. Note: (add1 5) evaluates to 6 and (sub1 4) evaluates to 3. Hint: like you saw in the \u0026ldquo;append\u0026rdquo; lecture, treat one of the parameters as the size of the problem and recurse until it reaches your base case.\n(define (sum-acc a b acc) (cond ((\u0026gt; a 0) (sum-acc (sub1 a) b (add1 acc))) ((\u0026gt; b 0) (sum-acc a (sub1 b) (add1 acc))) (else acc))) (define (sum a b) (sum-acc a b 0))   3 Write a recursive Racket function \u0026ldquo;remove-char\u0026rdquo; that takes two string parameters, s and c, and evaluates to string s with all occurrences of c removed. The string c is guaranteed to be a length-1 string; in other words a single character string. For example (remove-char \u0026quot;abc\u0026quot; \u0026quot;b\u0026quot;) should evaluate to \u0026ldquo;ac\u0026rdquo;. Here is pseudocode that you could implement.\nif s is empty return s else if (c = first char of s) return remove-char(all but first char of s) else return first char of s concatenated with remove-char(all but first char of s) (define (remove-char s c) (cond ((string=? s \u0026#34;\u0026#34;) s) ((string=? c (substring s 0 1)) (remove-char (substring s 1) c)) (else (string-append (substring s 0 1) (remove-char (substring s 1) c)))))   4 Write a recursive Racket function \u0026ldquo;all-same\u0026rdquo; that takes a string as a parameter and evaluates to true iff every character in the string is the same. Note: A string of length 0 or 1 should also evaluate to true.\n(define (all-same s) (cond ((\u0026lt;= (string-length s) 1) #t) ((string=? (substring s 0 1) (substring s 1 2)) (all-same (substring s 1))) (else #f)))   "}),a.add({id:96,href:'/notes/CS135/CS135-lecture-20210126/',title:"CS135-lecture-20210126",section:"CS135",content:"http://athena.ecs.csus.edu/~mei/135/index.html\nCT = Computing theory\nResources on the Prof\u0026rsquo;s website for Set Theory to review\nThis is not correct:\n"}),a.add({id:97,href:'/notes/CS135/CS135-lecture-20210129/',title:"CS135-lecture-20210129",section:"CS135",content:"dfa.pdf\n"}),a.add({id:98,href:'/notes/CS135/CS135-lecture-20210201/',title:"CS135-lecture-20210201",section:"CS135",content:"http://krovetz.net/135/module_reg/fa_design.html\nThis FSM keeps track of whether there are an even or odd number of a\u0026rsquo;s.\n#alphabet a b #states even odd #initial even #accepting odd #transitions even:a\u0026gt;odd even:b\u0026gt;even odd:a\u0026gt;even odd:b\u0026gt;odd FSM Design advice #   Have a meaning for each state, its the only memory a FA has First write just the part that accepts good strings Make sure your FA is legal. Double check that every state has an arrow out for each alphabet symbol and that their\u0026rsquo;s a start state Try to break your solutions. Look for strings it accepts that it shouldn\u0026rsquo;t. Look for strings that it rejects that it shouldn\u0026rsquo;t.   Write a FSM for the language: L = {abba}\nThis is the \u0026ldquo;write the part that accepts the good strings\u0026rdquo;.\nWe can start to figure out what we don\u0026rsquo;t want to initially accept in the string, \u0026ldquo;starting with a b\u0026rdquo;\n#alphabet a b #states 0 1 2 3 4 5 #initial 0 #accepting 4 #transitions 0:a\u0026gt;1 0:b\u0026gt;5 1:b\u0026gt;2 1:a\u0026gt;5 2:b\u0026gt;3 2:a\u0026gt;5 3:a\u0026gt;4 3:b\u0026gt;5 4:a\u0026gt;5 4:b\u0026gt;5 5:a\u0026gt;5 5:b\u0026gt;5  Write a FSM for the language {w in {a,b}*: w has at least two a's}\n#alphabet a b #states 0 1 2 #initial 0 #accepting 2 #transitions 0:a\u0026gt;1 0:b\u0026gt;0 1:a\u0026gt;2 1:b\u0026gt;1 2:a\u0026gt;2 2:b\u0026gt;2 In steps:\n Write a FSM for the language {w in {a,b}* : w begins and ends in the same letter}\n#alphabet a b #states 0 aa ab ba bb #initial 0 #accepting aa bb #transitions 0:a\u0026gt;aa 0:b\u0026gt;bb aa:a\u0026gt;aa aa:b\u0026gt;ab bb:b\u0026gt;bb bb:a\u0026gt;ba ab:b\u0026gt;ab ab:a\u0026gt;aa ba:a\u0026gt;ba ba:b\u0026gt;bb In Steps:\n Write a FSM for the language: {a^n b^m : n is odd and m is even}\n#alphabet a b #states 0 ae ao be bo garb #initial 0 #accepting ao be #transitions 0:a\u0026gt;ao 0:b\u0026gt;garb ao:a\u0026gt;ae ae:a\u0026gt;ao ae:b\u0026gt;garb ao:b\u0026gt;bo bo:b\u0026gt;be be:b\u0026gt;bo be:a\u0026gt;garb bo:a\u0026gt;garb garb:a\u0026gt;garb garb:b\u0026gt;garb In steps:\nNow this accepts all the good strings, lets make it legal.\nWe can optimize this by making ae the initial state:\n"}),a.add({id:99,href:'/notes/CS135/CS135-lecture-20210204/',title:"CS135-lecture-20210204",section:"CS135",content:"re.pdf\n"}),a.add({id:100,href:'/notes/CS135/CS135-lecture-20210205/',title:"CS135-lecture-20210205",section:"CS135",content:"DFA, RE, and NFA have equal expressive power.\n Every DFA can be converted into an equivalent RE Every RE can be converted into an equivalent NFA Every NFA can be converted into an equivalent DFA  Today we will take a NFA and convert it into a DFA.\nabba will leave you in states 1 and 3.\nOur NFA:\n#states empty 13 2 23 3 123 #initial 13 #accepting 13 123 #alphabet a b #transitions 13:a\u0026gt;13 13:b\u0026gt;2 2:a\u0026gt;23 2:b\u0026gt;3 23:a\u0026gt;123 23:b\u0026gt;3 3:a\u0026gt;13 3:b\u0026gt;empty 123:a\u0026gt;123 123:b\u0026gt;23 empty:a\u0026gt;empty empty:b\u0026gt;empty This is now a legal DFA, except the accept state. So, any accept state in the NFA is also a DFA accept state:\nLegal!\n"}),a.add({id:101,href:'/notes/CS135/CS135-lecture-20210209/',title:"CS135-lecture-20210209",section:"CS135",content:"How to show what a finite atomata can\u0026rsquo;t do #  Pumping Lemma for regular languages #  Let   \\(M\\)  be a DFA with  \\(p\\)  states. Let  \\(s \\in L(M)\\)  , and  \\(|s| \\geq p\\)  , \u0026ldquo;the length of  \\(s\\)  is greater than or equal to the number of states.\u0026rdquo;\nAt one point we reach a state that is going to be visited twice first, we can call this \u0026ldquo;the first state that gets repeated.\u0026rdquo;\nAt one point we get back to this state.\nThe part of the string that takes us to the twice-visited state can be called  \\(x\\)  , the second part that returns to the twice-visited state can be called  \\(y\\)  , and the rest that goes to the accept can be called  \\(z\\)  .\nSo,  \\(s\\)  .\nObserve,\n  \\(|xy| \\leq p\\)  , the length of  \\(x\\)  and  \\(y\\)  is less than the amount of states. We can\u0026rsquo;t avoid a repeat longer.  \\(|y| \u0026gt; 0\\)  , the length of  \\(y\\)  is not empty.  \\(xy^i z \\in L(m)\\)  , for all  \\(i \\geq 0\\)  . We can traverse the  \\(y\\)  string as many times, and as long as its followed by  \\(z\\)  it\u0026rsquo;ll take us to an accept state.  A theorem for pumping lemma for regular languages #  If  \\(L\\)  is a regular language, then there is a positive integer  \\(p\\)  such that any string  \\(s \\in L\\)  and has length  \\(|s| \\geq p\\)  , can be broken into  \\(s\\)  where\n \\[\\begin{aligned} |y| \u0026gt; 0 \\\\ |xy| \\leq p \\\\ xyz \\in L \\end{aligned}\\]  Note: If you know  \\(s\\)  is in  \\(L\\)  and at least  \\(p\\)  long, you don’t get to pick  \\(xyz\\)  . You only get to claim they exist.\nLanguages that aren\u0026rsquo;t regular #   \\(L = \\{0^n1^n: 0 \\leq n \\leq 3\\}\\)  .\nThis is a legal NFA, not a DFA though, so:\nSince the DFA recognizes this language, it proves that its a regular language.\nIf  \\(n\\)  doesn\u0026rsquo;t have an upper limit, i.e.  \\(L\\)  then we cannot say that this is a regular language. Finite state machines cannot do unbounded counting.\nProof template #  Theorem:  \\(L\\)  is not regular.\nProof:\nFor purposes of contradicition assume  \\(L\\)  is regular. Because  \\(L\\)  is regular there must be a pumping length  \\(p\\)  . Consider the string ???? which is in  \\(L\\)  . The pumping lemma says there exists  \\(xyz\\)  . This contradicts that the pumping lemma says ( \\(xy\\)  or  \\(xyyz\\)  ) is in  \\(L\\)  .\nYou must pick a string to replace the ????.\nA hint that often works: pick your string so that the first  \\(p\\)  chars are all the same.\n So in our language  \\(L\\)  Theorem:  \\(L\\)  is not regular.\nProof:\nFor purposes of contradicition assume  \\(L\\)  is regular. Because  \\(L\\)  is regular there must be a pumping length  \\(p\\)  . Consider the string  \\(0^p1^p\\)  which is in  \\(L\\)  . The pumping lemma says there exists  \\(xyz\\)  . Because  \\(|xy| \\leq p\\)  ,  \\(x\\)  and  \\(y\\)  are all 0s. Because  \\(|y| \u0026gt; 0\\)  ,  \\(xyyz\\)  will have more 0s than 1s, and so is not in  \\(L\\)  . This contradicts that the pumping lemma says  \\(xyyz\\)  is in  \\(L\\)  .\n"}),a.add({id:102,href:'/notes/CS135/CS135-lecture-20210216/',title:"CS135-lecture-20210216",section:"CS135",content:"Regular languages #  Any language specifiable by regular expression or finite automata.\nRE to NFA #  Building blocks\nExample #  (0+1)*1\n"}),a.add({id:103,href:'/notes/CS135/CS135-lecture-20210217/',title:"CS135-lecture-20210217",section:"CS135",content:"Example proofs for pumping lemma #  1 #  Let   \\(L\\)  be the set of all strings with an equal number of 0 and 1 over the alphabet {0,1}. i.e. { \\(\\lambda\\)  , 01, 10, 0011, 0101, 0110, 1001 \u0026hellip;}\nTheorem:  \\(L\\)  is not regular.\nProof:\nFor purposes of contradicition assume  \\(L\\)  is regular. Because  \\(L\\)  is regular there must be a pumping length  \\(p\\)  . Consider the string  \\(0^p 1^p\\)  which is in  \\(L\\)  . The pumping lemma says there exists  \\(xyz\\)  . This means that  \\(x\\)  and  \\(y\\)  are all 0, since  \\(y\\)  is not empty  \\(xz\\)  fill have fewer 0s than  \\(xyz\\)  , but the same number of 1s. This means that  \\(xz\\)  has a different number of 0s than 1s, and is therefore not in  \\(L\\)  . This contradicts that the pumping lemma says  \\(xy\\)  is in  \\(L\\)  .\n2 #  Let  \\(L\\)  be the set of all palindroms over alphabet {0,1}, i.e. { \\(\\lambda\\)  , 0, 1, 00, 11, 000, 010, 101, 111, 0000, \u0026hellip;}\nTheorem:  \\(L\\)  is not regular.\nProof:\nFor purposes of contradicition assume  \\(L\\)  is regular. Because  \\(L\\)  is regular there must be a pumping length  \\(p\\)  . Consider the string  \\(0^p 1 0^p\\)  which is in  \\(L\\)  . The pumping lemma says there exists  \\(xyz\\)  . Since  \\(|xy| \\leq p\\)  ,  \\(x\\)  and  \\(y\\)  are all 0s. Since  \\(y\\)  is not empty,  \\(xyyz\\)  will cause more 0s before the 1 than after. The result is not a palindrome so  \\(xyyz\\)  is not in  \\(L\\)  . This contradicts that the pumping lemma says  \\(xyyz\\)  is in  \\(L\\)  .\n"}),a.add({id:104,href:'/notes/CS135/CS135-lecture-20210218/',title:"CS135-lecture-20210218",section:"CS135",content:"Immutability #  Strings in Java are an example of immutability.\nSomething like\ns = s + \u0026#34;abc\u0026#34;; Actually creates a new object with the 2 new strings, and the reference to s is updated, but actual strings are immutable.\nLists #  In Java a popular List class is LinkedList.\nA change to either a or b will change both!\na.add(1, 5); b.get(1); Lets make an immutable List (pseudo): #  a = new List b = a.cons(1) cons stands for \u0026ldquo;construct new list from old.\u0026rdquo;\nc = b.cons(2) This \u0026ldquo;creates a new view\u0026rdquo; of the list, without disturbing any older views of the list.\nd = b.cons(3) So a = [], b = [1], c = [2,1], d = [3,1].\ne = d.rest() rest gives back the list without the first element, so e = [1]\nFor efficiency and to keep views from changing, changes only happen at the front of the list.\n Implementing it #  Racket #  https://docs.racket-lang.org/guide/to-scheme.html\nTest using www.wescheme.org/openEditor\n empty is a constant for the empty list cons is the function that adds to the beginning of a list. (cons elem list) elem is element to be added, list is the list to be added to (rest nonemptylist) returns the list of everything but the first element (first nonemptylist) returns the first element of the list (empty? list) returns true or false (because the ? \u0026ldquo;huh?\u0026quot;) if the list is empty (list 1 2 3) creates a list with elements 1 2 3, can also be alised as '(1 2 3)  empty -- const for the empty list (cons elem list) (rest nonemptylist) (first nonemptylist) (empty? list) (list 1 2 3) \u0026#39;(1 2 3)(empty? empty) ; true (empty? (list 1 2 3)) ; false (cons 3 empty) ; (list 3) (cons 2 (cons 3 empty) ; (list 2 3) (cons 1 (cons 2 (cons 3 empty))) ; (list 1 2 3) \u0026#39;(1 2 3) ; (list 1 2 3) (first \u0026#39;(1 2 3)) ; 1 (rest \u0026#39;(1 2 3)) ; (list 2 3) The if construct in Racket:\n(if boolexpr trueexpr falseexpr)An example to return the length of a list: #  Some pseudo for recursive functions:\nif (very small) solve directly else make recursive call (use smaller-solver) For our problem:\nif (empty list) return 0 else return 1 + listlen(list without front) In racket:\n(define (listlen xs) (if (empty? xs) 0 (+ 1 (listlen (rest xs)))))Note\n Traditional in Racket to pass the list name as plural: xs There are no returns in Racket, everything is an expression  We can then run this function via the interactions panel\n(listlen empty) ; 0 (listlen \u0026#39;(1)) ; 1 (listlen \u0026#39;(1 1)) ; 2 "}),a.add({id:105,href:'/notes/CS135/CS135-lecture-20210225/',title:"CS135-lecture-20210225",section:"CS135",content:"Tail recursion and accumulators #  Tail recursion #  Claim: recursive overhead is expensive.\nNot always the case.\nFor example:\nWe have a function foo(x) that takes a parameter x.\nfoo(x): if (x == 0) return answer else // do stuff, then make recursive call return foo(x - 1) The value of x is being decremented, and being passed in as the new x in the next call. Once the base case is returned there isn\u0026rsquo;t any more work that needs to be done. So we can rewrite this function mechanically as a loop:\nfoo(x): label if (x == 0) return answer else // do stuff, but instead of return // we update our variable, and goto label x = x - 1 goto label This behaves exactly as the original, in terms of computational steps, but we\u0026rsquo;ve eliminated the function call so the overhead goes away. This only works if the recursive call is in tail position, which is a recursive call at the very end of the work that has no work to do after the recursive call. So you get the performance of a loop, but with the written style of recursive code.\nSo lets do the factorial:\nfact(x): if (x == 0) return 1 else return x * fact(x - 1) So we should assume that the compiler should be able to tail call optimize this code. However, there is a multiplication that has to occur after the function call, so it cannot.\nSo we can fix this by getting rid of the multiplication by x. If there is multiplication that needs to happen, it has to happen before the recursive call. We can do this using accumulators.\nAn example accumulator:\nacc = 1 while (x \u0026gt; 0) acc = acc * x x = x - 1 return acc So we can use that same idea to modify our fact function:\nfact(x, acc): if (x == 0) return acc else return fact(x - 1, x * acc) Now the last function call is in tail position. There is no computation that happens after the recursive call.\nInvariant:   \\(\\text{answer} = x! \\cdot \\text{ accumulator } \\)     x acc     4 1   3 4   2 12   1 24   0 24    Proof that this works using C #  Using C code and looking at its compiled assembly:\ngcd.c:\nWe can compile this with optimization level 1:\ngcc -01 gcd.c -S Lets do optimization level 2 (adds tail call optimization):\ngcc -01 gcd.c -S2 This is now a tighter loop instead of a recursive call. It also inline calls the helper function to fact:\nThe iterative version is identical to the inline factorial version:\nThe gcd function is also a tail recursive function. It could be written iterative however:\nint gcd_iter(int x, int y) { while (y != 0) { int t = y; y = x % y; x = t; } return x; } This is arguably a more complex version, compared to the recursive version. Lets look at the compiled assembly code:\nIt has a loop, but no recursive calls. The iterative version:\nIt also has the same length loop, so they are identical, due to the tail call optimization.\nFactorial method implementation in Racket #  Here is a tail recursive version.\n(define (fact-helper x acc) (if (= x 0) acc (fact-helper (- x 1) (* x acc))))To test this:\n(fact-helper 4 1) ; 24 We can also define a nicer method for the user:\n(define (fact x) (fact-helper x))So now we can call it like this:\n(fact 4) ; 24 "}),a.add({id:106,href:'/notes/CS135/CS135-lecture-20210227/',title:"CS135-lecture-20210227",section:"CS135",content:"Functional Programming #  Other functions may write to this.sum, so this could be incorrect in the future.\nAny loop can be turned into a recursively structured function.\nExample of pow #  int pow(int x, int y) if (very small) solve directly else solve with smaller_pow So when is exponentiation very small? This is the base case, where y = 0.\nint pow(int x, int y) if (y == 0) return 1 else solve with smaller_pow Now we need to figure out the else branch, we know that x^y = x^(y-1) * x.\nint pow(int x, int y) if (y == 0) return 1 else return x * pow(x, y - 1) Intro to Racket #  racket-lang.org\nwescheme.org\nRacket is a form of scheme, and scheme is a form of Lisp.\nA method definition (which just calls the built-in sting-append).\n(define (my-concat s1 s2) (string-append s1 s2))So we can call this function like:\n(my-concat \u0026#34;abc\u0026#34; \u0026#34;def\u0026#34;) ; \u0026#34;abcdef\u0026#34; Lets define a strlen function:\n(define (strlen s) (if (= 0 (string-length s)) 0 (+ 1 (strlen (substring s 1)))))Yes, this is calling a built in string length function, but its just displaying how a recursively called function is setup.\n(strlen \u0026#34;\u0026#34;) ; 0 (strlen \u0026#34;a\u0026#34;) ; 1 (strlen \u0026#34;abc\u0026#34;) ; 3 Racket non-list examples #  Lists are used a lot as a primary data structure in lisps.\nA factorial function #  (define (fact n) (if (= n 0) 1 (* n (fact (-n 1)))))(fact 0) ; 1 (fact 1) ; 1 (fact 2) ; 2 (fact 10) ; 3628800 Fibonacci numbers #  We can utilize the cond function, used like this:\n(cond (bool expr) (bool expr) ... (else expr))This is equivalent to a nested if. cond goes one by one and checks each boolean expression, and if true it replaces with expr. The ... means that there can be any number of expressions to check, this is like a switch. As soon as it finds the first true it executes the replacement then ends. At least one thing has to evaluate to true otherwise you\u0026rsquo;ll get a runtime error, so we can end with an else.\n(define (fib n) (cond ((= n 0) 1) ((= n 1) 1) (else (+ (fib (- n 1)) (fib (- n 2))))))So we can test this:\n(fib 0) ; 1 (fib 1) ; 1 (fib 2) ; 2 (fib 3) ; 3 (fib 4) ; 5 String reverse #  If given \u0026quot;abc\u0026quot;, it should go to \u0026quot;cba\u0026quot;. To test for string equality we can use built in string=?, \u0026ldquo;string equal huh?\u0026rdquo;. We can use substring to cut the string down, and string-append to append. \u0026quot;cba\u0026quot; = \u0026quot;cb\u0026quot; + \u0026quot;a\u0026quot;\n(define (strev s) (if (string=? s \u0026#34;\u0026#34;) s (string-append (strev (substring s 1)) (substring s 0 1))))We can test now:\n(strev \u0026#34;\u0026#34;) ; \u0026#34;\u0026#34; (strev \u0026#34;a\u0026#34;) ; \u0026#34;a\u0026#34; (strev \u0026#34;ab\u0026#34;) ; \u0026#34;ba\u0026#34; (strev \u0026#34;abc\u0026#34;) ; \u0026#34;cba\u0026#34; There is a built in called check-expect, which we can use to test.\n(check-expect (strev \u0026#34;abc\u0026#34;) \u0026#34;cba\u0026#34;)When you run this, if you see nothing then it works correctly. If it fails you will see the explanation in the output.\nwriteSequence problem from practiceit #  Note that if you call the sequence on 8, the center is the 6 sequence, then you divide 8 but 2 and round up to get the outside number. We can explicitly change the number to a string with number-\u0026gt;string.\n(define (ws n) (cond ((= n 1) \u0026#34;1\u0026#34;) ((= n 2) \u0026#34;11\u0026#34;) (else (string-append (number-\u0026gt;string (ceiling (/ n 2))) (ws (- n 2)) (number-\u0026gt;string (ceiling (- n 2)))))))So we can test this to see if its working:\n(ws 1) ; \u0026#34;1\u0026#34; (ws 2) ; \u0026#34;11\u0026#34; (ws 3) ; \u0026#34;212\u0026#34; (ws 4) ; \u0026#34;2112\u0026#34; Racket under the hood #  Whenever Racket encounters a define in its top down compilation, it stores it in a table. When it calls a function call, it can be thought of as a constant replacing of definition names with its implementation. So a functions name gets replaced by its value. This is easy to think about with single value definitions, like (define n 1), but when a function is defined all the parameters are replaced in the replacement as well.\nSo if you have this definition:\n(define (listlen xs) (if (empty? xs) 0 (= 1 ( listlen (rest xs)))))And you call the function like:\n(listlen \u0026#39;(1 2 3))listlen is actually being replaced with:\n(if (empty? \u0026#39;(1 2 3)) 0 (+ 1 (listlen (rest \u0026#39;(1 2 3)))))Which is then replaced by\n(+ 1 (listlen (rest \u0026#39;(1 2 3))))(+ 1 (listlen `(2 3)))and so forth.\nDebugging in DrRacket #  We can click step in DrRacket to open up a stepper window, that highlights the next substitution that will happen.\nThis continues on until the base case\u0026hellip;\n"}),a.add({id:107,href:'/notes/CS135/CS135-lecture-20210307/',title:"CS135-lecture-20210307",section:"CS135",content:"Mergesort in Racket #  Mergesort breaks the list in half and sorts each half recursively.\nSome pseudo:\nms(list) front = front half of list back = back half of list ms(front) ms(back) return merge(front, back) In racket, there is a function called drop that takes a list and a number. It drops the numbers off the list. There is also take, that takes the first number of elements of the list and returns them.\n(define list \u0026#39;(1 2 3 4 5 6)) ; helper definition (drop list 2) ; \u0026#39;(3 4 5 6) (take list 2) ; \u0026#39;(1 2) (drop list (quotient (length list) 2)) ; drops the first half of the list So we can start our mergesort definition:\n(define (ms xs) (if (\u0026lt; (length xs) 2) xs (merge (ms (take xs (quotient (length xs) 2))) (ms (drop xs (quotient (length xs) 2))))))However, we haven\u0026rsquo;t defined merge yet, so:\n(define (merge xs ys) (cond ((empty? xs) ys) ((empty? ys) xs) ((\u0026lt; (first xs) (first ys)) (cons (first xs) (merge (rest xs) ys))) (else (cons (first ys) (merge (rest ys) xs)))))So we can test this:\n(ms \u0026#39;(5 3 6 2 7 1 4)) ; \u0026#39;(1 2 3 4 5 6) Higher-order functions #  Treat functions as first class data. We\u0026rsquo;re going to allow functions to be passed as parameters. We\u0026rsquo;ll consider 3 functions that take functions as parameters.\n (map f xs) – applies f to each element of xs, and builds a list from the results (filter f xs) – f is a boolean, it applies f to each element of xs and filters out any element for which f is false (foldl f acc xs) – abstracts the acumulator process we did earlier. It applies f to each value of xs and integrates that value into the accumulator acc. The l in foldl means that it is going from left to right. foldl is   \\( O(n) \\)  .  For example, to sum the elements of a list using foldl:\n(foldl + 0 xs) ; 10 Examples using map:\n(map add1 \u0026#39;(1 2 3 4)) ; \u0026#39;(2 3 4 5) We can use our own functions in map\n(define (double x) (+ x x))(map double \u0026#39;(1 2 3 4)) ; \u0026#39;(2 4 6 8) Lets take a look at filter:\n(filter even? \u0026#39;(1 2 3 4 5)) ; \u0026#39;(2 4) Designing filter #  The base case is the empty list, which returns back the empty list. When we are calling the function recursively, we will have to use rest.\nHeres a screenshot using even? as f:\n; my-filter applies f to each element of xs ; and builds a list from those that make f true ; f: A --\u0026gt; boolean ; xs: list of A (define (my-filter f xs) (if (empty? xs) empty (if (f (first xs)) ; remember f is a function (cons (first xs) (my-filter f (rest xs))) (my-filter f (rest xs)))))So:\n(my-filter even? \u0026#39;(1 2 3 4 5)) ; \u0026#39;(2 4) Designing foldl #  Recall\n(foldl + 0 \u0026#39;(1 2 3 4)) ; 10 ; f: (A, B) --\u0026gt; A ; acc: A ; xs: list of B (define (my-foldl f acc xs) (if (empty? xs) acc (my-foldl f (f acc (first xs)) (rest xs))))So lets test it:\n(my-foldl + 0 \u0026#39;(1 2 3 4)) ; 10 Lambda functions #  Lambdas are nameless (anonymous) functions.\n(lambda (x y) (+ x y))How can we call this function if it doesn\u0026rsquo;t have a name? There are many uses, we can define an operation without writing the full definition.\nFor example, to double all the numbers of a list:\n(define (double-all xs) (if (empty? xs) empty (cons (* 2 (first xs)) (double-all (rest xs))))) (double-all \u0026#39;(1 2 3)) ; \u0026#39;(2 4 6) But we can do this with higher order functions:\n(define (double x) (* 2 x)) (define (double-all2 xs) (map double xs)) (double-all2 \u0026#39;(1 2 3)) ; \u0026#39;(2 4 6) Notice that we had to define our doubling function. This is where anonymous functions come in. Their main use is for one time application for a simple functions in a higher order situation.\n(define (double-all3 xs) (map (lambda (x) (* 2 x)) xs)) (double-all3 \u0026#39;(1 2 3)) ; \u0026#39;(2 4 6) Another lambda example #  Lets write a function that keeps the numbers 1 thru 100.\n(define (keep-1-100 xs) (filter (lambda (x) (and (\u0026gt; x 0) (\u0026lt; x 101))) xs)) (keep-1-100 \u0026#39;(1 -1 -10 50 99 100 101)) ; \u0026#39;(1 50 99 100) Returning a function using a lambda #  ; g(f(x)) (define (composer g f) (lambda (x) (g (f x))))We can test out this function:\n; using double function from earlier (define double-add1 (composer add1 double)) (double-add1 10) ; 21 Expanding the keep-1-100 function #  If we want to expand our 1-100 function to take any range, we can use lambdas. We can make a higher order function that creates a tester for a specific interval.\n(define (interval-factory x y) (lambda (z) (and (\u0026lt; x z) (\u0026gt; y z))))This returns a customized function based on the values we pass x and y. We can define the 1-100 interval like so:\n(define in-1-100 (interval-factory 1 100)) (in-1-100 50) ; #t (in-1-100 150) ; #f (filter in-1-100 \u0026#39;(-1 1 2 99 100 101)) ; \u0026#39;(2 99) ; another interval (define in-50-1000 (interval-factory 50 1000)) (filter in-50-1000 \u0026#39;(-1 1 2 99 100 101)); \u0026#39;(99 100 101) Functional closure #  Return an object that has copies of values in the current scope.\nGraphical pseudo:\nThis is the idea of a closure. In the definition of foo, we are constructing an object that copies the current value of x and y. If x and y change it would change the returned object, so we make a copy.\nWe did this earlier when we defined interval-factory. When we passed in certain values it copies those and returns an object with those values embedded.\n"}),a.add({id:108,href:'/notes/CS135/CS135-lecture-20210309/',title:"CS135-lecture-20210309",section:"CS135",content:"Tail recursive sum #  (define (sum xs) (if (empty? xs) 0 (+ (first xs) (sum (rest xs)))))This isn\u0026rsquo;t tail recursive however. The recursive call must be the last call in the function. Lets define it tail recursively, we can use an accumulator:\nInvariant: acc + sum of xs is desired answer.\n(define (sum-helper acc xs) (if (empty? xs) acc (sum-helper (+ acc (first xs)) (rest xs)))) (define (sum xs) (sum-helper 0 xs)) (sum \u0026#39;(1 2 3 4)) ; 10 "}),a.add({id:109,href:'/notes/CS135/CS135-lecture-20210310/',title:"CS135-lecture-20210310",section:"CS135",content:"Context-free grammars #  Recall, for regular languages: regular expressions are generators, and finite automata are recognizers. Context-free grammars are the recognizers of context free languages.\nAny string we can make in this process is in the language. Any string we can\u0026rsquo;t make in this process is not in the language.\nSo   \\( \\{a^n b^n: \\text{n is integer}\\} \\)  is context free. Remember, we couldn\u0026rsquo;t describe this language using regular expressions because finite automata don\u0026rsquo;t have memory.\nDesigning context-free grammar #  Consider the previous example\u0026rsquo;s language:  \\( \\{a^n b^n: \\text{n is integer}\\} \\)   \\(S \\to aSb \\\\ S \\to \\lambda\\)  If we wanted the language  \\( \\{a^n b^{2n}: \\text{n is integer}\\} \\)   \\( S \\to aSbb \\mid \\lambda\\)  If we want to have a language that decides one string from class  \\( A \\)  and one string from class  \\( B \\)  :\n \\( S \\to AB \\\\ A \\to aA \\mid \\lambda \\\\ B \\to bB \\mid \\lambda\\)  Another pattern we see occasionally is one that sequences things, in different stages.\nFor the language  \\( \\{a^n b^m c^r: n, m, r \\text{ are integers}\\} \\)   \\( S \\to aS \\mid T \\\\ T \\to bT \\mid R \\\\ R \\to cR \\mid \\lambda\\)  So it first takes strings from stage  \\( S \\)  , then stage  \\( T \\)  , then  \\( R \\)  .\nSo a derivation of  \\( a^2b^2c^2 \\)  would be:\n \\( S \\to aS \\to aaS \\to aaT \\to aabT \\to aabbT \\to aabbR \\to aabbcR \\to aabbccR \\to aabbcc \\)  An example designing a CFG #  Consider the language  \\( L = \\{a^l b^m a^n : l,m,n \u0026gt; 0, l\u0026#43;n=m\\} \\)  , for example the strings  \\( abba, aabbba, abbbaa \\)  have the same number of  \\( a \\)  \u0026rsquo;s and  \\( b \\)  \u0026rsquo;s.\nEvery substitution must introduce one  \\( a \\)  and one  \\( b \\)  to be matched.\nWe can think of 2 classes  \\( T \\)  and  \\( R \\)  .\n \\( S \\to TR \\\\ T \\to aTb \\mid \\lambda \\\\ R \\to bRa \\mid \\lambda\\)  This adds  \\( a \\)  \u0026rsquo;s and  \\( b \\)  \u0026rsquo;s in a one to one fashion, so this guarantees there will be the same amount.\nHowever, note that the empty string can be derived:\n \\( S \\to TR \\to R \\to \\lambda \\)  So we can fix our CFG to:\n \\( S \\to TR \\\\ T \\to aTb \\mid ab \\\\ R \\to bRa \\mid ba \\\\\\)  So the shortest string derived is now:\n \\( S \\to TR \\to abR \\to abba \\)  Solving the same example using a PDA #  Recall the language  \\( L = \\{a^l b^m a^n : l,m,n \u0026gt; 0, l\u0026#43;n=m\\} \\)  To create a push-down automata for this language we follow these steps:\n Consume  \\( a \\)  \u0026rsquo;s and push Consume  \\( b \\)  \u0026rsquo;s and match them with  \\( a \\)  \u0026rsquo;s (pop the  \\( a \\)  off the stack when we consume a  \\( b \\)  ). Consume  \\( b \\)  \u0026rsquo;s and push Consume  \\( a \\)  \u0026rsquo;s and pop  \\( b \\)  \u0026rsquo;s  The arrows are labeled as char to consume, top of stack, what to push from right to left:\nSo this handles the first  \\( a \\)  , so we can add:\nNow we handle the  \\( b \\)  and pop  \\( a \\)  :\nNow there will be more  \\( b \\)  \u0026rsquo;s, so we can self loop off the new state:\nWe need to consume more  \\( b \\)  \u0026rsquo;s and push them onto the stack:\nAnd finally handle the last  \\( a \\)  \u0026rsquo;s and pop  \\( b \\)  \u0026rsquo;s.\nSo this will go on, and if we have nothing on the stack then it is an accept.\nYou can only follow the last arrow if the stack is empty.\nTip: when designing these push-down automatas, think of the algorithm first (the steps above).  Odd length palindromes #  Consider the language  \\( L = \\text{odd length palindromes} \\)  over the alphabet  \\( \\{a,b\\} \\)  . Note that the empty string will not be accepted. There will always also be a center character.\nSo some of the strings accepted will be  \\( \\{a, b, aaa, aba, bab, bbb, aaaaa, aabaa, ...\\} \\)  .\nSo lets come up with the CFG:\n \\( S \\to aSa \\mid bSb \\mid a \\mid b\\)  Note: if we added a \\(\\lambda\\) to this definition, it would describe all palindromes.  Lets derive  \\( ababa \\)  :\n \\( S \\to aSa \\to abSba \\to ababa\\)  So for the push-down automata, lets think of the algorithm first:\n Consume and push first half of string Consume the middle char Consume and pop the second half of the string Check that stack is empty  So how do we know when we get to the middle? The middle can be either of our alphabet chars. Without a special char in the middle, there will be non-determinism in this push-down automata. In this case, non-determinism does give the push-down automata more power.\nSo lets start with step 1:\nThen we\u0026rsquo;ll encounter the middle character, step 2:\nNow we can consume the next input and see if it matches, step 3:\nFinally check if the stack is empty, step 4:\nWe can only get to the accept state if the stack is empty.\n"}),a.add({id:110,href:'/notes/CS135/CS135-lecture-20210311/',title:"CS135-lecture-20210311",section:"CS135",content:"Introduction to push-down automata #  A push-down automata is a finite automata with memory, more than what state its currently in. It is a non-deterministic finite automata with a stack for memory. Since it is drawn very similarly to drawing finite automata, we will just notate how the stack is being manipulated on the transitions.\nDrawing transitions for PDAs #  Each arrow has a triple: a,b,c, where\n a is the char to consume from input (or   \\( \\lambda \\)  ) b is the char to pop from the top of the stack, b is always popped when following this transition c is a string to push onto the stack (from right to left)  An arrow can be followed if and only if:\n a matches next input char (or  \\( \\lambda \\)  ), and b matches top of the stack  Following the arrow: consumes a, pops b, pushes c\nConvention: when drawing the PDAs,  \\( \\emptyset \\)  signifies the bottom of the stack at start.\nSteps to follow when creating a PDA #   Think of a stack-based algorithm Try to implement the algorithm with a PDA  Example 1 #  The language  \\( L = \\{a^n b^n: n \\geq 0\\} \\)  represents the strings  \\( \\{\\lambda, ab, aabb, aaabbb, \\ldots\\} \\)  .\nWe saw earlier that we cannot represent this language using finite automata, proving it wasn\u0026rsquo;t a regular language. Let\u0026rsquo;s think of an algorithm to accomplish this language:\n Consume an  \\( a \\)  and push it onto the stack When we start to see  \\( b \\)  \u0026rsquo;s we pop an  \\( a \\)    We can start with the first  \\( a \\)  seen:\nThen we can self loop for the next  \\( a \\)  when there is already one on the stack:\nWe can think of the first state as \u0026ldquo;pushing  \\( a \\)  \u0026rsquo;s onto the stack.\u0026rdquo; After this phase we will move onto \u0026ldquo;matching  \\( b \\)  \u0026rsquo;s\u0026rdquo;, this will be our second state.\nThe first self loop consumes the  \\( b \\)  , and pops the  \\( a \\)  , and pushes the empty string back to the stack ( \\( \\lambda \\)  ).\nThe arrow transitioning from the first to the second state will be  \\( b,a,\\lambda \\)  :\nNote: This arrow could also be labeled \\( \\lambda,a,a \\)  At this point the PDA will work with all of the good strings in the language. To decide where the accept state is we need to think of what the stack should look like once the string is consumed. When we no input and the bottom of the stack, we can accept,  \\( \\lambda, \\emptyset, \\emptyset \\)  :\nString is accepted if and only if  \\( a^n b^n \\)  seen and all input is consumed. The last thing to take care of is accepting the empty string  \\( \\lambda \\)  . To do this, we can add  \\( \\lambda, \\emptyset, \\emptyset \\)  on the middle arrow:\nExample 2 #  Consider the language  \\( L= \\{w \\mid w \\in \\{a,b\\} \\text{ and } w \\text{ has equal number of } a \\text{\u0026#39;s and } b \\text{\u0026#39;s} \\} \\)  .\nTo accomplish:\n Use the stack to keep match of excess  Input is accepted if and only if all input is consumed with an equal amount of  \\( a \\)  \u0026rsquo;s and  \\( b \\)  \u0026rsquo;s (stack is empty).\nRelative power of PDA #  Recall, we showed that any NFA can be expressed as a DFA, therefore they have the same expressive power. Every NFA can be turned into an equivalent PDA.\nAny arrow labeled  \\( x \\)  in a NFA can be expressed as an arrow triple  \\( x, \\emptyset, \\emptyset \\)  in a PDA.\nTherefore, the power a PDA has is greater than or equal to an NFA\u0026rsquo;s power.\nPDA\u0026rsquo;s can recognize  \\( a^nb^n \\)  , and no NFA can recognize this language.\nSo a PDA is not equal in power to a NFA, so therefore it must mean that a PDA is greater than a NFA in expressive ability.\n"}),a.add({id:111,href:'/notes/CS135/CS135-lecture-20210315/',title:"CS135-lecture-20210315",section:"CS135",content:"Parse trees and Ambiguity #  Parse trees are graphical representations of what each non-terminal produces during a derivation.\nAn example of a parse tree:\n  \\( S \\to AB \\\\ A \\to aaA \\mid \\lambda \\\\ B \\to bbB \\mid b\\)  This grammar produces all strings that have an even number of  \\( a \\)  \u0026rsquo;s and an odd number of  \\( b \\)  \u0026rsquo;s.\nSo we can prove that  \\( aabbbbb \\)  is in the language by showing a derivation:\n \\( S \\to AB \\to AbbB \\to AbbbbB \\to Abbbbb \\to aaAbbbbb \\to aabbbbb\\)  So to build a parse tree, at each production we draw a representation of what got replaced.\nIt doesn\u0026rsquo;t matter if we did the  \\( A \\)  stage or the  \\( B \\)  stage first, it would end in the same parse tree.\nNote: The fringe (the leaves of this tree concatenated together) is the intermediate string at each step during the derivation. When the entire parse tree is drawn, the fringe is the output string.  Ambiguous grammar #  A grammar is ambiguous if and only if there exists a string in the language of the grammar with 2 different parse trees.\nAn example of an ambiguous grammar is:\n \\( S \\to AA \\\\ A \\to aA \\mid \\lambda\\)  To prove that this is ambiguous, we can show 2 different derivations for  \\( aaa \\)  :\n \\( S \\to AA \\to aAA \\to aaA \\to aaAA \\to aaA \\to aaaA \\to aaa\\)    \\( S \\to AA \\to AaA \\to AaaA \\to Aaa \\to aAaa \\to aaa\\)    Since the fringes are identical, they both represent different ways to derive the string  \\( aaa \\)  , but since they are 2 different parse trees this proves that the grammar is ambiguous.\nSince CFGs can represent programming languages, a parse tree represents a program. If a compiler can produce 2 different parse trees (programs) for a single source code, that is a bad thing.\nSteps to show that a grammar is ambiguous #   Choose a string Demonstrate two legitimate parse trees for the string  Alternatively, you can show 2 different derivations for the same string. This doesn\u0026rsquo;t always work however, with the first language we expressed above (even  \\( a \\)  \u0026rsquo;s with odd  \\( b \\)  \u0026rsquo;s), because since that language is non-ambiguous, it doesn\u0026rsquo;t matter which order we process the string (it makes the same parse tree).\nLeftmost derivations #  If each step of the derivation converts the leftmost non-terminal, then it is impossible to show 2 different derivations in a non-ambiguous grammar.\nSo for example:\n \\( S \\to AB \\to aaAB \\to aaB \\to aabbB \\to aabbbbB \\to aabbbbb\\)  Every string in a non-ambiguous grammar will have exactly 1 string created in a leftmost derivation. However, in an ambiguous grammar, this is not the case.\nSo for our ambiguous grammar above, we can derive  \\( aaa \\)  using leftmost derivation:\n \\( S \\to AA \\to aAA \\to aaAA \\to aaA \\to aaaA \\to aaa\\)  We can show that this is ambiguous by showing another leftmost derivation of  \\( aaa \\)  :\n \\( S \\to AA \\to aAA \\to aA \\to aaA \\to aaaA \\to aaa\\)  "}),a.add({id:112,href:'/notes/CS135/CS135-lecture-20210318/',title:"CS135-lecture-20210318",section:"CS135",content:"Pumping lemma for CFL #  PL for RL\nGiven   \\( RL, L \\)  there exists  \\( p \\)  such that if  \\( w \\in L \\)  and  \\( |w| \\geq p \\)  then there exists  \\( w = xyz \\)  where\n  \\( |y| \u0026gt; 0 \\)    \\( |xy| \\leq p \\)    \\( xy^iz \\in L \\)    We consume  \\( w \\)  and we get to a state that is the first repeated state. At some point we come back to it, and then to the accept.\nSince  \\( w \\)  is  \\( p \\)  or longer, it must visit one state more than once. We can identify this state as the one we get repeated. The part that gets us there the first time  \\( x \\)  , the part that gets us there the second time  \\( y \\)  , and the part that goes to the accept state  \\( z \\)  .\nIf  \\( x \\)  gets us to the repeated state, then we can go around  \\( y \\)  as many times we want (or omit).\nProof template #  Given context-free language  \\( L \\)  , there exists  \\( p \\)  such that if  \\( w \\in L \\)  and  \\( |w| \\geq p \\)  , then there exists a  \\( w = uvxyz \\)  where\n  \\( |vy| \u0026gt; 0 \\)    \\( |vxy| \\leq p \\)    \\( uv^ixy^iz \\in L \\)    Main use: we look for strings that are in the language and at least  \\( p \\)  long, and then apply the pumping lemma to show that the language is not context-free.\nTo prove:\n Assume  \\( L \\)  is context-free Pick  \\( w \\in L \\)  with  \\( |w| \\geq p \\)   Argue that the pumping lemma says that there exists  \\( w = uvxyz \\)  with   \\( |vy| \u0026gt; 0 \\)    \\( |vyx| \\leq p \\)    \\( uv^ixy^i \\in L \\)     Argue that either if we pump down ( \\( i = 0 \\)  gives us  \\( uxz \\)  , or if we pump up  \\( i \u0026gt; 0 \\)  we get  \\( uvvxyyz \\)  and show that  \\( e \\not \\in L \\)   Pumping lemma says string is in  \\( L \\)  , contradiction, so  \\( L \\)  is not context-free.  Example #  Consider  \\( L = \\{a^n b^n c^n : n \\geq 0\\} \\)  This starts by consuming  \\( a \\)  \u0026rsquo;s and pushing them onto the stack. Then when we start seeing  \\( b \\)  \u0026rsquo;s we pop the  \\( a \\)  \u0026rsquo;s off. When we reach the  \\( c \\)  \u0026rsquo;s we don\u0026rsquo;t have a way to remember how many  \\( a \\)  \u0026rsquo;s or  \\( b \\)  \u0026rsquo;s we saw.\nNote: A Turning machine can do this because it has 2 stacks.  So lets prove its not context-free using the pumping lemma.\nThe string we pick must be length  \\( p \\)  and exist in  \\( L \\)  :\n \\[\\begin{aligned} w = a^p b^p c^p \\end{aligned}\\]   \\( w \\)  exists in the language and is at least  \\( p \\)  long (it is in fact  \\( 3p \\)  long).\nSo lets assume that this language is context-free, and apply the pumping lemma.\nPossible divisions for  \\( w \\)  :\nSince  \\( w = uvxyz \\)  , we don\u0026rsquo;t know exactly where they are however\nWe do know that  \\( 0 \u0026lt; |vxy| \\leq p \\)  Its possible that  \\( vxy \\)  :\n appear in the region of just  \\( a \\)  \u0026rsquo;s, since there are at least  \\( p \\)   \\( a \\)  \u0026rsquo;s. So  \\( vxy = \\)  all  \\( a \\)  \u0026rsquo;s. appear in the  \\( a \\)  \u0026rsquo;s and  \\( b \\)  \u0026rsquo;s. any other combination of 2, but not all 3  So,  \\( uvvxyyz \\)  will increase 1 or 2 types of characters, but not all 3. Thus it is out of balance, and the string is not in  \\( L \\)  .\n \\[\\begin{aligned} uvvxyyz \\not \\in L \\end{aligned}\\]  Therefore, the language  \\( L = \\{a^n b^n c^n : n \\geq 0\\} \\)  is not context-free.\nWhy the pumping lemma is true #  If  \\( L \\)  is context-free, then there is a context-free grammar for it. So, every string  \\( w \\in L \\)  has a parse tree:\nwhere the fringe is  \\( w \\)  and the interior is non-terminals.\nObserve,\n The longer that  \\( w \\)  is, the taller the tree The taller the tree, the more non-terminals in the longest root-to-leaf path Once the root-to-leaf path is long enough, some non-terminal must repeat in it  There are a finite number of productions in the grammar, and so as the tree gets longer and longer until there must be a repeat. This is where the pumping lemma comes in.\nAs an abstraction:\nSome part of  \\( w \\)  will be derived from  \\( A \\)  .\nThis tells us that\n  \\( x \\in L(A) \\)  , and  \\( vxy \\in L(A) \\)    So each time that  \\( A \\)  is reached, we can replace it with  \\( x \\)  or  \\( vxy \\)  , we can pump the  \\( v \\)  and  \\( y \\)  as many times we want.\nNote: This is similar to the pumping lemma for regular languages because it also uses the pigeon hole principle.  "}),a.add({id:113,href:'/notes/CS135/CS135-lecture-20210329/',title:"CS135-lecture-20210329",section:"CS135",content:"CFG to PDA algorithm #  Starting from a CFG and going to a PDA is a lot easier than going the other way.\nLets start out with this grammar:\n  \\( S \\to AB \\\\ A \\to aA \\mid \\lambda \\\\ B \\to bB \\mid \\lambda\\)  We can start our PDA by drawing 3 states, one start and one accept.\nThe first transition triple is  \\( \\lambda, \\empty, S \\empty \\)  , and the second transition is  \\( \\lambda, \\empty, \\empty \\)  .\nIn the middle there will be a self loop with a bunch of triples. For example, if we had a production  \\( X \\to \\alpha \\)  , then the triple will be  \\( \\lambda, X, \\alpha \\)  . \u0026ldquo;If the top of the stack is a non-terminal, we can replace it with a terminal.\u0026rdquo;\nAnother rule to follow is that for all terminals we use the triple  \\( a, a, \\lambda \\)  (if  \\( a \\)  is a terminal).\nWe can follow this same pattern for the other productions.\nSo we have 5 productions, so we have 5 triples of that form.\n \\( \\lambda, S, AB \\\\ \\lambda, A, aA \\\\ \\lambda, A, \\lambda \\\\ \\lambda, B, bB \\\\ \\lambda, B, \\lambda\\)  We also have the triples\n \\( a, a, \\lambda \\\\ b, b, \\lambda\\)  This PDA simulates a derivation, for example  \\( aab \\)  :\n \\(S \\to AB \\to aAB \\to aaAB \\to aaB \\to aabB \\to aab\\)  Note: A PDA simulates a leftmost derivation.  Another pumping lemma example with a context-free language #  For the language  \\( L = \\{ww \\mid w \\in \\{0,1\\}* \\} \\)  Theorem:  \\( L \\)  is not context-free\nProof:\nAssume for contradiction that  \\( L \\)  is context free.\nLet  \\( p \\)  be  \\( L \\)  \u0026rsquo;s pumping length. Consider the string  \\( w = 0^p 1^p 0^p 1^p \\)  , which is length at least  \\( p \\)  and is in  \\( L \\)  .\nThe pumping lemma says there exists  \\( w = uvxyz \\)  where  \\( v \\)  and or  \\( y \\)  is not empty,  \\( |vxy| \\leq p \\)  and  \\( uv^ixy^iz \\)  is in  \\( L \\)  for all  \\( i \\)  .\nIf  \\( vxy \\)  is entirely in the first set of  \\( p \\)  0\u0026rsquo;s, then the pumped  \\( v \\)  and  \\( y \\)  will create string that isn\u0026rsquo;t in the language  \\( L \\)  .\n"}),a.add({id:114,href:'/notes/CS135/CS135-lecture-20210405/',title:"CS135-lecture-20210405",section:"CS135",content:"Introduction to Compilers #  Structure of a compiler #  The economy of programming languages #  Lexical analysis #  Lexical examples #  Lexical specification #  Introduction to parsing #  Predictive parsing #  "}),a.add({id:115,href:'/notes/CS135/CS135-lecture-20210407/',title:"CS135-lecture-20210407",section:"CS135",content:"Compiler front end #  Compilers are presented with source code, and that goes through the front end of the compiler. This front end builds a parse tree and sends that to the back end of the compiler. The back end produces an executable.\nThe front end is composed of multiple steps\n Lexical analysis, sometimes called the scanner. This takes the source code and produces tokens. Syntactic analysis, called a parser. The parser consumes the tokens and produces a parse tree. Semantic analysis. This produces an annotated parse tree. This is stuff like type checking.  Everything in the front end is CPU independent. All it cares about is what language you are in. There is 1 front end per programming language.\nThe back end of the compiler takes a tree and goes through a code generator. This then passes through an optimizer, and then is passed into the final code generation.\nIR = intermediate representation, code that isn\u0026rsquo;t in a CPU\u0026rsquo;s language yet.\nYou only need 1 code generator per CPU. By taking 1 front end and 1 back end, you can have a compiler that compiles a specific language for a specific CPU.\nLexical analysis / scanner #  The scanner takes in source code, and skips all the meaningless stuff in the source code and focuses on the chunks of your program.\nFor example\n// a comment if (x == y) { x = -x; } The parts of this code that is important is the keywords, the variables, the operators, and the grouping elements. Things that are not important are whitespace and comments.\nThe scanner takes this and turns it into a sequence of tokens.\n\u0026quot;if\u0026quot;, \u0026quot;(\u0026quot;, \u0026quot;x\u0026quot;, \u0026quot;==\u0026quot;, ... Interface to a scanner #  We have 2 essential functions:\n next() returns, but does not remove, the next token match(t), if the next token in the stream is t, then remove t from the stream, otherwise throw an exception  Scanner behavior #  When we call next(),\n The first thing we do is skip meaningless characters. Here meaningless characters are things like comments and whitespace. Then, we find the longest prefix that is a legal token (the principle of longest sub string). For example if we see ifelse we don\u0026rsquo;t want to stop after seeing if. The scanner will continue as deep as it can to find the longest legal token. Another example of this is the ==, which should be the equality operator and not 2 assignment operators. Subsequent calls to next() return the found token until match() is called.  When we call match(t),\n if next() == t, then we remove t from the input stream, otherwise throw an exception  Where do scanners come from? #  Scanners can be written by hand. It is possible to completely write both these functions by hand, if the language is simple enough. These are usually a bunch of if elses that compare the tokens. For example, gcc is considered an adhoc scanner, and written this way.\nThe other way to build a scanner is from a scanner generator. The scanner generator is a program that takes in a file, called a lexical specification. This reads the specification, and outputs scanner source code.\nThis is an automated process to build scanner source code.\nLexical specifications #  The first step is to write down all the rules for tokens. An example format for a specification is\nTOKEN_CLASS: regular expression The regular expression here represents one token. For example for an identifier:\nID: [a-zA-Z][a-zA-Z0-9]* So for example:\nWORD: aa+aaa OTHER: aa* So here, next() will skip meaningless chars, and then find the longest prefix that matching a regular expression, it will then return the class and lexem that match.\nSince aaa will match both regular expressions, the scanner will return WORD because it is listed first. The token that is returned will be WORD, \u0026quot;aaa\u0026quot;.\nSo if our input is\n a aa aaa aaaa The whitespace at the beginning will skipped, and the first a will match (because neither of our regular expressions accounts for a space). So the first token that next() returns will be OTHER, \u0026quot;a\u0026quot;. Once this token is consumed via match(), the next token that next() will return is WORD, \u0026quot;aa\u0026quot; because WORD comes before OTHER. This continues on through the stream\u0026hellip;\nLexical specification to DFA algorithm #   Use the RE-to-NFA algorithm for each regular expression.  For aa+aaa:\nFor aa*:\nMake new start state and use   \\( \\lambda \\)  transitions to all NFA start states.  Use the NFA-to-DFA algorithm to create the scanner. Mark each DFA accept state with token class.  "}),a.add({id:116,href:'/notes/CS135/CS135-lecture-20210419/',title:"CS135-lecture-20210419",section:"CS135",content:"Lexical specification to DFA #  WORD: aa+aaa OTHER: aa* Heres an NFA for each regular expression:\nSo now we can take the NFA and make a DFA out of it. Recall, the scanner will need to use a DFA.\nThen we can label the accept states with the lexeme types:\nSo for example, to scan this sequence:\na aa aaa aaaa Nullablity #  A non-terminal, or a sequence of non-terminals, is nullable if the empty string can be derived from it.\nConsider the grammar\n  \\( A \\to AB \\mid \\lambda \\\\ B \\to aA\\)  We look at this and reason what is nullable. Since  \\( A \\)  goes to  \\( \\lambda \\)  ,  \\( A \\)  is nullable. We can also tell that  \\( B \\)  is not nullable because the single production for  \\( B \\)  has a terminal character in it. Once we replace  \\( B \\)  there is no way to remove the terminal, so it is not nullable.\nWe can also use a fixed-point algorithm to tell whether something is nullable. Sometimes a grammar is complicated enough where you can\u0026rsquo;t just tell what is nullable.\nThe algorithm is as follows:\n Write down all of the right hand sides of your productions   \\( AB \\\\ \\lambda \\\\ aA \\)  Write down all of the left hand sides, the non-terminals   \\( A \\\\B \\)  We can initially consider all of them false, as in non of them are nullable.\nWe can then look at the non-terminals and see if they are nullable (true or false), and fill in a new column. Likewise, we can turn any of the non-terminals true if any of their right hand sides are nullable.\nWe continue this until there is no change between the columns. We will continue until we reach a fixed-point (a point where nothing changes). Once we reach this state there will be no iterations done because nothing will continue changing.\nBecause at least one right hand side for  \\( A \\)  is true, that means that  \\( A \\)  can be nullable.\nAfter another iteration, there has been no change, so we are done.\nWe can tell from the column that  \\( A \\)  and  \\( \\lambda \\)  are nullable.\nFirst sets #  First is the set of all characters that the string could start with if its derived.\nFor example:\n \\( A \\to aA \\mid \\lambda \\)  The language of a is  \\( L(A) = \\{\\lambda, a, aa, aaa, \\ldots \\} \\)  . The empty string doesn\u0026rsquo;t have a first character so we ignore it, but all other strings start with an  \\( a \\)  .\nSo  \\( \\text{First } (A) = \\{a\\} \\)  Now consider\n \\( A \\to aA \\mid \\lambda \\mid bA \\)  .\nNow the language is  \\( L(A) = \\{ \\lambda, a, b, aa, ab, ba, bb, \\ldots \\}\\)  . So now the strings can start with an  \\( a \\)  or a  \\( b \\)  .\nSo  \\( \\text{First } (A) = \\{a, b\\} \\)  It is also useful to tell the first of multiple languages, i.e.\nIf  \\( A \\)  is not nullable, then  \\( \\text{First } (AB) \\)  will be equal to  \\( \\text{First } (A) \\)  . If  \\( A \\)  is nullable, then we can say that  \\( \\text{First } (AB) = \\text{First } (A) \\cup \\text{ First } (B)\\)  .\nThere is a fixed-point algorithm to determine if you can\u0026rsquo;t see it initially:\nConsider\n \\( A \\to Ba \\mid Cb \\\\ B \\to b \\mid \\lambda \\\\ C \\to c \\mid \\lambda\\)  We can tell that  \\( B \\)  and  \\( C \\)  are nullable, but  \\( A \\)  is not.\nFirst we can write down all the right hand sides of the productions and start them as the empty set  \\( \\{\\} \\)  . Also, we write down the left hand sides at the bottom.\nThe new column being built will be based on the prior column, and we determine if anything will be added to its first set. Also, consider nullability when checking.  \\( B \\)  is nullable, so the string could start with an  \\( a \\)  .\nAlso consider the non-terminal left hand sides and copy from the upper sets.\nThis continues until the columns don\u0026rsquo;t change anymore.\nAfter one more iteration, there is no change so we are done.\nUnified algorithm #  Recall the rules of the previous algorithms\nConsider this grammar\n \\( T \\to R \\mid aTc \\\\ R \\to bR \\mid \\lambda\\)  We can tell that we will have an equal number of  \\( a \\)  s and  \\( c \\)  s, then we will have  \\( b \\)  in the middle, any number of times.\nThis is generating the language  \\( \\{a^n b^m c^n : n,m \\geq 0\\} \\)  .\nSo which of the above rules apply?\nLets first look at  \\( T \\to R \\)   \\( \\text{First } (R) \\subseteq \\text{ First } (T) \\\\\\)   \\( \\text{Follow } (T) \\subseteq \\text{ Follow } (R) \\)  Now lets look at  \\( T \\to aTc \\\\ \\)   \\( \\{a\\} \\subseteq \\text{ First } (T) \\\\\\)   \\(\\{c\\} \\subseteq \\text{ Follow } (T) \\)  Note that  \\( T \\)  and  \\( R \\)  are nullable.\nLets do  \\( R \\to bR \\\\ \\)   \\( \\{b\\} \\subseteq \\text{ First } (R) \\\\ \\)   \\( \\text{ Follow } (R) \\subseteq \\text{ Follow } (R) \\)  The last one doesn\u0026rsquo;t actually produce any information, any subset is of itself. This is a tautology.\nWe also have to consider  \\( R \\to \\lambda \\)  , which does not produce anything.\nWe also usually add a new start symbol followed by the  \\( \\$ \\)  to indicate the end of the input.\n \\( T\u0026#39; \\to T\\$ \\)  This is to force checking that the whole input is in the language, not just a prefix. Also note that this produces the rule\n \\( \\{ \\$ \\} \\subseteq \\text{ Follow } (T) \\)  Now we can use the fixed-point algorithm to find the specific sets. We have to determine the first sets and follow sets of both  \\( T \\)  and  \\( R \\)  .\n \\( \\text{ First } (T) = \\{a,b\\}\\\\ \\)   \\( \\text{ First } (R) = \\{b\\}\\\\ \\)   \\( \\text{ Follow } (T) = \\{c, \\$\\}\\\\ \\)   \\( \\text{ Follow } (R) = \\{c, \\$\\}\\\\ \\)  Now that we have the minimum sets that satisfy the rules, we can create a prediction table.\n   Production  \\( \\text{First(right hand side)} \\)   If right handside is nullable,  \\( \\text{ Follow(left hand side) }\\)        \\( T \\to R \\)    \\( \\{b\\} \\)    \\( \\{c, \\$\\} \\)      \\( T \\to aTc \\)    \\( \\{a\\} \\)       \\( R \\to bR \\)    \\( \\{b\\} \\)       \\( R \\to \\lambda \\)    \\( \\{\\} \\)    \\( \\{c, \\$\\} \\)      We can use this table for predictive descent by looking at the rows for each non-terminal and making sure the sets are disjoint.\nRecursive-descent predictive-parsing example #  An example parser in racket #  Consider the language\n \\( S\u0026#39; \\to S \\$ \\\\ S \\to aSz \\mid bSy \\mid \\lambda\\)  #lang racket ; next : list -\u0026gt; string or false ; if list not empty and first item a string, eval to first item, else false ; Examples: ; (next \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;)) -\u0026gt; \u0026#34;a\u0026#34; ; (next \u0026#39;(\u0026#34;a\u0026#34; 2 3)) -\u0026gt; \u0026#34;a\u0026#34; ; (next \u0026#39;(1 \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;)) -\u0026gt; false ; (next \u0026#34;a\u0026#34;) -\u0026gt; false ; (next \u0026#39;()) -\u0026gt; false (define (next toks) (cond ((empty? toks) false) ((not (list? toks)) false) ((string? (first toks)) (first toks)) (else false))) (next \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;)) (next \u0026#39;(\u0026#34;a\u0026#34; 2 3)) (next \u0026#39;(1 \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;)) (next \u0026#34;a\u0026#34;) (next \u0026#39;()) ; match : list item -\u0026gt; list or false ; if first item of list equals item return rest of list, else false ; Examples: ; (match \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) \u0026#34;a\u0026#34;) -\u0026gt; \u0026#39;(\u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) ; (match \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) \u0026#34;b\u0026#34;) -\u0026gt; false ; (match \u0026#39;(\u0026#34;a\u0026#34;) \u0026#34;a\u0026#34;) -\u0026gt; \u0026#39;() ; (match \u0026#39;() \u0026#34;a\u0026#34;) -\u0026gt; false ; (match false \u0026#34;a\u0026#34;) -\u0026gt; false (define (match toks tok) (cond ((empty? toks) false) ((not (list? toks)) false) ((equal? tok (first toks)) (rest toks)) (else false))) (match \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) \u0026#34;a\u0026#34;) (match \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) \u0026#34;b\u0026#34;) (match \u0026#39;(\u0026#34;a\u0026#34;) \u0026#34;a\u0026#34;) (match \u0026#39;() \u0026#34;a\u0026#34;) (match false \u0026#34;a\u0026#34;) ; S\u0026#39; → S$ ; S → aSz | bSy | λ (define (parseS toks) (cond ((not (list? toks)) false) ((empty? toks) toks) ((equal? (first toks) \u0026#34;a\u0026#34;) (match (parseS (match toks \u0026#34;a\u0026#34;)) \u0026#34;z\u0026#34;)) ((equal? (first toks) \u0026#34;b\u0026#34;) (match (parseS (match toks \u0026#34;b\u0026#34;)) \u0026#34;y\u0026#34;)) (else toks))) ; First(S\u0026#39;) = {a,b,$}. On any of these three, (parseS toks) and verify result is end-of-input. (define (parseSprime toks) (cond ((not (list? toks)) false) ((empty? toks) (equal? (parseS toks) empty)) ; $ predicts S\u0026#39; -\u0026gt; S$ ((equal? (next toks) \u0026#34;a\u0026#34;) (equal? (parseS toks) empty)) ; a predicts S\u0026#39; -\u0026gt; S$ ((equal? (next toks) \u0026#34;b\u0026#34;) (equal? (parseS toks) empty)) ; b predicts S\u0026#39; -\u0026gt; S$ (else false))) ; these should be true (parseSprime \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;y\u0026#34; \u0026#34;z\u0026#34;)) (parseSprime \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;a\u0026#34; \u0026#34;z\u0026#34; \u0026#34;z\u0026#34;)) (parseSprime \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;z\u0026#34;)) (parseSprime \u0026#39;(\u0026#34;b\u0026#34; \u0026#34;y\u0026#34;)) ; these should be false (parseSprime \u0026#39;(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34;)) (parseSprime \u0026#39;(\u0026#34;b\u0026#34; \u0026#34;b\u0026#34;))"}),a.add({id:117,href:'/notes/CS137/CS137-lecture-20210126/',title:"CS137-lecture-20210126",section:"CS137",content:"csc137syl Spring-2021.docx\n"}),a.add({id:118,href:'/notes/CS137/CS137-lecture-20210128/',title:"CS137-lecture-20210128",section:"CS137",content:"Ch1.pdf\n"}),a.add({id:119,href:'/notes/CS137/CS137-lecture-20210202/',title:"CS137-lecture-20210202",section:"CS137",content:"CSc 137 Presentation -Topics-1-1.docx\nHow to convert 5.375 to a floating point representation using IEEE 754:\n Convert the number to a binary representation Start with the whole part: 5 101 Then do the fractional part: .375 Using successive multiplication   \\[0.375 * 2 = 0 \u0026#43; .75 \\\\ 0.75 * 2 = 1 \u0026#43; .5 \\\\ 0.5 * 5 = 1 \u0026#43; .0 \\]  So .375 = .011 So 5.375 = 101.011 in fixed point  Continued on next lecture  "}),a.add({id:120,href:'/notes/CS137/CS137-lecture-20210204/',title:"CS137-lecture-20210204",section:"CS137",content:"Continued from last lecture:\nHow to convert 5.375 to a floating point representation using IEEE 754:\n  Convert the number to a binary representation Start with the whole part: 5 = 101. Then do the fractional part: .375 Using successive multiplication\n  \\[ \\begin{aligned} 0.375 * 2 = 0 \u0026#43; .75 \\\\ 0.75 * 2 = 1 \u0026#43; .5 \\\\ 0.5 * 5 = 1 \u0026#43; .0 \\end{aligned} \\]  So .375 = 011. So 5.375 = 101.011 in fixed point\n  Convert the number to scientific notation (move the decimal point over, \u0026ldquo;normalize\u0026rdquo;)\n   \\[ \\begin{aligned} 101.011 = 1.01011 \\cdot 2^2 \\end{aligned} \\]  So we have 1.01011 * 2^2. Our unbiased exponent is 2 and our mantissa is 01011.\nCalculate the bias exponent Biased offset is 7 because we are using 4 bits to represent the biased exponent.   \\[ \\begin{aligned} \\text{unbiased exponent } \u0026#43; \\text{ biased offset} \u0026amp;= \\text{biased exponent } \\\\ 2 \u0026#43; 7 \u0026amp;= 9 \\end{aligned} \\]  So our biased exponent is 9 = 1001.\n Fusion of floating point (put it all together) We are using 16 bits to represent our floating point numbers. The most significant bit is the sign bit, 0 for positive, 1 for negative. Then comes our 4 bit biased exponent. Last comes our mantissa, 11 bits set aside for it. So, [1 bit sign][4 bit biased exponent][11 bit mantissa]\n   Sign bit Biased exponent Mantissa     0 1001 01011    So our full number is: 5.375 = 0100101011000000 (pad the right side of the mantissa with zeros until you\u0026rsquo;ve used 11 bits.\n  Convert to hex 0100 1010 1100 0000 = 0x4AC0\n  "}),a.add({id:121,href:'/notes/CS137/CS137-lecture-20210209/',title:"CS137-lecture-20210209",section:"CS137",content:"Ch2.pdf\nLUT = lookup table\nSOP = sum of products\nDeMorgan\u0026rsquo;s theorem #   Two or more variables NAND\u0026rsquo;d together is the same as the two terms inverted and OR\u0026rsquo;d  Two or more variables NOR\u0026rsquo;d together is the same as the two variables inverted and AND\u0026rsquo;d together   Lets show this via tables for these two equations:\n  \\[\\begin{aligned} F1 \u0026amp;= F2 \\\\ \\neg(A \\cdot B) \u0026amp;= \\neg A \u0026#43; \\neg B \\end{aligned}\\]  Here is a table for  \\(F1\\)  :\n    \\(A B\\)    \\(A \\cdot B\\)    \\(\\neg(A \\cdot B)\\)       0 0 0 1   0 1 0 1   1 0 0 1   1 1 1 0    Here is a table for  \\(F2\\)  :\n    \\(A B\\)    \\(\\neg A \\neg B\\)    \\(\\neg A \u0026#43; \\neg B\\)       0 0 1 1 1   0 1 1 0 1   1 0 0 1 1   1 1 0 0 0    Notice that the output of each table is the same, thus the theorem is true.\n"}),a.add({id:122,href:'/notes/CS137/CS137-lecture-20210211/',title:"CS137-lecture-20210211",section:"CS137",content:" A Karnaugh map is a graphical representation of a logic function. The map for   \\(n\\)  -input logic function is an array with  \\(2^n\\)  cells, (one for each possible input combination). To represent a logic function in a k-map, we copy the 1s from the truth table to the corresponding cells. Implicants are squares or rectangles made up of minterms Pairs of adjacent 1 cells in the k-map have minterms that differ in ONLY 1 variable The minterm pairs can be combined into a single product term using the generalization of theorem T10:  T10) = term   Thus, we can use k-maps to simplify the sum of the function.  "}),a.add({id:123,href:'/notes/CS137/CS137-lecture-20210216/',title:"CS137-lecture-20210216",section:"CS137",content:"Ch3.pdf\nPropagation delay is the time delta between the input and the output.\nDesign of a full adder #  Carry Propagate Adder (CPA)\n Full adder is an arithmetic logic unit or circuit to add two single digit numbers with Carry-in It is still combinational circuit with inputs Ax and Bx  Sx is the sum (1 bit) C-in carry in Cx is the carry out   Adder is also called Ripple Carry Adder (RCA) Fundamental circuit for an adder and has longest propagation delay that is proportional to the number of the carry bits  To estimate the propagation delay of an   \\( n \\)  -bit CPA:\n \\[\\begin{aligned} \\Delta \\text{ CPA } (n) = \\left[ (n-1) \\cdot \\Delta FA_C \\right] \u0026#43; \\Delta FA_S \\end{aligned}\\]  eg calculating propagation delay #  Design of a full adder #     A B S C     0 0 0 0   0 1 1 0   1 0 1 0   1 1 0 1    Lets add\nA = 0111 B = 1111\n   Ai Bi C-in S C-out     1 1 0 0 1   1 1 1 1 1   1 1 1 1 1   0 1 1 0 1    "}),a.add({id:124,href:'/notes/CS137/CS137-lecture-20210218/',title:"CS137-lecture-20210218",section:"CS137",content:"CPA cont. #  Design a 1-bit full adder #     Ax Bx C-in Sx C-out     0 0 0 0 0   0 0 1 1 0   0 1 0 1 0   0 1 1 0 1   1 0 0 1 0   1 0 1 0 1   1 1 0 0 1   1 1 1 1 1    We can reduce the diagonals in Sx: note that Sx is true if only 1 of the inputs is on, or all are on (this is XOR).\n"}),a.add({id:125,href:'/notes/CS137/CS137-lecture-20210223/',title:"CS137-lecture-20210223",section:"CS137",content:"CS137-lecture-20210223 #  DeMorgan\u0026rsquo;s Theorem #  Theorem 1:   \\(\\neg(x \\cdot y) = \\neg x \u0026#43; \\neg y\\)  Theorem 2:  \\(\\neg(x \u0026#43; y) = \\neg x \\cdot \\neg y\\)  Steps to convert to all NAND gates:\n  Replace each NOT gate with its equivalent NAND gate. Connecting the inputs of a NAND gate makes a NOT gate.\n  Place two NOT gates on each of signals going into the final OR.\n  Replace each AND NOT combo with a NAND gate.\n  "}),a.add({id:126,href:'/notes/CS137/CS137-lecture-20210225/',title:"CS137-lecture-20210225",section:"CS137",content:"Multiplexers #  An everyday example of a multiplexer is a TV remote.\n Selecting of data or information is a critical function in a digital system and computers. A multiplexer (mux for short) is a digital switch. Mux is a circuit used to select and route any of the several inputs to an output signal. Mux is a combination circuit, it has the following:     \\( 2^n \\)  inputs  \\( n \\)  control inputs, selector signals one set of output   For a mux, the value of the control inputs (selector signal) determines the data input that is selected. Multiplexer means many into one. A simple example of a non-electronic circuit of a mux is a single pole multiposition switch. Multi-position switches are widely used in many electronics circuit, however, circuits that operate at high speed require the multiplexer to be automatically selected. A mechanical switch cannot perform this task satisfactorily. Therefore, a mux is used to perform high speed switching and are constructed for digital circuits.  Example X and Y are inputs, S is the selector signal, r is the output.\n2 to 1 means that it has a total of 2 inputs, with 1 output. If you called this a \u0026ldquo;1 bit mux\u0026rdquo;, then each X and Y would only have one input (0 or 1).\nLets make a truth table of this:\n   Selector Input Input Output     S X Y r   0 0 0 0   0 0 1 1   0 1 0 0   0 1 1 1   1 0 0 0   1 0 1 0   1 1 0 1   1 1 1 1    So this is our equation we can simplify:\n \\[\\begin{aligned} r = \\bar{s} \\bar{x} y \u0026#43; \\bar{s} x y \u0026#43; s x \\bar{y} \u0026#43; s x y \\end{aligned}\\]  Simplifying using a K-map:\nSo, the outputs are selected based on the selector signal. Outputs, Y when S = 0; X when S = 1.\n \\[\\begin{aligned} r = \\bar{s} y \u0026#43; s x \\end{aligned}\\]    "}),a.add({id:127,href:'/notes/CS137/CS137-lecture-20210302/',title:"CS137-lecture-20210302",section:"CS137",content:"Sequential Circuits #  In combinational circuits, the outputs are only dependent on the inputs. In sequential circuits, the outputs depend on the inputs, and the previous state of the circuit.\nCore modules #  S-R Latches\n Latches are basic building blocks of flip-flops (basic memory unit) A 1 bit latch will store 1 bit, 4 bit latch stores 4 bits, and so forth \u0026hellip; Two types of memory elements based on the type of trigger that is suitable to operate Latches, asynchronous Latches operate with an enable signal, which is level sensitive  D flip-flop\n Basic memory storage device Block diagram of a D flip flop Flip flops, synchronous (the device samples its input based on a common clock) Flip flops are edge sensitive Doesn\u0026rsquo;t sample an input unless a clock comes in, clock signal needed to change states D flip flops is designed using S-R latches Similar to S-R latch, only we use set and reset function. (Ties D input to S and NOT D to R).  S-R flip flop with NOR gates #        \\( S \\)    \\( R \\)    \\( Q_t \\)    \\( Q_{t\u0026#43;1} \\)       0 0     0 1     1 0     1 1  Undefined    Finished in next lecture\n"}),a.add({id:128,href:'/notes/CS137/CS137-lecture-20210304/',title:"CS137-lecture-20210304",section:"CS137",content:'Sequential circuits cont. #  Creating the S-R latch cont. #        \\( S \\)    \\( R \\)    \\( Q_t \\)    \\( Q_{t\u0026#43;1} \\)       0 0  \\( Q_t \\)    \\( Q_t \\)     0 1 0 0   1 0 1 1   1 1  Undefined     \\( Q_{t \u0026#43; 1} \\)  is the "next output."  Case 1:  \\( S = 0 \\)  ,  \\( R = 0 \\)   \\[\\begin{aligned} Q_{t\u0026#43;1} \u0026amp;= \\overline{0 \u0026#43; \\overline{Q_t}} = Q_t \\\\ \\overline{Q_{t\u0026#43;1}} \u0026amp;= \\overline{0 \u0026#43; Q_t} = \\overline{Q_t} \\end{aligned}\\]  Case 2:  \\( S = 0 \\)  ,  \\( R = 1 \\)   \\[\\begin{aligned} Q_{t\u0026#43;1} \u0026amp;= \\overline{1 \u0026#43; \\overline{Q_t}} = \\overline{1} = 0 \\\\ \\overline{Q_{t\u0026#43;1}} \u0026amp;= \\overline{0 \u0026#43; \\overline{Q_t}} = \\overline{Q_t} \\end{aligned}\\]  Case 3:  \\( S = 1 \\)  ,  \\( R = 0 \\)   \\[\\begin{aligned} Q_{t\u0026#43;1} \u0026amp;= \\overline{0 \u0026#43; \\overline{Q_t}} = 1 \\\\ \\overline{Q_{t\u0026#43;1}} \u0026amp;= \\overline{1 \u0026#43; Q_t} = 0 \\end{aligned}\\]  Case 4:  \\( S = 1 \\)  ,  \\( R = 1 \\)   \\[\\begin{aligned} Q_{t\u0026#43;1} \u0026amp;= \\overline{1 \u0026#43; \\overline{Q_t}} = \\overline{1} = 0 \\\\ \\overline{Q_{t\u0026#43;1}} \u0026amp;= \\overline{1 \u0026#43; Q_t} = \\overline{1} = 0 \\end{aligned}\\]  Since the output and its complement are the same, this case is wrong.\n'}),a.add({id:129,href:'/notes/CS137/CS137-lecture-20210309/',title:"CS137-lecture-20210309",section:"CS137",content:"Exam 1 review #  "}),a.add({id:130,href:'/notes/CS137/CS137-lecture-20210316/',title:"CS137-lecture-20210316",section:"CS137",content:"Sequential circuits #  Ch5.pdf\n All small and large sequential circuits are made of flip-flops and set of combinational circuits. Contrary to combinational circuits, a sequential circuit design has states and transitions from current state to next state. A sequential circuit design problem is typically modeled as a finite state diagram (FSD). An FSD consists of circles as states and arrows as transitions, which specifies the behavior of the system.  Sequential circuit as a finite state machine #   Finite state diagrams (FSD) describe the behavior of the system. Finite state machine design are categorized into Mealy, Moore, or hybrid. Mealy is a FSM whose output values are determined by its current state and current inputs. In contrast, Moore machines output values are determined solely by its current state. A register is used as a storage module to save the output of the combinational circuit.  To determine what gets loaded into the register, it depends on the enable bit and the input.\n"}),a.add({id:131,href:'/notes/CS137/CS137-lecture-20210318/',title:"CS137-lecture-20210318",section:"CS137",content:"FSM cont. #  Design rules #   If we cannot determine function(s) of combinational circuit(s) in advance:  Model FSM as FSD  May need to design bit-slice 1st   Determine number of flip flops (dependent on the number of states you need) Convert the FSD to truth table Find minimal expressions for next state variable(s) and output(s) Draw the complete circuit with flip-flops   Otherwise  Use bit-serial design with known modules Or, bit-parallel design with known modules    Example #  Lets design a Moore state machine that accepts the string   \\( 101 \\)  .\nAs a box diagram:\nStep 1, create a finite state diagram:\n"}),a.add({id:132,href:'/notes/CS137/CS137-lecture-20210330/',title:"CS137-lecture-20210330",section:"CS137",content:"Finite state machine design cont. #  Moore machines #   Output depends only upon present state If input changes, output does not change More number of states are required There is more hardware requirement They react slower to inputs (one clock cycle later) Synchronous output and state generation Output is placed on states Easy to design  Step 1: create a FSD\nStep 2: determine the minimum number of states/bits required to store states\nNumber of bits =   \\( \\lceil \\log_2(k) \\rceil = \\lceil \\log_2(4)\\rceil = 2 \\)  , where  \\( k = \\text{number of states} \\)  .\nStep 3: From FSD, create the truth table for NSG (next state generator)\nWe can let our states be represented by binary values:\n \\( A = 00 \\\\ B = 01 \\\\ C = 10 \\\\ D = 11\\)  We can create our OG (output generator)\nStep 4: Truth table, determine min SOP expression for each state variable  \\( d_1, d_0 \\)  and output  \\( Z \\)  .\nWe can start with  \\( d_0 \\)  , note that  \\( d_0 \\)  is exactly the same as  \\( x \\)  .\n \\[\\begin{aligned} d_0 = x \\end{aligned}\\]  Then we can build a SOP for  \\( d_1 \\)  (and simplify):\n \\[\\begin{aligned} d_1 \u0026amp;= \\overline{x} \\overline{q_1} q_0 \u0026#43; \\overline{x} q_1 q_0 \u0026#43; x q_1 \\overline{q_0} \\\\ \u0026amp;= \\overline{x} (\\overline{q_1} q_0 \u0026#43; q_1 q_0) \u0026#43; x q_1 \\overline{q_0} \\\\ \u0026amp;= \\overline{x} q_0 \u0026#43; x q_1 \\overline{q_0} \\end{aligned}\\]  We can also find the SOP for our output  \\( Z \\)  :\n \\[\\begin{aligned} Z = q_0 q_1 \\end{aligned}\\]  "}),a.add({id:133,href:'/notes/CS137/CS137-lecture-20210401/',title:"CS137-lecture-20210401",section:"CS137",content:"Finite state machine design cont. #  Moore machine design cont. #  Recall\n  \\[\\begin{aligned} d_0 \u0026amp;= x \\\\ d_1 \u0026amp;= \\overline{x} q_0 \u0026#43; x q_1 \\overline{q_0} \\\\ Z \u0026amp;= q_0 q_1 \\end{aligned}\\]  Step 5: Circuit diagram\nMealy machine design #   Output depends on present state as well as present input If input changes, output also changes Less number of states are required There is less hardware requirements They react faster to inputs Asynchronous output generation Output is placed on transitions It is difficult to design  We will design a Mealy machine that detects the same overlapping \u0026ldquo;101\u0026rdquo;.\nStep 1: Generate the FSD (finite state diagram) for the machine\nStep 2: Determine the number of bits needed to store the states\n \\( \\text{number of bits } = \\lceil \\log_2(k) \\rceil = \\lceil \\log_2(3) \\rceil = 2 \\)  , where  \\( k = \\text{ number of states} \\)  Step 3: From FSD, create the truth table where\n \\( A = 00 \\\\ B = 01 \\\\ C = 10 \\\\ D = 11\\)  Note: State \\(D\\) is composed of \u0026ldquo;don\u0026rsquo;t cares.\u0026rdquo;  Step 4: Determine the logical expressions\n \\[\\begin{aligned} d_0 \u0026amp;= x \\\\ d_1 \u0026amp;= q_0 \\\\ Z \u0026amp;= q_1 x \\end{aligned}\\]  Step 5: Draw the circuit diagram\n"}),a.add({id:134,href:'/notes/CS137/CS137-lecture-20210406/',title:"CS137-lecture-20210406",section:"CS137",content:"Mealy machine design cont. #  Recall:\n  \\[\\begin{aligned} d_0 \u0026amp;= x \\\\ d_1 \u0026amp;= q_0 \\\\ Z \u0026amp;= q_1 x \\end{aligned}\\]  Sequential circuits: large design #  "}),a.add({id:135,href:'/notes/CS137/CS137-lecture-20210408/',title:"CS137-lecture-20210408",section:"CS137",content:"Large design sequential circuits #  RTN (register transfer notation) is used to describe an operation of a data path\n Formally describes the data path operation  "}),a.add({id:136,href:'/notes/CS137/CS137-lecture-20210413/',title:"CS137-lecture-20210413",section:"CS137",content:"Sequential circuits, large design cont. #   Data path contains two adder modules and one adder/subtractor module The single mode controls the functions of the adder/subtractor modules    Data path that computes either of these:   \\[\\begin{aligned} \u0026amp;A \u0026#43; B \u0026#43; C \u0026#43; D \\\\ \u0026amp;A \u0026#43; B \u0026#43; C - D \\end{aligned}\\]    Equation that estimates the minimum clock period ( \\( \\tau \\)  ) required to run the data path\n   \\( \\text{add} \\)  stands for adder,  \\( \\text{sub} \\)  stands for subtractor\n   \\( \\Delta \\)  is the time delay from input to output\n   \\( \\tau_p \\geq \\Delta_{\\text{add/sub} } \u0026#43; T_{\\text{st} } \u0026#43; T_{\\text{cq} } \u0026#43; T_{\\text{cs} }\\\\\\)   \\( \\tau_{p} = \\tau_{ \\text{pipeline} } \\)  Speedup equation defines the speed up between a faster system and a slower system.\n"}),a.add({id:137,href:'/notes/CS137/CS137-lecture-20210415/',title:"CS137-lecture-20210415",section:"CS137",content:"Memory technology #  IM = instruction memory, DM = data memory\nRAM = random access memory, ROM = read only memory\nEEPROM = electrically erasable programmable read only memory\nSRAM = static RAM, DRAM = dynamic RAM\nPeak memory bandwidth example #     \\( 32\\text{ bits} \\cdot \\frac{1\\text{ byte} }{8\\text{ bits} } = 4 \\text{ bytes} \\\\ \\)   \\( 1\\text{ MB} = 1,000,000 \\text{ bytes} \\\\ \\)   \\( 1 \\text{ Hz} = 1 \\text{ cycle/second}\\\\ \\)   \\( 1 \\text{ MHz} = 1,000,000 \\text{ cycles/second} \\\\\\)   \\( 100 \\text{ MHz} = 100,000,000 \\text{ cycles/second} \\\\\\)  So,\n \\[\\begin{aligned} 100 \\text{ MHz} \\cdot 4 \\text{ bytes/cycle} \u0026amp;= 400,000,000 \\text{ bytes/sec} \\\\ \u0026amp;= 400 \\text{ MB/sec} \\end{aligned}\\]  SRAM cycle diagrams #  Anything beginning with an underscore _ means it is active low, activated when 0.\n_ce = chip enable, _we 1 = write enable (determines whether in read cycle or write cycle), _oe = output enable.\nTri-state buffer #  hi-Z = high impedance\n"}),a.add({id:138,href:'/notes/CS138/CS138-lecture-20210126/',title:"CS138-lecture-20210126",section:"CS138",content:"syllabus_CSC138.pdf\n"}),a.add({id:139,href:'/notes/CS138/CS138-lecture-20210128/',title:"CS138-lecture-20210128",section:"CS138",content:"Chapter_1_Intorduction to Computer Networks and the Internet.pdf\n"}),a.add({id:140,href:'/notes/CS138/CS138-lecture-20210202/',title:"CS138-lecture-20210202",section:"CS138",content:"NAT = network address translator\nThe packet transmission delay is the delay that it takes your computer to send the packet to the link. (Your car from the garage to the driveway).\nHFC = hybrid fiber coax\nWithout fiber optic cable we could not span networks across oceans.\nBetween the source and destination, what if there are N routers?\n  \\( (N\u0026#43;1) \\frac{L}{R} \\)  The entire packet must fully arrive at the router before being transmitted. The packet holds the information on where it needs to go, so it needs to be fully stored before being forwarded.\nQueue = \u0026ldquo;waiting in line\u0026rdquo;\nhttps://wps.pearsoned.com/ecs_kurose_compnetw_6/216/55463/14198700.cw/index.html\n"}),a.add({id:141,href:'/notes/CS138/CS138-lecture-20210204/',title:"CS138-lecture-20210204",section:"CS138",content:"FDM = frequency division multiplexer TDM = time division multiplexer\n"}),a.add({id:142,href:'/notes/CS138/CS138-lecture-20210209/',title:"CS138-lecture-20210209",section:"CS138",content:"The jump from 11 to 12 is crossing the atlantic ocean.\nSo the answer is min(Rs, Rc).\nLayering can be harmful because each layer is only responsible for its own job, so if the presentation layer doesn\u0026rsquo;t encrypt, no other layers job to do that.\nInternet protocol stack is a practical perspective, ISO/OSI reference model is a reference perspective. The missing layers (presentation, session) must be implemented in the application layer if needed.\n"}),a.add({id:143,href:'/notes/CS138/CS138-lecture-20210211/',title:"CS138-lecture-20210211",section:"CS138",content:"RE: Wireshark lab 1. This is an intro to the wireshark software.\nobserve that the en0 has activity. Double click the card with activity to start packet analyzing.\n Hl = MAC address, Hn = IP address, Ht = port number\nEach time the packet goes thru a router, it must go up to the network layer and back down.\nAt the destination, the layers are removed on the way up to the application layer.\nTransport layer: port number, Network layer: IP address, Link layer: MAC address\nMost important things about encapsulation:\n End systems have all the layers, but a switch only has 2 layers, and a router only has 3 layers. On end systems, when packets are generated and sent, headers are added layer by layer. When the packets are received by the final destination, headers will be removed one by one. On switch/routers, the packet will need to go up and down each layer, for error checking or extracting information from headers for routing/forwarding. Some other actions may be taken as well, including the update of link layer header.  Emails can also be spoofed:\nCh 2 #  Chapter_2_Application Layer.pdf\n"}),a.add({id:144,href:'/notes/CS138/CS138-lecture-20210216/',title:"CS138-lecture-20210216",section:"CS138",content:"Broadcast can only be based on UDP, because you don\u0026rsquo;t know where to make a connection.\n11 tcp connections are needed in total\nRTT = round trip time\n"}),a.add({id:145,href:'/notes/CS138/CS138-lecture-20210218/',title:"CS138-lecture-20210218",section:"CS138",content:"https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/http-delay-estimation/index.html\nIn piplining, the object requests are \u0026ldquo;back to back\u0026rdquo;\nThe proxy server can have a web cache copy so it doesn\u0026rsquo;t have to request the origin again.\nCache\n hit, the request was cached miss, the request was not cached  "}),a.add({id:146,href:'/notes/CS138/CS138-lecture-20210223/',title:"CS138-lecture-20210223",section:"CS138",content:"Average rate to browsers:\n  \\[\\begin{aligned} 100\\text{ K } \\cdot 15/\\text{ sec } = 1.5 \\text{ MBps } \\end{aligned}\\]  So our LAN utilization is:\n \\[\\begin{aligned} \\frac{1.5 \\text{ Mbps }}{10 \\text{ Mbps}} = 15\\% \\end{aligned}\\]  And the access link utilization is:\n \\[\\begin{aligned} \\frac{1.5 \\text{ Mbps }}{1.54 \\text{ Mbps}} = 99\\% \\end{aligned}\\]  Access link utilization:\n \\[\\begin{aligned} 99\\% \\cdot 0.6 = 58\\% \\end{aligned}\\]  Total delay:\n \\[\\begin{aligned} 0.6 \\cdot (\\text{delay from origin}) \u0026#43; 0.4 \\cdot (\\text{delay when satisfied from cache}) \\end{aligned}\\]   FTP uses port: 21\n SMTP uses port: 25\nThe servers will play both roles, i.e. Gmail server will play the client and the Yahoo server will play the server. If they do the opposite then their roles will swap.\n"}),a.add({id:147,href:'/notes/CS138/CS138-lecture-20210225/',title:"CS138-lecture-20210225",section:"CS138",content:"Domain name system #  DNS is a application layer service, it is run at the network edge.\n ttl = \u0026ldquo;time to leave\u0026rdquo;, expiration time NS = name server, this is the point of contact CNAME = canonical name, this is where you can specify a smaller name for a long name MX = mailserver  Query and response are the same format.\ndig asks for the IP address of a site.\n"}),a.add({id:148,href:'/notes/CS138/CS138-lecture-20210302/',title:"CS138-lecture-20210302",section:"CS138",content:"DNS cont. #  For a backup authoritative DNS server (secondary), resource records inserted into .com TLD DNS server, by DNS registrar:\n(networkutopia.com, dns2.networkutopia.com, NS, TTL) (dns2.networkutopia.com, 212.212.212.2, A, TTL) In your company\u0026rsquo;s authoritative DNS server, you should have the following resource records for web server, email server (etc):\n(www.networkutopia.com, somethingelse.networkutopia.com, CNAME, TTL) (somethingelse.networkutopia.com, 212.212.212.56, A, TTL) (networkutopia.com, mailserver.networkutopia.com, MX, TTL) (mailserver.networkutopia.com, 212.212.212.89, A, TTL) DNS Poisoning #  Lets say its the first time that we are visiting a site, we will first ask the local DNS \u0026hellip;\nWhat if a man in the middle (in the same local area network with client), he can intercept the query from the client.\nAt the 7th step, the man in the middle can send a reply on behalf of the root.\nThe faked 7th step is a bogus answer to the clients query.\nSo if we\u0026rsquo;re asking for www.abcd.com, and the real address is 123.54.8.9, the bogus answer will respond with a different IP address. The bogus IP will arrive at the local DNS before the real one will, and it will be cached. If the faked website looks identical to the real one, they can have their information stolen.\nDNS-based DDoS #  Query: what is the IP address for www.abcd.com? The source IP should be the client\u0026rsquo;s IP.\nBut what if the client is part of the attack? So maybe the query is actually: what is the IP address for www.abcd.com, BUT the client changed their source IP address to be the same IP as (for example) Google? So this will redirect step 8 back to Google:\nWhat if we can manage to have 1 million machines do the same thing?\nThis can overwhelm the server.\nP2P (Peer to peer) #  This increases linearly with   \\( N \\)  .\n"}),a.add({id:149,href:'/notes/CS138/CS138-lecture-20210304/',title:"CS138-lecture-20210304",section:"CS138",content:"Socket programming #  UDP Client in Python #  SOCK_DGRAM means it will use UDP. The server\u0026rsquo;s socket is always open.\nUDPClient.py:\nfrom socket import * serverName = \u0026#39;hostname\u0026#39; serverPort = 12000 clientSocket = socket(AF_NET, SOCK_DGRAM) message = raw_input(\u0026#39;Input lowercase sentence:\u0026#39;) clientSocket.sendto(message, (serverName, serverPort)) modifiedMessage, serverAddress = clientSocket.recvfrom(2048) print modifiedMessage clientSocket.close() UDPServer.py\nfrom socket import * serverPort = 12000 serverSocket = socket(AF_INET, SOCK_DGRAM) serverSocket.bind((\u0026#39;\u0026#39;, serverPort)) print \u0026#39;The server is ready to receieve\u0026#39; while 1: message, clientAddress = serverSocket.recvfrom(2048) modifiedMessage = message.upper() serverSocket.sendto(modifiedMessage, clientAddress) Port numbers should be between 1024-65536.\nTCP Client in Python #  SOCK_STREAM means it will use TCP.\nTCPClient.py\nfrom socket import * serverName = \u0026#39;servername\u0026#39; serverPort = 12000 clientSocket = socket(AF_NET, SOCK_STREAM) clientSocket.connect((serverName, serverPort)) sentence = raw_input(\u0026#39;Input a lowercase sentence:\u0026#39;) clientSocket.send(sentence) modifiedSentence = clientSocket.recv(1024) print \u0026#39;From server:\u0026#39;, modifiedSentence clientSocket.close() TCPServer.py\nfrom socket import * serverPort = 12000 serverSocket = socket(AF_INET, SOCK_STREAM) serverSocket.bind((\u0026#39;\u0026#39;, serverPort)) serverSocket.listen(1) print \u0026#39;The server is ready\u0026#39; while 1: connectionSocket, addr = serverSocket.accept() sentence = connectionSocket.recv(1024) capitalizedSentence = sentence.upper() connectionSocket.send(capitalizedSentence) connectionSocket.close() "}),a.add({id:150,href:'/notes/CS138/CS138-lecture-20210309/',title:"CS138-lecture-20210309",section:"CS138",content:"Transport Layer #  Transport services #   Application Layer  App \u0026lt;-\u0026gt; app such as Outlook (email)   Transport layer  Process \u0026lt;-\u0026gt; process Data -\u0026gt; segments/datagrams Segment contains transport header + data portions from email   Network layer  Machine \u0026lt;-\u0026gt; machine Network header + segment    Rectangle = app, Diamond = socket, Circle = process\nMultiplexing/demultiplexing #  Connectionless transport: UDP #  "}),a.add({id:151,href:'/notes/CS138/CS138-lecture-20210311/',title:"CS138-lecture-20210311",section:"CS138",content:"UDP cont. #  Principles of reliable data transfer #  Expected features\n No bit errors No loss of data   Problems\n Bit error Data loss   Solutions\n Error detection (checksum) Data recovery    So how do we do recovery? We learn from human to human conversation, \u0026ldquo;pardon?\u0026quot; to recover data loss in the conversation.\nFeedback: ACK for positive, NAK for negative.\nSo the receiver will send an ACK if the packet was received without loss, otherwise it\u0026rsquo;ll send NAK. Then, from the sender\u0026rsquo;s perspective it will move on to the next data transmission if ACK is received from receiver. Otherwise, (NAK from receiver) it will retransmit the last data until an ACK is received.\nSo we have a new problem, what if ACK/NAK is corrupted on the way back?\nThe sender has no way to find out whether the current packet was successful or not. We can allow the sender to retransmit the data, but it can cause duplicates on the receiver\u0026rsquo;s side. To avoid and handle duplicates, the sender adds a sequence number to each packet, this way the receiver can discard duplicates.\nWe have to stop and wait, each time we only transmit one single packet. If we\u0026rsquo;re only sending 1 packet at a time, when we wait until its successful each time we give it a sequence number, so we actually only need 2 different sequence numbers.\npkt 0\u0026hellip; pkt 1\u0026hellip; pkt 0\u0026hellip; pkt 1\u0026hellip; etc\nWhat if the ACK response is corrupted?\nIf the sender receives the same ACK for the same packet, then that must mean that the last packet was corrupted during transmission. Instead of sending NAK for the current packet, it is equivalent of sending the ACK for the last packet. This tells the sender that the current packet wasn\u0026rsquo;t successful, and the sender should retransmit.\nNAK 1 -\u0026gt; ACK 0;\nNAK 0 -\u0026gt; ACK 1;\nIf the first packet has a problem, then simply no response shows that it had a problem.\n"}),a.add({id:152,href:'/notes/CS138/CS138-lecture-20210316/',title:"CS138-lecture-20210316",section:"CS138",content:'Review for exam #  Example question set for Ch 1-2 #    What are the layers in TCP/IP protocol stack?\nApplication, transport, network, link, physical\n  What are layers in OSI reference model?\nExtra 2 layers are presentation and\n  What is the major difference between packet switching and circuit switching?\nCircuit reserves some resources, packet switchings allows sharing\n  What is the difference between routing and forwarding?\nRouter is global, forwarding is local\n  What is the relationship between routing and forwarding?\nInterplay\n  How many types of packet delay does a network have?\n4, nodal processing, packet transmission, propagation delay, queueing delay\n  Which tool/utility/program can be used to find out the IP address of the routers on the path from one source and destination?\ntraceroute\n  Which tool/utility/program can be used to intercept and analyze network packets?\nWireshark\n  On which layer is SSL/TLS implemented for network security?\nApplication layer\n  What does DDoS mean?\nDistributed denial of service\n  Among HTTP, FTP, SMTP, DNS, which protocols use TCP?\nHTTP, FTP, SMTP\n  What are the service port numbers for HTTP, FTP, SMTP, DNS respectively?\n80, 21/20, 25, 53\n  What is the major difference between persistent and non-persistent modes of HTTP?\nPersistent allows one connection to be shared by multiple object transmissions. Non-persistent must have a connectino for each object transmission.\n  What is the major difference between Client/Server model and P2P model?\nClient/server has an always on server, P2P doesn\u0026rsquo;t have a server (everyone is a peer)\n  Where is URL specified in HTTP request format?\nIn the first line (the request line) of request format\n  Where is the status code specified in HTTP response format?\nIn the first line, the status line\n  Is web cache a client or server for the original browser who sent the request to get one object?\nServer\n  What benefits come from the conditional get technology? (at least 2 examples)\nNo object transmission delay, lower link utilization\n  What is the major difference between SMTP and POP/IMAP?\nPush versus pull\n  What is the format for DNS resource records? (RR)\nName, value, type, TTL\n  Among the socket library functions, what are used by TCP and what are used by UDP?\nTCP: UDP:\n  What is the major difference between TCP and UDP?\nTCP has a handshake, and is reliable. UDP is non-reliable\n  True or false questions #   Internet is a single network? (F) DNS runs on routers as it\u0026rsquo;s a network core function. (F) A network alyer does not need to rely on any service from its below layer. (F) TCP is a protocol on Application layer. (F) FDM/TDM is a pcket switching protocol (F) It\u0026rsquo;s impossible to have packet loss as the network is supposed to guarantee reliability (F) All the packet headers are added to data at application layer when the data leaves the application program (F) Routers support all seven layers of the OSI reference model (F) SMTP is a P2P protocol and there is no client in its communications (F) SMTP is a pull protocol (F)  Long answer questions #   Cookie scenario in slides of ch. 1. How many components to make cookie system function? What are they respectively? What are their functionalities respectively? Especially, what cookie header lines in the first HTTP response message and next HTTP request messages?  There are four functions. Cookie on client, database on server, header line with cookie ID, header line from server. Database on server side contains all the info, cookie contains the ID, all future client/server messages have ID in headers.\nTo insert resource records into DNS, what steps are needed? What RRs are inserted? Refer to the slides in Ch. 2  What are the functions related to TCP and UDP socket programming?  UDP cont. #  If packet isn\u0026rsquo;t lost:\n mermaid.initialize({ "flowchart": { "useMaxWidth":true }, "theme": "default" } ) sequenceDiagram participant S as Sender participant R as Receiver S - R: send pkt 0 R - S: ack 0 S - R: pkt 1 R - S: ack 1 S - R: pkt 0 In case d, the functionality still works but the performance is poor, because each packet is transmitted twice after the first premature timeout.\nRTT = round trip time\n'}),a.add({id:153,href:'/notes/CS138/CS138-lecture-20210330/',title:"CS138-lecture-20210330",section:"CS138",content:"Piplined protocols #  Go-back-n #  unacked = unacknowledged = no ACK response, not confirmed for success yet.\nThe number of bits needed for a   \\( k \\)  -bit sequence numbers is  \\( 2^k - 1 \\)  . The window size is  \\( N = 2^k \\)  .\nThe packet number that can be used for cumulative ack should be the largest number before any gap.  https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/go-back-n-protocol/index.html\n Send window size  \\( N \\)  : it can send up to  \\( N \\)  packets on the fly Cumulative ACK ( \\( m \\)  ): means that packet  \\( m \\)  and also every packet before  \\( m \\)  are all received successfully Timer: only a single timer, bound to the oldest packet unacked. When timeout, resend all packets in the sender window. On receiver side, all packets after the gap are called \u0026ldquo;out of order\u0026rdquo;, and they are discarded. Hence, there can only be one gap.  Selective repeat #  For selective repeat, there is still  \\( k \\)  -bit sequence numbers, and a window size of  \\( N = 2^{k - 1} \\)  . The largest number is  \\( 2^{k - 1} - 1 \\)  .\n Send up to  \\( N \\)  packets: controlled by sender window size  \\( N \\)  . Individual ACK: the particular packet received successfully. Timer: there is one timer for each unacked packet. When timeout happens, the sender only resends the particular packet. On receiver side: packets after gap are called \u0026ldquo;out of order\u0026rdquo;, but this time they are buffered, waiting to be delivered.  https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html\nSo to combat this, if  \\( k = 2 \\)  , then the size of the window should be  \\( N = 2^{2-1} = 2 \\)  . The largest sequence number is  \\( 2^{1 - 1} = 1 \\)  .\n"}),a.add({id:154,href:'/notes/CS138/CS138-lecture-20210401/',title:"CS138-lecture-20210401",section:"CS138",content:"Connection oriented transport: TCP #  Entire header size is   \\( 32 \\text{ bits } \\cdot 5 = 160 \\text{ bits } = 20 \\text{ bytes } \\)  . The receive window is used for flow control.\nSequence number example:\nBoth sides randomize the sequence number they will use at the beginning.\nReliable data transfer #  Flow control #  The difference between flow control and congestion control:\n Flow control is to make sure the receiver is not overwhelmed Congestion control is to make sure that the road (routers, other resources) is not overwhelmed  "}),a.add({id:155,href:'/notes/CS138/CS138-lecture-20210406/',title:"CS138-lecture-20210406",section:"CS138",content:"TCP Cont. #  Flow control #  rwnd = receive window\nConnection management #  TCP 3-way handshake steps:\n SYN = 1, ACK = 0: SYN packet SYN = 1, ACK = 1: SYNACK packet SYN = 0, ACK = 1: ACK packet. This packet can contain real data from client to server.  Principles of congestion control #  In a perfect world:   \\( \\lambda_{\\text{in} } = \\lambda_{\\text{out} } \\)  , however this is not usually the case.\nCauses/costs of congestion:\n When data is lost, TCP will retransmit such data. This causes what is sent by sender to be bigger than expected. When premature timeout happens, the data will be re transmitted unnecessarily, which causes corresponding data to be sent twice or more. This also causes what is sent by the sender to be bigger than expected.  When one packet is dropped by one router, then all network resources/capacity used for this packet were wasted.  ssthresh is a parameter. It starts at an initial value, but will be dynamically change to half of the value before congestion.\nTCP congestion control phases:\n Slow start. It is exponentially growing at the beginning. Congestion avoidance. When you reach the threshold, TCP asks to slow down, from exponential to linear growth. Fast recovery. When a timeout happens, or when data loss happens, it indicates that possible traffic congestion has occurred. For fast recovery, TCP Reno and TCP Tahoe are different (drop to half vs drop to 1).  MSS = maximum segment size\nFast recovery:\n Data loss can be indicated by timeout or triple duplicate ACKs. TCP Tahoe always drops to 1, no matter if timeout or triple duplicate ACKs. TCP Reno  When timeout happens, it drops to 1 When triple duplicate ACKs happen, it drops to half    ssthresh is set to half of the cwnd (congestion window size) before congestion occurred.\nAIMD = additive increase multiplicative increase\nThis entire philosophy basically probes for usable bandwidth.\n"}),a.add({id:156,href:'/notes/CS138/CS138-lecture-20210408/',title:"CS138-lecture-20210408",section:"CS138",content:"SMTP socket programming assignment #  TCP cont. #  Congestion control #  https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/tcp-congestion/index.html\nThroughput #  Fairness #  Network layer #  Quick review\n The application layer is app to app. Transport layer is process to process Network layer is device to device (machine to machine), including routers  ATM = asynchronous transfer model\nFor internet\n Connection is at transport layer (TCP) Datagrams (network connectionless)   ATM/X.25/Frame relay\n Virtual connection is at network layer Virtual circuits (network layer connection)  Note: The current internet does not use this    Network service model #  Analogy: this is like the distance between cars on the road.\nCBR = constant bit rate, VBR = variable bit rate, AVB = available bit rate, UBR = undefined bit rate\nIn our internet service model, we do not guarantee anything. If we want to guarantee anything it must be done in the transport layer.\nVirtual circuits and datagram networks #  "}),a.add({id:157,href:'/notes/CS138/CS138-lecture-20210413/',title:"CS138-lecture-20210413",section:"CS138",content:"Review #   Devices, links, packet switches Protocols define format and order of messages sent and received among network entities Routers Routing and forwarding Packet switching   Worms do not need user\u0026rsquo;s interaction, viruses do Distributed denial of service. TLD name servers are easier to attack Recording packets passing through network Sends a packet with a forced source address Sends bogus replies to the DNS servers   P2P is more scalable IP address and port number TCP, because it is reliable TCP SSL is implemented at the app layer   Persistent allows multiple objects to be sent over a single connection set-cookie cookie Database or back end Cookie file managed by browser   host to IP mapping, host nick name, mail server nick name, load distribution iterative and recursive (fruit.com, dns.fruit.com, NS), (dns.fruit.com, 192.168.112.0, A)   The rarest chunk first, B The top 4 peers that seed her the most   SOCK_DGRAM sendto The client needs to close, but the server\u0026rsquo;s socket is reused 1 global socket to hand shake, 1 per connected client The socket connected to the client can be closed. The hand shake socket stays open.   application, presentation, session, transport, network, link, physical presentation and session save time, save bandwidth, save traffic if-modified-since 304 not modified      \\( \\frac{L}{R} = \\frac{30}{3} \u0026#43; \\frac{30}{5} \u0026#43; \\frac{30}{10} = 19 \\)    \\( \\frac{D}{S} = \\frac{100}{20} = 5 \\)    \\( 19 \u0026#43;5 \u0026#43; 2(2) \u0026#43; 1(2) = 30 \\)   queuing 3 Gbps is the bottleneck   SMTP or HTTP SMTP POP3 or IMAP or HTTP port 25 TCP  Network layer cont #  TCP vs UDP\n Transport layer connection vs connectionless Programmers have the choice to use TCP or UDP, by giving different parameters to the socket function Process to process Done within network devices   Datagram vs Virtual circuit\n Network layer connection vs connectionless No choice for programmers, the network provides one or the other Host to host Done on network core (routers)    Our internet uses Datagrams, hence it is connectionless on the network layer. We use TCP to get a connection service at the transport layer.\nVirtual circuits (VC) #  Datagram networks #  Datagram vs VC overview #  What\u0026rsquo;s inside a router #  "}),a.add({id:158,href:'/notes/CS138/CS138-lecture-20210415/',title:"CS138-lecture-20210415",section:"CS138",content:"Network layer cont. #  Switching fabrics #  Since data can flow bidirectionally, inputs can become outputs, and vice versa.\nOutput ports #  Input port queueing #  IP: Internet Protocol #  ICMP = internet control message protocol\nDatagram format #  The header is 20 bytes long.\nUpper layer can be TCP or UDP, or ICMP\nA type could be multimedia, satellite signal etc, used for priority.\nIP Fragmentation #  MTU = max transfer size\nThe original is 4000 bytes, but the MTU is 1500 bytes. So the original will be fragmented to accommodate the MTU.\nNote: IP header is in every fragment, but the TCP header is only in the first. The TCP header is regarded as payload at the network layer.  IPv4 #  NIC = network interface card\nA.B.C.D where each letter is 8 bits, so 32 bits total.\nSubnets #  "}),a.add({id:159,href:'/notes/CS138/CS138-lecture-20210420/',title:"CS138-lecture-20210420",section:"CS138",content:"Internet Protocol cont. #  Subnets cont. #  There are 6 subnets.\n192.192.134.1/24 means that the first 24 bits are the subnet mask, it is the network part of the address. A smaller sub set of the larger network could possibly be 192.192.134.1/26.\nDHCP #  The IP address 255.255.255.255 means that it will be broadcast to everyone in the network.\nNote: DHCP is in the application layer. DHCP uses UDP because of the fact that it needs to broadcast.  When connecting to a network for the first time, the DHCP server will be the first to help you.\nNAT #  Address shortage is the fact that there are only a finite number of IP addressed to be allocated.\nSolution 1 is manual configuration.\nICMP #  Note: ICMP is a network layer protocol but its used like a transport layer protocol.  IPv6 #  QoS = quality of service\n"}),a.add({id:160,href:'/notes/CS26/CS26-lecture-notes/',title:"CS26-lecture-notes",section:"CS26",content:"CS 26 Lecture Notes #  Jan 28, 2019 #  Introduction #  Discrete: Not \u0026ldquo;discreet\u0026rdquo;, opposite of continuous, goes in steps. The graphs we worked with can only be expanded in steps, you can\u0026rsquo;t add a half edge or half vertex.\nStructure: a set of related values and the operations on them. (integers, graphs).\nLike a venn diagram of math and computer science, discrete structures is the combination.\n Jan 30, 2019 #  Binary Numbers #  Spending method: 89 can be converted to decimal by \u0026ldquo;buying\u0026rdquo; the most expensive thing you can from the powers of two.\nRepeated division: 89 can be repeatedly divided by 2. the remainders in reverse order will be the binary number.\nHexadecimal - Base 16 Using higher bases means you can pack more information into a smaller space.\nBase 32 uses 1..9A..V Can be easily converted from binary by using groups of 5 bits.\nBase 64 uses 1..9A..Za..z+/ Can be easily converted from binary by using groups of 6 bits. Starts from the beginning of the file, grouping into 6 bits then padded with an equals sign (=) for each 2 bits left over.\nAll data is just numbers. How you \u0026ldquo;chunk it up\u0026rdquo; is just a way of representation the information.\n Feb 4, 2019 #  Signed Integers #   2\u0026rsquo;s complement  In 2\u0026rsquo;s complement subtracting and addition are the same operation. To subtract, add the negative version of the number. The result will be in 2\u0026rsquo;s complement, which needs context to be understood. Without context, there is no way to know which. The CPU does not know (and doesn\u0026rsquo;t care) whether we are using unsigned or 2s complement numbers.   Sign-magnitude  MSB is the sign bit, 1 means negative, 0 means positive.   Excess-n or Excess-k  Splits the numbers in but not in half. It is shifted down to accomodate however many negative numbers you need.    Pros\n Signed magnitude  Easy for humans Symmetric range LSB shows even/odd MSB is pos/neg   2s Complement  Easy arithmetic LSB is even/odd MSB is pos/neg   Excess-n  Easy negation (add or subtract) Definable range    Cons\n Signed magnitude  Two zeros difficult for computers   2s complement  Negation more difficult (than signed magnitude)   Excess-n   Feb 6, 2019 #  Non-integral numbers #  110.101 = 6.625\nThe places to the right of the radix are still powers of 2 (negative powers)\nCertain numbers cannot be broken down into base 2 (for instance 7.6, .6 cannot be broken down into powers of 2). When sending floating point numbers, the radix point cannot be shown in 1s and 0s. You can agree on where the radix point will go before hand, which is called fixed-point.\nFixed point #  ___.___, the radix point isn\u0026rsquo;t sent along, its just agreed upon where it will be. 0b1101 1100 would turn into 1101.1100)\nFloating point #  IEEE-754 is the standard for floating point numbers. Floating point numbers is essentially scientific notation but in binary.\n$-6.521 x 10^27$\nThe three parts you need to pay attention to are the sign, the mantissa (the number after the sign) and the exponent. Numbers must be normalized ($.0314).\nModified IEEE-754 (8 bits): Trade off between precision and range. Will use 1 bit for the sign (MSB), 4 bits for exponent, and 3 for mantissa.\n_ _ _ _ _ _ _ _\nSign\n 0 is pos 1 is neg  Exponent\n Represented in excess-n  Mantissa\n Fractional binary  The leftmost digit after normalized is always a 1, so that can be ommited when transfering to a floating point number. IEEE-754 says if you are using 4 bits for exponent, you should use excess-7. To find the number of bits to shift by you should use $n = 2^{b-1} - 1$ where $b$ is the number of bits used to express the exponent.\nRange of values\n Smallest positive value (in our modified 8 bit version, in the real version it says if all bits are 0 then the number is 0)  0b0000 0000 = $1.000 x 2^-7$ = $1/128$   Largest positive value  0b0111 1111 = $1.111 x 2^8$ = $480$   Next largest  0b1111 1110 = $1.110 x 2^8$ = $448$     Feb 11, 2019 #  Gates and Logic #  74163 - 4 bit counter 74138 - 3 to 8 bit decoder 7400 - NAND\nThese chips can be mounted on PCBs to make a computer.\nTwo circuits/expressions are equivalent if they have the same truth tables.\nNAND is a universal gate, meaning you can make any other gate out of just NANDs.\n Feb 13, 2019 #  Boolean Logic #  Boolean expressions are equivalent if they have the same truth table. To flip the output of a truth table over, not the result.\n Feb 20, 2019 #  Karnaugh Maps #  How to:\n Get expression into SoP (Sum of products) or DNF (Disjunctive normal form) Make grid, label axes, use grade code to fill out any multiple variable columns Dot boxes for each term Circle adjacent dots  As big as possible Dimensions of circle must be powers of 2 As few circles as possible to cover all dots Overlap circles in order to make them as big as possible   Each circle is a term in the minimized expression  Lab 3: Satisfiability #  pseudo:\nfor x from 0 to 1 for y from 0 to 1 for x from 0 to 1 if x == 0 or y == 1 and z == 1 or y == 0 print x, y, z  Feb 27, 2019 #  Modular Arithmetic and Cryptography #  Overview\n Shift cipher (Caesar) Linear cipher Vigenere cipher Hasing and passwords Symmetric key crypto Public key crypto  Encoding is just transforming from one form to another. There isn\u0026rsquo;t any secret information, you just need to know what algorithm is being used. Cryptography uses encoding with some secret information to make the algorithm harder to decode.\nModular arithmetic\n 18 + 35 mod 7 = 18 18 + 35 (mod 7) = 4\n These expressions are not the same. The first expression the mod is only applying to the 35, whereas the second expression mods the entire sum of whats on the left before mod. Congruent numbers are numbers that land on the same spot in the mod circle.\nRemainder vs modulo\nRemainders can be negative, and modulos is always positive.\nArithmetic properties\nSum\n 123456 + 7891011 (mod 79)) (a + b) mod n)\n To do this on the normal calculator, divide the numbers, minus the quotient, then multiply by the mod number.\nMultiplication\n Multiplication\n Exponents\n 456^789 mod 79 = 58 (456 mod 79)^789 = 58\n You can mod the base but not the exponent!\nPreview of RSA\n Plaintext  the message you want to encrypt   Ciphertext  the encrypted message This is basically the $c = p^{e} mod n$  c = cihper text p = plain text e) n \u0026gt; p (n can be as big as 400 digits long)       (40 digits)^(200 digits) mod (400 digits)\n  17^123 (mod 19) = 17^100 * 17^23 = 17^50 * 17^50 * 17^23\n  Mar 4, 2019 #  Test 1 #   Opens Friday 8a, closes Mon 8a You have 3 hours to finish once you start  Most people need about 1 hour   Covers  Binary Signed integers Gates and circuits Boolean logic K-maps Floating-point   Work on seperate sheet of paper. Turn in paper next class to get partial credit for problems.  Linear cipher #  Formula\n c)  n is size of alphabet c is cipher text p is plaintext m is multiplier    In python:\nlinear(p, m, k): return (p * m + k) % n The process looks like this, using m = 5 and k = 7\nC A T plaintext 02 00 19 coded 17 07 102 multiplied and shifted 17 07 24 mod 26 R H Y ciphertext To decipher\n Must know m and k, and reverse the process  What makes good numbers for m and k?\n m should be greater then 0 and less than n  If you multiply by anything over n it is the same as multiplying as numbers that are less then n. Multiplying by n is the same as multiplying by 0   k should be greater than or equal to 0 and less than n  Anything below 0 or above n is no point   m and n should have no common factors! (coprime, or relatively prime) This creates non-1:1 mappings!  An example in python, using m = 22 and k = 24:\nfor p in range(0, 26): c) % 26 print(p, c) This pattern creates repeating numbers that don\u0026rsquo;t map 1:1 anymore with numbers, so it isn\u0026rsquo;t a good choice for a multiplier and shift.\nField\n A set of values on which the following operations are defined:  Addition Multiplication Additive inverse Multiplicative inverse    Euler\u0026rsquo;s Totient Function\n How many numbers less the number are coprimes of the number. Properties  If n is prime  then φ(n) = n-1   If n = a * b, a and b are coprime and a ≠ b  then φ(n))   If n)  then φ(n))      Euler\u0026rsquo;s Theorem\n a^φ(n)), if a and n are coprime   Mar 6, 2019 #  Greatest Common Divisor #  gcd(15, 21) = 3 gcd(90, 60) = 30\nEuclidean Algorithm\n gcd(a, 0) = a gcd(a, b))  Example: gcd(90, 60)) = 30\ngcd(15, 270)) = 15\nIn a python function:\ndef gcd(a, b): if b == 0: return a else: return gcd(b, a % b) Extended Euclidean Algorithm\n ax + by)  You give it a and b, it returns x and y    Try:\na = 60\nb = 90\n60x + 90y)\n60x + 90y = 30\n2x + 3y = 1\nx = -1, y = 1\nx = 2, y = -1\nx = 5, y = -3\negcd(15, 21)\n15x + 21y)\n15x + 21 y = 3\n5x + 7y = 1\nx = 3, y = -2\nx = -4, y = 3\negcd(15, 26)\n15x + 26 y)\n15x + 26y = 1\nx = 7, y = -4\n15 * 7 (mod 26) = 1\nx is the multiplicative inverse of a mod b\nLab 5 #  Linear cipher\n To encrypt:  c = pm + k % n   To decrypt  c) m^-1 % n  m^-1 % n is the multiplicative inverse      To calculate multiplicative inverse use the Extended Euclidean Algorithm egcd(a, 0))\negcd(a, b))\n q equals to a//b r equals a mod b (s, t))  In python:\ndef egcd(a, b): if b == 0: return (1, 0) else: q = a // b r = a % b (s, t)) return (t, s - q * t)  Mar 11, 2019 #  Pseudo Random Number Generator (PRNG) #  In 1946, Von Neumann proposed a random number generator:\n Start with a 4 digit number Square it Extract the middle 4 digits Use this pseudo random number as the seed for the next  The PRNG gets a seed as input, which is then put through a calculation, and the output is your pseudo random number. The output can then be used as a seed for the next random number.\ndef vn(seed); sq = seed * seed # divide by 100 using integer division to remove the rightmost 2 digits, then mod by 10k to keep the rightmost 4 digits rnd = sq // 100 % 10000 return rnd s = 4321 for i in range(100): r) print(r) s = r Linear Congruential Generators (LCG) #  The formula: rand)\nJust like our linear cipher, the multiplier and mod number must be coprime. N is the length of the cycle. Any seed you pick will be one of the values in the cycle. This is useful for debugging programs that use a random number generator to see if they are working before letting them loose with random seeds. Inside the computer at a random place in memory, the OS keeps whats called a \u0026ldquo;Pool of entropy\u0026rdquo;, which stores random bits to be used as starting points for random seeds, this is replenished by random events such as network activity times or times between keypresses etc.\nConcerning domain and range:\n If every value in the domain has a 1:1 value in the range, this is called bijection (good for crypto). If If every value has a many:1 value in the range, this is called a surjection (not good for crypto). This can\u0026rsquo;t be reversed (its a one way function)  Checksums #  A small number calculated from data being sent that is used to verify the integrity of the data. Designed to be very fast to compute, can catch common problems, not to be used for encryption though.\nLuhn algorithm:\n4539 7043 5470 6391 double every other digit insert other digits sum up all the resulting single digits If sum is multiple of 10, it\u0026rsquo;s good! This is designed to catch common data entry errors.\n Transposing adjacent digits Mistyping one digit  Hash #  A checksum that is much harder to compute, and used to verify the integrity of a file\n   Hash Bits     MD5 128 bits   SHA256 256 bits   SHA512 512 bits   RipeMD-160 160 bits    These hash values has the same idea as a checksum, but are much bigger. This can be analogous with a coffee grinder. The grinder grinds up a bunch of beans, then a scoop is taken out (the hash). These can\u0026rsquo;t be reversed because only a portion of the \u0026ldquo;beans\u0026rdquo; were used as the hash. If working with a huge file (a bucket of beans), a scoop is taken, grinded, then a scoop of that is taken and added to another scoop of beans, where the process repeats. This gives an even representation of the file.\nBash:\necho -n \u0026#34;Hello\u0026#34; | md5 echo -n \u0026#34;Hola\u0026#34; | md5 These hashs work in a chain, and use the last \u0026ldquo;scoop\u0026rdquo; in the next so that the entire data structure is represented. The domain is almost infinity, and the range is 2^ number of bits in hash. The chances of 2 documents having the same checksum is 1 in 2^b where b is the number of bits\n Mar 13, 2019 #  More hashing #   MD5  Message digest version 5   SHA256  Secure hashing algorithm   SHA512 RipeMD-160  How many possible n-char passwords?\n 8 character password (only letters)  52^8 = 5.3e13   8 character with numbers  62^8 = 2.2e14   9 character only letters  52^9 = 2.7e15    What makes a good hashing algorithm?\n Should be computationally expensive, but not too expensive  MD5 used to be considered a good hash, now it is too easy (fast)   Outputs should be evenly distributed  Think plotting the on a histogram   Easy to go one way, hard to go the other Pre-image resistance  For a given hash (h) it should be hard to guess the original message (m), such that hash(m) = h   Second pre-image resistance  For a given message (m1), it\u0026rsquo;s hard to find another message (m2), such that hash(m1))   Collision resistance  Hard to find two messages (m1, m2) such that hash(m1))     Mar 18, 2019 #  Symmetric vs. Asymmetric encryption #  Symmetric:\n Both parties share a secret key Faster then asymmetric  Alice and Bob want to communicate, Eve is the eavesdropper. How do Alice and Bob keep Eve from obtaining the key?\nPublic Key Cryptosystems (asymmetric):\n This solves the \u0026ldquo;key-exchange\u0026rdquo; problem.  RSA #  R: Rivesst\nS: Shamir\nA: Adelman\n Pick two primes p \u0026amp; q  p = 13, q = 47   Calculate n)  n = 611   Calculate totient(n)  totient(611)) = 552   Find e, such that 1 \u0026lt; e \u0026lt; totient(n) and e \u0026amp; totient(n) are coprime  These can easily be found using our gcd() function 271   Find d such that e is the multiplicative inverse of e and totient(n)  e * d) 271 * d mod 552 = 1 d = 55   Throw away p, q, and totient(n)!  3 Ways to find multiplicative inverse\n Loop Extended GCD Euler\u0026rsquo;s Theorem  RSA Formulas:\n c = p^e mod n p = c^d mod n  (e, n) is one key\n(d, n) is another key, you choose which you want to keep private\nFor communication:\n Alice and bob want to communicate They both independently go through the RSA calculations Alice\u0026rsquo;s  public key Apub) private key Apriv (da, na)   Bob\u0026rsquo;s  public key Bpub) private key Bpriv)   Alice wants to send Bob a message such that only Bob can read it.  A: plain -\u0026gt; Bpub -\u0026gt; cipher B: cipher -\u0026gt; Bpriv -\u0026gt; plain    Let\u0026rsquo;s try:\nHi! Alice\u0026#39;s message H i ! 72 105 33 Ascii values Using Bob\u0026#39;s public key Alice can encrypt 474 248 266 e = 271, n = 611 72 105 33 Bob uses his private key to decrypt d = 55, n = 611 How can Eve decrypt the message?\n Eve has  both public keys  Composed of 2 pieces (e and n)   ciphertext Eve needs d to decrypt  However to calculate the totient of n Eve will need to factor n (it is composed of 2 large prime factors) She needs to factor n into p and q This is a hard problem       Quantum computers have Shor\u0026rsquo;s Algorithm that can factor a number quickly\n  Apr 20, 2019 #  Communicating using public-private key cryptography #  Alice and Bob both generate independent sets of keys.\n Alice  Apub Apriv   Bob  Bpub Bpriv    Alice wants to send Bob a message so that only Bob can read it.\n She needs to run her plaintext thru Bob\u0026rsquo;s public key to obtain ciphertext. A: p -\u0026gt; Bpub -\u0026gt; c B: c -\u0026gt; Bpriv -\u0026gt; p This gives us security  Alice wants to send Bob a message such that Bob knows it came from Alice:\n A: p -\u0026gt; Apriv -\u0026gt; cipher B: c -\u0026gt; Apub -\u0026gt; plain This gives us authenticity  Combining these gives both authenticity and security\n A: p -\u0026gt; Apriv -\u0026gt; Bpub -\u0026gt; cipher B: c -\u0026gt; Bpriv -\u0026gt; Apub -\u0026gt; plain This order matters! Otherwise Eve can unlock the outter \u0026ldquo;box\u0026rdquo; with Alice\u0026rsquo;s public key  Alice wants to send a message to Bob such that:\n Alice is the sender (authenticity) Bob is the recipient (security) Message has not been tampered with (integrity) A: p -\u0026gt; hash -\u0026gt; h  p + h -\u0026gt; Apriv -\u0026gt; Bpub -\u0026gt; cipher   B: c -\u0026gt; Bpriv -\u0026gt; Apub -\u0026gt; p + h  p -\u0026gt; hash -\u0026gt; h Compares hashes   This is called \u0026ldquo;signing\u0026rdquo; a document (computing hash, then locking with private key)  How do Alice and Bob know the public-keys are authentic?\n Public keys are embedded in a digital certificate  How can Eve decrypt the message?\n Eve knows Apub, Bpub, and ciphertext Both public keys are split into  e n   Eve needs d to decrypt e * d) To calculate phi Eve must factor into p and q, this is very hard  The Real RSA #  OpenSSL\nopenssl genrsa -out keyfile.pem 2048 openssl rsa -in keyfile.pem -pubout -out key.pub more key.pub openssl rsa -in keyfile.pem vi plaintext.txt openssl rsautl -pubin -inkey key.pub -endcrypt -in plaintext.txt -out ciphertext.txt  Apr 3, 2019 #  Spam filtering #  To a spam filter: a message is just a set of words.\n \u0026ldquo;Hello I will say Hello\u0026rdquo;  The filter splits the words up and compiles some information about them. It creates a dictionary.\n   Word Occurences     Hello 2   I 1   will 1   say 1    P(\u0026ldquo;Hello\u0026rdquo;) = 2/5\nP(\u0026ldquo;will\u0026rdquo;) = 1/5\nP(\u0026ldquo;today\u0026rdquo;) = 0\n Apr 10, 2019 #  Graphs #  Planar graph: any graph that can be drawn on flat paper without crossing edges\nThe graph coloring problem: also known as the cartographers problem. To find the minimum number of colors needed to color a map. Its proven to be no more then 4, but finding the minimum is known as a \u0026ldquo;intractable problem\u0026rdquo;.\nA lot of problems can be turned into graph problems.\n Shortest path Spanning tree  Connecting cable to a housing development using the least cable possible   Travelling salesmen CEO  Minimize a metric on a graph (cheapest, shortest, time-spent\u0026hellip;)    Terminology\n Vertex  point on the graph   Edge  Normal  Connects 2 vertex   Directed edge  Edge that goes one way   Weighted edge  Has a value associated with the edge (cost, distance\u0026hellip;)     Fully connected graph  Each vertice is connected to each other   Disconnected graph  Not all vertices are connected to each other    Trees #   A graph built down from a root with leaves Interior nodes are vertices that aren\u0026rsquo;t leaves Depth-first traversal  Search as deep as possible before exploring another branch Pre-order depth first traversal  As soon as you encounter a node, you record it (think binary search tree)   Post-order depth first traversal  As you encounter a vertex, you record it the second time you encounter it Could be used to turn high-level language into assembly This puts the operation in postfix!   In order depth first traversal  This puts the operation back to how it was This could be used to turn a high-level language into another high-level language (java \u0026lt;-\u0026gt; c)     Breadth-first travesal  Search all neighbors before going deeper     Apr 22, 2019 #  Minimal spanning tree #  How to\n Initialize the set of visited vertices with any vertext from the graph. Iniialize the set of unvisited vertices to be all but the starting vertex Consider each of the unvisited neighbors of the bisited set. Identify the neighbor with the lowest edge weight Add the neighbors to the visited set. Remove it from the unvisited set. If the unvisited set is empty, we are done. Otherwise go back to step 2.  Greedy algorithm: Looks at the information it has at the moment, doesn\u0026rsquo;t look ahead.\n Make a decision based on information you have and no more. Make best decision and don\u0026rsquo;t change your mind.   Apr 24, 2019 #  Finite State Machine #  There is a starting or initial state and one or more accepting states. Vertices are states, and edges are transitions. Strings describe pathes along the machine, and there are an infinte number of strings because of the looping nature of them. The set of all accepting strings is a language.\nHow a program gets compiled #  Scanning\n Goes thru program and finds and identifies tokens   Apr 29, 2019 #  Compilers continued #  grammar blub; program: (assignment | print)* ; assignment: IDENT ASSIGNOP expr SEMICOLON ; expr: expr (\u0026#39;*\u0026#39;|\u0026#39;/\u0026#39;) expr | expr (\u0026#39;+\u0026#39;|\u0026#39;-\u0026#39;) expr | IDENT | INT ; print: \u0026#39;print\u0026#39; expr SEMICOLON ; IDENT: (\u0026#39;a\u0026#39;..\u0026#39;z\u0026#39;|\u0026#39;A\u0026#39;..\u0026#39;Z\u0026#39;|\u0026#39;_\u0026#39;)(\u0026#39;a\u0026#39;..\u0026#39;z\u0026#39;|\u0026#39;A\u0026#39;..\u0026#39;Z\u0026#39;|\u0026#39;0\u0026#39;..\u0026#39;9\u0026#39;|\u0026#39;_\u0026#39;)* ; ASSIGNOP: \u0026#39;=\u0026#39; ; SEMICOLON: \u0026#39;;\u0026#39; ; INT: (\u0026#39;+\u0026#39;|\u0026#39;-\u0026#39;|\u0026#39;0\u0026#39;..\u0026#39;9\u0026#39;)(\u0026#39;0\u0026#39;-\u0026#39;9\u0026#39;)* ; WS: (\u0026#39; \u0026#39;|\u0026#39;\\n\u0026#39;|\u0026#39;\\r\u0026#39;|\u0026#39;\\t\u0026#39;) -\u0026gt; skip ;  May 1, 2019 #  State machines cont. #  Deterministic state automaton\n Where each state only has one choice, no ambiguous choices.  Non-deterministic state automaton\n State machines that have multiple choices for each state (for example one state could have multiple routes labeled \u0026lsquo;x\u0026rsquo;) All NFAs can be converted to an equiavlent DFA   May 6, 2019 #  NFA with epsilon transition #  The epsilon transition is basically like a free door that doesn\u0026rsquo;t consume any letters.\nThompson\u0026rsquo;s constructions are a general (generic) way of converting a regex to NFA without a lot of analysis.\n May 8, 2019 #  Transform Regex into DFA\n Transform regex into NFA using Thompson\u0026rsquo;s constructions Transform into DFA  Transform NFA into table Transform NFA table into DFA table     May 13, 2019 #  Mealy and Moore Machines #  A state machine without a accepting state, it just outputs a stream.\nTakes a input of a string and outputs another string.\nMoore machine is a \u0026ldquo;dual\u0026rdquo; of a Mealy machine. (This means you can turn a Mealy into a Moore and vice versa)\nA Moore machine takes an input, but instead of the output on the transition, the states are the outputs. Moore machines always output something at the first state(the start). If this isn\u0026rsquo;t what you want, the solution is to add an initial state that doesn\u0026rsquo;t output anything.\n May 15, 2019 #  Data compression (text) #  Text compression should be lossless, in that none of the information is actually able to be put back after compressed.\nHuffman encoding\nTHE CAT IN THE HAT CAME BACK\nStart by creating a dictinonary for all the letters\nT H E C A I N M B K _ 4 3 3 3 4 1 1 1 1 1 6 Then order for frequency\n_ T A H E C I N M B K 6 4 4 3 3 3 1 1 1 1 1 Combine the 2 lowest items\n_6 T4 A4 H3 E3 C3 BK 2 N1 M1 _6 T4 A4 H3 E3 C3 NM2 BK2 I1 _6 T4 A4 H3 E3 C3 BKI3 NM2 _6 BKINM5 T4 A4 H3 E3 C3 EC6 _6 BKINM5 T4 A4 H3 AH7 EC6 _6 BKINM5 T4 BKINMT9 AH7 EC6 _6 EC_12 BKINMT9 AH7 BKINMTAH16 EC_12 BKINMTAHEC_28 Then build a tree out of the combinations of these and assign 0s and 1s to the branches to get the new bitcodes\n #  "}),a.add({id:161,href:'/notes/CS26/CS26-reading-notes/',title:"CS26-reading-notes",section:"CS26",content:"CS 26 Reading Notes #   Ch. 1 Number Representations  Ch. 1 Number Representations #  Theorem 1\nLet b be an integer greater than 1. Then if n is a positive integer, n can be expressed uniquely in the form\n  \\(n=a_k ·b^k \u0026#43;a_{k−1} ·b^{k−1} \u0026#43;···\u0026#43;a_1 ·b^1 \u0026#43;a_0 ·b^0 \\)  where  \\(k\\)  is a nonnegative integer,  \\(a0, a1, · · · , ak\\)  are nonnegative integers less than  \\(b\\)  and  \\(ak ≠ 0\\)  .\n The real utility and power of two’s complement is that one can add pairs of two’s complement numbers (whether positive or negative) in the usual way, and the result will be the correct answer, in two’s complement! In the following examples, superscripts in the binary addition represent carries.\n"}),a.add({id:162,href:'/notes/CS39/CS39-lecture-notes/',title:"CS39-lecture-notes",section:"CS39",content:"CS 39 Lecture notes #  Aug 21, 2018 #  Using ARM assembly language\nRISC - reduced instructions set computer\nARM is a British company that designs intellectual property, now owned by a japanese company (Softbank).\nLast year there was 14 billion ARM chips produced\nSoftware you need:\nKeil ARM MDK - software development kit for M-series microcontrollers\nwww.keil.com\n(Windows only)\n[X] Download Keil tool [2018-08-23]\n Aug 23, 2018 #  A diagram of almost everything\n World -\u0026gt; Sensors\nSensors -\u0026gt; Signal conditioning\nSignal conditioning -\u0026gt; Analog to digital\nAnalog to digital -\u0026gt; cpu\ncpu \u0026lt;-\u0026gt; memory\ncpu -\u0026gt; output\n Place value = ${base}^{position}$\nBYTE = BinarY TErm\nBIT = Binary digIT\nA byte is the smallest addressable unit of space in memory, typically 8 bits in microcomputers.\n Aug 28, 2018 #  Read numbers and codes\nTake numbers and codes quiz\nASCII (7-bit code, 0-127)\nUnicode (16 bit)\nCPU Instruction Cycle\n Fetch instruction Decode the instruction Execute Repeat  Inside CPU lives the General Purpose Registers Program Counter holes the next instruction to fetch\nMDK Instructions #  Put project in new folder\nChoose M0 Cortex chip\nChoose CMSIS core\nand Startup Code\nAREA |.text|, CODE, READONLY EXPORT __main __main MOVS R0, #1 MOVS R4, #3 ADDS R7, R0, R4 done B done END A simple program that adds 2 numbers, in this case the numbers 1 and 3 are stored in R0 and R4. Then it adds them and puts the result in R7​. To end the program and ensure it doesnt run through memory forever, you add a loop that calls back to itself, in this case done. Note that you must put an enter after the END.\nRemember in µVision: Debug using the simulator under the magic wand icon.\n Aug 30, 2018 #  Part number for the chip we’re using - NUCLEO-L432KC\nA directive is information for the tool itself. AREA is a directive, it doesn’t produce any machine code technically.\n.s files are just text files, not until they are assembled (by a program) is it then turned into a .o file (object code). These .o files are machine code.\nThe memory map of our chip (32 bit machine) starts at 0x00000000 and goes to 0xFFFFFFFF. In the low memory address is program memory (flash), 32kB. At 0x20000000​ RAM begins, 8kB. I/O and peripheral devices are below the RAM, such as timer/counters and USB.\nAREA |.text|, CODE, READONLY EXPORT __main __main ;Code goes here done B done END AREA |.text| directive tells the code to go to the .text area. CODE means it is in the code segment of the file. READONLY means it lives in the memory.\nEXPORT​ gives it an entry point to the label __main. A label is just a point of reference, a named memory location, labels turn into addresses. Labels go into lines that you need to refer to. done is the label of the loop to end it. B means unconditional branch, meaning you always go to this, never skip it. END means there is no more code to assemble, it always needs a carriage return after.\nEvery line of assembly #  ​label mnemonic operands; comments\n label must be against the left side mnemonic is our instructions operands are the parameters of the mnemonic comments come after the semicolon     Starting file    ending file     .s -\u0026gt; assembler -\u0026gt; .o (startup files)   .c -\u0026gt; c compiler -\u0026gt; .o (startup files)   .s -\u0026gt; assembler -\u0026gt; .o (our file)    All of those .o files are then put into a linker, which resolves external references. meaning it looks through all the .o modules and links the references. Generates the core image (the actual machine code file that has all the pieces assembled and put together). The core image is then burned into a chip, (or in our case simulated).\nExample variables for arithmetic:\n R0 : a\nR1 : b\nR2 : c\nR3 : d\na + b - c + 3\n ADDS R0, R0, R1; adds a + b SUBS R0, R0, R2; (a + b) - c ADDS R0, #3; (a + b - c) + 3  Sep 4, 2018 #  Expression evaluation #   R0 : a\nR1 : b\nR2 : c\nR3 : d\n To multiply a by 2, you can write ADDS R0, R0, R0\n a + b + c * 2\n ADDS R2, R2, R2; multiply c by 2 ADDS R0, R0, R1; adds a + b ADDS R0, R0, R2; adds (a + b) + (c * 2) This is a code fragment.\nTo write this as a complete program with:\n a = 5\nb = 2\nc = 7\n AREA |.text|, CODE, READONLY EXPORT __main __main MOVS R0, #5; a MOVS R1, #2; b MOVS R2, #7; c ADDS R2, R2, R2; multiply c by 2 ADDS R0, R0, R1; adds a + b ADDS R0, R0, R2; adds (a + b) + (c * 2) LDR R7,) STR R0, [R7]; store R0 in the location specified by R7 LDR R4, [R7]; loads R4 with variable at 0x2000 000 in RAM done B done END When you run out of registers, you can store variables in RAM (RAM starts at 20 million hex (0x2000 0000)). When storing something in RAM it takes 2 clock cycles. The chip we are using only supports indexed addressing. This means you need to specify the address you use to specify the address of the RAM (a pointer). Usually use R6 and R7. LDR is used to specify registers in RAM. STR can be used to store it in RAM. To load back into a register you can use LDR also. RAM can only use the LDR and STR instructions, if you need to perform arithmetic on a stored variable, you need to load (LDR) it into register to work on it.\n Sep 6, 2018 #  MOVS moves data and updates the flags. MOV doesn’t update the flags. Instructions with the S update flags.\nRAM space: 0x2000 0000 is the beginning of RAM space (32 bits wide) 0x2000 0004 is the next space\n32 bits = word 16 bits = half-word 8 bits = byte\nLDR and STR work with 32 bit numbers. On RISC machines you must use indexed addressing.\nTo use an offset:\nLDR R5, [R7,#4] uses an offset of 4 to point to the address at 0x2000 0004 (After specifying the address of the first slot in memory with LDR R7,=0x20000000​)\nExample of C++ code to turn on and off LED and run a function called myFunc, which is defined in the .s file below\n//#include \u0026#34;mbed.h\u0026#34;  extern \u0026#34;C\u0026#34; int myFunc(int a, int b, int c); //a b and c correspond to registers R0, R1, R2 respectively  DigitalOut myled(LED1); Serial pc(USBTX, USBRX); int main() { pc.printf(\u0026#34;myFunc); pc.printf(\u0026#34;myFunc); while(1) //\u0026#34;Heartbeat\u0026#34;, this turns the LED on and off, a good way to see if the program is running  { myled = 1; //LED is ON  wait(2.0); //Wait 2 sec  myled = 0; //LED is OFF  wait(1.0); //Wait 1 sec  } } In another .s file:\nAREA |.text|, CODE, READONLY EXPORT myFunc myFunc ADDS R0, R0, R1; a + b ADDS R0, R0, R2; + c BX LR; branch exchange with link register (return) END  Sep 11, 2018 #  Shifting bits #  LSLS is a logical shift left. Multiplies by powers of 2. ($2 ^ {bits}$)\nLSRS is a logical shift right. Divides by powers of 2. ($2 ^ {bits}$)\nThese commands use a barrel shifter, takes 1 clock cycle. (Takes a lot of hardware real estate though)\nLSLS 1 bit shift left example:\n 0101 = 5 decimal\n    0011 = 3 decimal\n0110 = 6 decimal\n1100 = 12 decimal\n LSLS R0, R0, #2 shifts the register R0 by 2 to the left, then places the answer back into R0. The bit that is shifted \u0026ldquo;off\u0026rdquo; the number is transferred into the carry bit. This makes the LSLS command really useful to shift numbers into the carry flag. If you wanted to print a binary number to the screen you could individually shift numbers into the carry flag, add 0x30 to it and get the ASCII code for 1 and 0.\nLSRS 1 bit shift right example:\n 1100 = 12 decimal\n0110 = 6 decimal\n  0111 = 7 decimal\n   LSRS R3, R1, #4 effectively divides R1 by 16 ($2^4$) and puts the answer in R3\nExamples:\nLDR R0,=0x00000007 ; loads R0 with 7 LSLS R0, R0, #2 ; logical shift left 2 bits, answers 0x0000001C (7 * 4) LDR R0,=0xC0000000 ; loads R0 with 0xC0000000 LSRS R0, R0, #1 ; shifts to the right 1 bit, answers 0x60000000 (half of 0xC)  Sep 18, 2018 #  Logical instructions (bitwise) #  AND gate:\n   a b a \u0026amp;\u0026amp; b     0 0 0   0 1 0   1 0 0   1 1 1    ANDS R0, R1 is the biwise AND gate to compare two registers. Can be used to isolate a group or a single bits. Typically used to compare a value with a \u0026lsquo;mask\u0026rsquo; value.\nLDR R0, =0xABCDEFA5; input MOVS R1, 0xF; mask ANDS R0, R1 Returns 0x00000005 in the R0 register. ANDS basically clears out all the unwanted bits specified by the register R1. (Remember 0xF is 1111 in binary, so the 5 gets passed through).\nOR gate:\n| a | b | a || b | | :\u0026mdash;: | :\u0026mdash;: | :\u0026mdash;\u0026mdash;: | | 0 | 0 | 0 | | 0 | 1 | 1 | | 1 | 0 | 1 | | 1 | 1 | 1 |\nOR turns a bit on if one or the other bit is on.\nLDR R0, =0xABCDEFA5; input LDR R1, =0xF0000000; mask ANDS R0, R1; and MOVS R2, #3 ORRS R0, R2; or Returns 0xA0000003 in the R0 register. Because the A was left in the register because of the ANDS and then turns on the 3 in the last bit because of the ORRS.\nTo clear a bit ANDS it with 0\nTo pass a bit ANDS it with a 1\nTo set a bit ORRS it with a 1\nNOT gate:\n   a !a     0 1   1 0    LDR R1, 0xF0000000; mask MVNS R3,R1; not the R1 register Returns 0x0FFFFFFF into the R3 register. MVNS is the NOT operator for this chip (move register and not).\nExcluse OR (EOR):\n   a b a EOR b     0 0 0   0 1 1   1 0 1   1 1 0    One or the other, but not both.\nLDR R0, =0xABCDEFA5 LDR R1, =0xA5A5A5A5; mask EORS R0, R1; Returns 0x0E684A00. Everything that matchs gets zeroed out. Running the EORS R0, R1 command again will return the register to the original. This can be used to encrypt.\nC-\u0026gt;asm #  Start using a .c file in microvision.\nextern int myFunc(int a, int b, int c); int main(void) { int x; x); } extern means that the function exists in another block of code. Does need a semicolon after this method header because its connected to the extern. This file also needs a carriage return after the last curly brace.\nIn a .s file (thats named differently then the .c file)\nAREA |.text|,CODE,READONLY EXPORT myFunc myFunc ADDS R0, R0, R1; add a + b SUBS R0, R0, R2; subtract c BX LR END BX LR is the return. The variables in the myFunc.c will coorespond to the registers starting at R0 onwards (a).\n Sep 20, 2018 #  Embedded C Programming #  History\nDeveloped at Bell Labratories in the 70s. Dennis Ritchie and Ken Thompson developed this language. C was derived from the high-level assembly language B. Major goal of C was systems programming. The UNIX operating system was re-written in C. Today C is widespread use with a rich standard library of functions. C is the standard language of microcontrollers, this is because C generates small amounts of code compared to other languages (C++ for example).\nWhy C?\nFlexible language that imposes few constraints on the programmer. Allows low level access to data, operating system, and hardware. Retains the portability and sophisticated syntax of a high-level language. Supports pointers and bitwise operators. Weak type checking (Good or bad?). Designed for modular programming (for example when we had a .s file and a .c file). Extensive use of libraries. The lingua franca of embedded systems programming. Not object-oriented, but can be used with an \u0026ldquo;object-oriented mindset\u0026rdquo;.\nSimplest embedded program\nint main() { while(1); } This compiles sucessfully but doesn\u0026rsquo;t do anything.\nSlightly more useful program:\n//#include \u0026#34;mbed.h\u0026#34; (this line breaks the auto-toc)  Serial pc(USBTX, USBRX); //a little c++  int main() { pc.printf(\u0026#34;Hello world\\n\\r\u0026#34;); while (1); //infinite loop } Some key elements of a C program:\n;\n The semicolon is a statement terminator (just like in Java) The simplest expression is a semicolon alone.  {}\n Curly braces delineate the beginning and end of a function Curly braces also group statements so they are treated as one block  \u0026quot;text\u0026quot;\n A string is delineated with double quotes  comments\n // or /* */ are comment delimiters  Identifiers in C:\n An identifier is a name of something in your prograrm  a function, variable, constant   Identifiers begin with a letter or underscore (_)  Followed by a sequence of letters, digits, or underscores Its not good practice to start a identifier with an underscore, because it is reserved identifiers generated by the compiler   Identifiers are case sensitive Identifiers can be any length, but  some compilers recognize only a limited number of characters (usually 32 characters). This means if 2 identifiers use the same name up to 32 characters they will be treated as the same identifier, even if the characters after are different.   Reserved words cannot be used as identifiers  What are some reserved words in C? i.e. auto, break, case, char, continue, default, extern    Variables:\nVariables represent a value that can be changed. Variables are declared by indicating the type followed by an identifier.\nint dogs, cats; unsigned char portInput; float price; Variables are stored in the relatively small RAM of the microcontroller. The programmer must declare the type, and therefore the size of each variable.\nVariable scope:\nThe scope of a variable is its accessibility within the program.\n Local Variables  Declared within a function Memory space is allocated when a function is entered Generally, memory space is released when function exits (returns) Can only be accessed from within the function they are declared You can use the same local variable declarations in multiple functions since the compiler sees the local in functions independently   Global variables  Can be accessed by all the functions in a program (unlimited scope) Global variables can be modified by any function and will retain their value as long as the program is under execution    Constants:\n Constants are fixed values In microcontroller programs, constants are usually stored in read-only memory  This saves RAM for variables   Consider this assignment  z = rho + 5; the five is a numeric constant and becomes part of the code that performs the addition.   You can declare a named constant as follows:  const type identifier = expression; i.e. const int myIntConstant = 25;   Numeric constants can be declared with base or type Decimal is the default base  1695   Binary constants begin with 0b prefix  0b01000001   Hexadecimal prefixed with 0x  0x1234ABCD   You can specify the type of a numeric constant with a suffix  4000U, U is for unsigned 15.1F, F is for float   Character constants are enclosed in single quotes  'M'    Operators and expressions:\n Variables are assigned using the = A numeric expressions can be on the right side of the assignment operator   Sep 25, 2018 #  Compare #  CMP is the instruction that compares registers. CMP R0, #5 compares register R0 to the immediate 8 bit number 5. It subtracts the register with the number, if the zero flag is turned on then it means that the comparison is \u0026ldquo;true\u0026rdquo;, \u0026ldquo;set\u0026rdquo;, or \u0026ldquo;logic level one\u0026rdquo;. This is often used in conjunction with the branch conditional instruction, Bcc (pg. 34).\nCMP R0, #5; checks if R0 is 5 BEQ doStuff; BEQ means branch if equal, checks if the zero flag is 1 ;code to skip here doStuff Bcc Conditional Branch    Specific Flag Tests Meaning Flags affected     BEQ Branch if equal z == 1   BNE Branch if not equal z == 0   BCS Branch if carry is set c == 1   BCC Branch if carry is clear c == 0   BMI Branch if minus, negative n == 1   BPL Branch if plus, positive n == 0   BVS Branch if overflow v == 1   BVC Branch if no overflow v == 0       Unsigned/signed tests Meaning Flags affected     BEQ Branch if equal z == 1   BNE Branch if not equal z == 0   BHI Branch if higher c == 1, z == 1   BLO Branch if lower c == 0   BHS Branch if higher or the same c == 1   BLS Branch if lower or same c == 0, z == 1    if statement:\nFor example to translate:\nif (a) { a = b + 2; } In assembly:\n a = R0\nb = R1\n CMP R0 #5; compares a to 5 BNE endif1; branch if not equal, checks if zero flag is 0 MOVS R1, R0; move b into a ADDS R0, #2; b + 2 endif1 Look at the relationship of the high level language and make the opposite of the comparison.\nif..else:\nExample:\nif (a != b) { a = 5; } else //a == b { a = 1; } In assembly:\n a = R0\nb = R1\n CMP R0, R1; a != b ? BEQ else1; branch if equal, checks if zero flag is 1 MOVS R0, #5; a = 5 B endif1 else1 MOVS R0, #1; a = 1 endif1 Example with greater than:\nif (a \u0026gt; 5) { b = a + 2; } In assembly:\n a = R0\nb = R1\n CMP R0 #5; BLS endif1; branch if lower or equal, checks if carry flag is 0 and zero flag is 1 MOVS R1, R0 ADDS R1, R1, #2 endif1 One more if..else:\nif (a \u0026gt;= b) { a = 0; } else { a = 42; } In assembly:\n a = R0\nb = R1\n CMP R0, R1; a \u0026gt;= b BLO else1; branch if lower, (opposite of \u0026gt;=), checks if the carry flag is 0 MOVS R0, #0 B endif1 else1 MOVS R0, #42 endif1 While loop:\ncount = 0; while (count \u0026lt; 5) { count++; } In assembly:\n count = R4\n MOVS R4, #0; initilize count while1 CMP R4, #5; compare R4 to 5 BHS endwhile; unsigned higher or same, checks if carry flag is 1 ADDS R4, #1; increment count B while1; B alone is unconditional branch endwhile Calculating the length of a String #  In the first document LE3C.c, write a function called slen(char s[]) that takes a char array (String) as the parameter, (slen is short for string length). Also initialize the char array (String), myString[] and the int x. Then in the main() method set the variable x to the length of the string myString. Both variables are stored in memory because they are global.\nextern int slen( char s[] ): int x = 0; char myString[] = \u0026#34;anything you want.\u0026#34;; int main() { x); } Then in our LE3asm.s file, we write the assembly to do this:\n R0 is location in memory of myString\nR1 is char counter\nR2 is current character\n AREA |.text|, CODE, READONLY EXPORT slen slen MOVS R1, #0; char counter = 0 while1 LDRB R2, [R0]; current character pointer CMP R2, #0; compare for null terminator BEQ endWhile ADDS R1,#1; increment counter ADDS R0,#1; advance pointer B while1	endWhile	MOV R0,R1; put char count in return register BX LR; return END The commands after the BEQ check don\u0026rsquo;t need to be indented (and wouldn\u0026rsquo;t normally), but it helps to better visualize what is inside the loop.\nCapitalize first letter of string #  Add to our LE3C.c file add a firstToUpper(char s[]) method that takes an array of chars (String) as parameter. Note we call that method before our slen method in the main().\nextern int slen( char s[] ); extern void firstToUpper( char s[] ); int x = 0; char myString[] = \u0026#34;anything you want.\u0026#34;; int main() { firstToUpper( myString ); x); } In LE3asm.s file, we must add another EXPORT at the top with our new function firstToUpper. Adding firstToUpper label down below the other code is perfectly legal. It must be added after the return (BX LR) of the slen function though. firstToUpper also needs it own new return (BX LR). Only one END with a carriage return is needed.\nAREA |.text|, CODE, READONLY EXPORT slen EXPORT firstToUpper slen MOVS R1, #0; char counter = 0 while1 LDRB R2, [R0]; current character pointer CMP R2, #0; compare for null terminator BEQ endWhile ADDS R1,#1; increment counter ADDS R0,#1; advance pointer B while1	endWhile	MOV R0,R1; put char count in return register BX LR; return ;--------------------------------------------------- firstToUpper LDRB R1, [R0]; load first character from string into R1 MOVS R2, #0xDF; mask to clear bit 5 ANDS R1, R2; clear bit 5 STRB R1, [R0]; put char back in string BX LR; return END firstToUpper starts by loading the first char (byte) into R1 using the LDRB (load byte). We MOVS the hexadecimal number 0xDF into R2 to be used as a mask. This mask is 1101 1111 in binary. This allows us to use the ANDS with the mask to minus 32 bit (the 0) from the number (changing it from the ASCII code of the lowercase letter to the ASCII code of the uppercase, 97 - 65).\n   Decimal Hexadecimal Binary ASCII     97 0x61 0b0110 0001 a   65 0x41 0b0100 0001 A     0b0110 0001 (0x61)\n0b1101 1111 (0xDF mask)\nAND\n0b0100 0001 (0x41)\n  Sep 27, 2018 #  Video lecture notes\nMemory Review #  Loading a variable from RAM into a General Purpose Register\n Point at the memory location of the variable Load the ariable from the pointer register location  LDR R7, =0x20000000; address of variable LDR R0, [R7]; copy data addressed by R7 to R0 Storing a variable into RAM from a General Purpose Register\n Point at the memory location of the variable Store the register value at the pointer register location  LDR R7, =0x20000000; address of variable STR R0, [R7]; copy value in R0 to location addressed by [R7] More if..else patterns #  if pattern:\nif (a) { b = 9; } In assembly:\nCMP R0, #5; a == 5? BNE endif1; if a != 5 then branch LDR R7) MOVS R1, #9; STR R1, [R7] endif1 if..else pattern:\nif (a) { b = 9; } else { b = 7; } In assembly:\nCMP R0, #5; a == 5? BNE else1; if a != 5 then skip if part LDR R7,) MOVS R1, #9; data to store in R1 STR R1, [R7] B endif; skip the else else1 LDR R7, =b MOVS R1, #7 STR R1, [R7] endif Remember: use the branch that is opposite the high-level operator\nSummary:\n Load variable before doing comparison Use the branch opposite of the relational operator after the comparison  This will skip the block if the Boolean expression is false   Place an unconditional branch at the bottom of the if-true block in order to skip the else  The if-block and else-block are mutually exclusive    mbed Compiler Notes #   Typically, no need to load variables before doing comparison  mbed compiler passes the first four parameters in R0-R3 The compiler will load the variables before calling your subprogram   In the following function definition, a is passed in R0, b is passed in R1 and so on\u0026hellip;\nextern \u0026quot;C\u0026quot; int my_asm(int a, int b, int c);\nWhen you call the function in your C code as follows:\nmy_asm(25, x, y + 2);\nThe compiler will load R0 with 25, R1 with the value of the variable x, which was declared in the C code, and R2 with the value of the C declared variable y plus 2.  The compiler generates code something like this:\nMOVS R0, #25; first parameter into R0 LDR R7,) LDR R1, [R7]; second parameter, x, into R1 LDR R7, =y; address of y into R7 LDR R2, [R7]; third parameter y into R2 ADDS R2, #2; add 2 to y BL my_asm; call your function (=x and =y are placedholders for where it is in memory for the sake of these notes)\nARM Architecture #  Data sizes and instruction sets\n ARM is a RISC architecture  Most instructions execute in a single cycle, orthogonal register set, load-store architecture   ARM is a 32-bit load-store architecture  The only memory accesses allowed are loads and stores (LDR and STR) Most internal registers are 32-bits wide   When used in relation to the ARM  Word means 32 bits (four bytes) Halfword means 16 bits (two bytes) Doubleword means 64 bits (eight bytes)   Most ARM cores implement two instruction sets  32-bit ARM Instruction Set 16/32-bit Thumb Instruction Set   Older cores support 16-bit Thumb Instructions only  Thumb-2 technology in current cores adds 32-bit instructions Maintains code density with increased flexibility    Processor Modes\n Most ARM cores have seven basic operating modes  Each mode has access to its own stack space and a different subset of registers Some operations can only be carried out in a privileged mode       Mode Description Privileged     Supervisor (SVC) Entered on reset and when a Supervisor call instruction (SVC) is executed Yes   FIQ Entered when a high priority (fast) interrupt is raised Yes   IRQ Entered when a normal priority interrupt is raised Yes   Abort Used to handle memory access violations Yes   Undef Used to handle undefined instructions Yes   System Privileged mode using the same registers as User mode Yes   User Mode under which most Applications/OS tasks run No    (These are modes for ARM A and ARM R chips, ARM M chips have 2 modes: User and Handler)\nIn ARM M chips:\n 13 General purpose registers  Registers R0 - R7 (low registers) Registers R8 - R12 (high registers)   3 Registers with special meaning/usage  Stack Pointer (SP) - R13 Link Register (LR) - R14 Program Counter (PC) - R15   Special-purpose registers  xPSR is the program status register  Conditional code flags  N) Z) C) V)        ARM Instruction Set\n All instructions are 32 bits long Most instructions can be conditionally executed Load/Store instruction set - no direction manipulation of memory contents   Oct 2, 2018 #   Midterm on Oct 16 [2018-10-16] Make midterm notes [2018-10-16]\n(Ch. 1 - 5 LCARpi, number conversions, covers instructions we\u0026rsquo;ve used, and can use booklet and one 8.5x11 piece of paper for notes)  Multi-word Arithmetic #  Our registers are 32 bits long. The right most position is position 0 and the leftmost is position 31.\nExample:\n R4 = 1111 1111 1111 1111 1111 1111 1111 1111\n Adding 1 to this register will clear all the 1s into 0s and turn on the carry flag and the zero flag (effectively loosing the number).\nTo add larger numbers then our register size ($2^{32}$ (32 bits)) you will need to use 2 registers at a time, one to specify the lower word and one the higher word.\nTo demonstrate this:\nLDR R4, =0xFFFFFFFF ADDS R4, #1 This clears R4 and turns on the carry and the zero flags.\nTo successfully add numbers bigger then 32 bits you must specify a register as the low word and another as the high word. This is a symbolic specification, the registers don\u0026rsquo;t actually get joined, just arithmetic on them can be performed on them individually and thought of them as being joined.\nLDR R4, =0xFFFFFFFF; low word 64 bit first var MOVS R5, #1; high word 64 bit first var MOVS R6, #1; low word 64 bit second var MOVS R7, #0; high word of 64 bit second var ADDS R6, R4, R6; add low words ADCS R7, R5; add high words and potential carry ADCS is add with carry, takes 2 registers and the carry flag into consideration. To add the first and the second 64-bit variables you must add the low words (with ADDS) then the high words (with ADCS).\nTwo\u0026rsquo;s Complement #   $2 ^ {(bits - 1)} - 1 = max$\n$-2 ^ {(bits - 1)} = min$\n For example in 8 bits:\n $2^{(8 - 1)} - 1)$\n$-2^{(8 - 1)})$\n (The reason you minus one from the max is to compensate for zero)\nTo go from positive to negative (for example in a byte) invert the bits and add 1\nFor example with the decimal number 5:\n $0101 = 5_{10}$\n$1010 + 1 = 1011 = -5_{10}$\n SXTB instruction:\nLDR R7, =0x2000000F; load R7 with first address of RAM LDRB R0, [R7]; loads byte into R0 This returns all 1s in the low byte but 0s in the rest of the register. This means that the signed number (-1) isn\u0026rsquo;t preserved. You must use a SXTB (sign extend) instruction which extends an 8 bit value to 32 bits and writes the result to the same register. Continuing from the above example, to preserve the signed number (-1):\nSXTB R0, R0; sign extend Effectively changing R0 from\n 0000 0000 0000 0000 0000 0000 0000 1111\n To:\n 1111 1111 1111 1111 1111 1111 1111 1111\n (Preserving the -1)\nASRS Arithmetic Shift Right #  The ASRS instruction is like the LSRS (logical shift right) instruction, however instead of always injecting a 0 on the left, it injects the same bit as the most significant bit. This means that if the number is signed it preserves the negative. Effectively this instruction divides by powers of 2 while preserving the sign.\n Oct 4, 2018 #  Counting characters in a string #  To count how many times a char occurs in a string:\npseudocode:\n point character pointer at first char in string while char isn\u0026rsquo;t null  read ASCII of current character if current character == searched char  increment count   increment char pointer    extern int charCount(char s[], char c) char myString[] = \u0026#34;aababac\u0026#34;; int x = 0; int main { x); } In assembly:\n myString will be stored in memory with register R0 pointing at it. The character thats being searched for will be stored in R1\n AREA |.text|, CODE, READONLY EXPORT charCount charcount MOVS R2, #0; initalize count nextChar LDRB R3, [R0]; get character CMP R3,#0; end of string? BEQ endloop CMP R3, R1; is char == c? BNE nextIteration ADDS R2, #1; count++ nextIteration ADDS R0, #1; advance pointer B nextChar endloop MOV R0, R2; put char count in return register BX LR END  Oct 9, 2018 #  Calculating arithmetic mean #  Using a 64 cell array, we can calculate the arithmetic mean of the cells. We are concerned with how fast the mean can be calculated. This will be an array that is passed by some c code.\nIn statsC.c:\nextern int mean64(short data[]); short myData[64]; int xbar; int main() { for(int i) { myData[i] = 8; } xbar); } short is a 16 bit data type, so we\u0026rsquo;re working with half words in our registers.\nIn statsAsm.s:\n R0 = address of array\nR1 = sum of array elements\nR2 = current array element\nR3 = loop counter\n AREA |.text|, CODE, READONLY EXPORT mean64 mean64 MOVS R1, #0;initialize sum MOVS R3, #64;initialize loop count loop1 LDRH R2, [R0]; get current element ADDS R1, R1, R2; add element to sum ADDS R0, #2; advance pointer SUBS R3, #1; loop count - 1 BNE loop1; branch if zero flag is on ASRS R1, #6; divide by 64 and preserve sign MOVS R0, R1; return result in R0 BX LR END You must advance the for loop by 2 because we are working with half words.\nClock cycles:\n512 clock cycles in the loop alone. Clock speed of our chip is 48MHz. To figure out the period $1/f$, where $f$ is the frequency ($1/48MHz$, ~21 nanoseconds). 519 total clocks * 21 nano seconds = 10,899, ~11 micro seconds.\n Oct 11, 2018 #  10,000 foot view (software organization) #  Problems and concerns when creating embedded systems. In real time systems the software has time dependencies.\n Soft real time  Can miss deadlines, doesn\u0026rsquo;t have an extreme consequence (games, game controllers)   Hard real time  Cannot miss deadlines, if you miss a deadline whatever you were producing is now invalid. May have severe consequences in the system.    Highly reliable software:\nSoftware that you don\u0026rsquo;t want to fail. Usually real-time. (Autopilots, landing gear deployment, jet engine fuel controllers). A special way to write software.\nSoftware organization:\n Super loop  Actions are in a non-stop loop, never ending. (not used in Highly-reliable systems). Used more when timing isn\u0026rsquo;t a concern   Cyclic executive scheduling  A lightweight scheduling mechanism A gold standard for highly reliable systems. Small scale projects (automotive industry, dashboard control) No distinct scheduling mechanism, can be handled with interrupts Used extensively in aerospace, avionics Most real-time applications do not require  general purpose multitasking (or preemption) disk access printing   Full blown OS not necessary Scheduling Frames  Major/minor frames provide a way to organize repeating \u0026lsquo;processes\u0026rsquo; Major frame usually 1 second, but can be any consistent duration \u0026lsquo;Process scheduling\u0026rsquo; is defined by what will be computed during each minor frame Minor frame rate varies from 4/sec up to 100/sec Most important tasks occur first in minor frames, and the less important goes toward the end of the minor frame. Each time the timer goes off the task that is still executing will be cut off and switched to the next minor frame. The tasks are usually controlled by a switch statement. Frames are usually left with some head room after the tasks, to allow for other interrupts to occur (from a data port for example) Sum of subprogram execution times cannot exceed minor frame time limit.   Pros  Great for periodic systems intuitively obvious HRT processes not preemptive  no shared data problem   Lightweight, low overhead scheduler Proven technique   Cons  Difficult to load balance Processes rates limited by minor frame Time consuming processes must be split into shorter pieces Fragile: may break if you add a process, remove a process, or chance process order Difficult to incorporate sporadic process     Real-time OS  A highly reliable operating system used in real-time systems (however cyclic executive are used more so). (Wind River OS, for example). Allows us to create tasks (functions), and the OS will execute the tasks in turn. (Pre-emptive operating system). The system has a timer that periodically goes off, and the OS will use a context switch (save registers to memory), and go to the next task (and load its registers). One task can supercede another task in a pre-emptive system. If a shared variable is being used with multiple tasks, if a task gets pre-empted, the variable might not be fully updated. If the code is interrupted in the middle of a task, the instruction is completed and a \u0026lsquo;bookmark\u0026rsquo; is left in the task. Instead of turning interrupts off and on after the variable is used, you can use a semafor, a \u0026lsquo;flag\u0026rsquo; that says that the variable is in use in another task and must be completed before it can be used, so the task will pre-empt itself.     Oct 16, 2018 #  LEDs and Switches #  Switches\n   Digital Voltage     0 0 volts (ground)   1 3.3VDC    EMF), think of as a pressure.\nLEDs (light emitting diode)\nDiodes let power go one way, consists of anode (+) and cathode (-).\nOhms Law:\n $V = IR$\n V is voltage\nI is current\nR is resistance\nOur LEDs use 2ma, so $I).\n $R = \\frac{ V_{sys} - V_f }{ I_{LED} }$\n  Oct 18, 2018 #  Code conversion #  Binary -\u0026gt; ASCII hex\nTo change the byte 0100 0001 to ASCII, you\u0026rsquo;d have to run it through some code conversion software. That way the correct number will be shown instead of the ASCII letter \u0026lsquo;A\u0026rsquo;. A dumb terminal can\u0026rsquo;t differentiate what you want to do with certain information, all it does it show the ASCII codes for the binary patterns it receives. So by converting our original 65 into a 6 and a 5 in binary, it will show correctly.\nSome c code to show conversion from a PC to the embedded system and back to PC.\nSerial pc(USBTX, USBRX); //tx, rx  int main() { pc.printf(\u0026#34;Hello world\\b\\r\u0026#34;); pc.putc(65); //putc outputs one character  pc.printf(\u0026#34;\\n\\r\u0026#34;); //flushes buffer with a carriage return and line feed  while(1) { pc.putc( pc.getc() ); //echo input back to terminal  } }    4 bit number ASCII Hex     1010, 0xA 0100 0001, 65$_{10}$, 0x41, \u0026lsquo;A\u0026rsquo;    The best way to convert these numbers into hex is table lookup.\nAREA |.text|, CODE, READONLY EXPORT BtoAH BtoAH ;R0 will contain 4 bit number to convert to ASCII hex ;Output: ASCII hex char LDR R1,=ASCIIhexTable; address of table into R1 LDRB R0, [R1, R0]; copy char into R0 from table using R0 as the offset BX LR ASCIIhexTable DCB \u0026quot;0123456789ABCDEF\u0026quot;; define constant byte END  BtoAH stands for binary to ASCII hex\n In c:\nextern char BtoAH(int n); // 0 to 15 char asciiChar; int main() { asciiChar); }  Oct 23, 2018 #  Lab 4: 32-bit Binary to ASCII hex (B32toAH) #   Complete L4 [2018-10-23]  Continuing from the code conversion above. This can be possible by using our 4 bit code converter, counted loop, and left and right shifts.\nIn B32toAH.c\nextern void B32toAH(int n, char s[]); char buff8[9]; //one extra spot for null terminator on end  int main() { B32toAH(0xABCDEF01, buff8); } B32toAH returns void, however the second parameter (char s[]) will be the result, we will be modifying it but not returning it technically.\nIn B32toAHasm.s\nAREA |.text|, CODE, READONLY EXPORT B32toAH B32toAH ; R0 32-bit number to convert ASCII hex, passed by c ; R1 address of string buffer, passed by c ; R2 shift counter and loop count ; R3 preserve original number in R0 ; R4 char read from ASCII table ; R5 points to first char in ASCIIhexTab lookup table PUSH {R4, R5}; preserve R4 and R5 MOVS R2, #0; initialize left shift count and loop count to 0 MOVS R3, R0; preserve R0 into R3 LDR R5, =ASCIIhexTab; load R5 with address of lookup table while1 LSLS R0, R2; shift left by shift count LSRS R0, #28; shift most significant byte to least significant byte LDRB R4, [R5, R0]; load low byte into R4 STRB R4, [R1]; store byte from R4 into the location of our string in RAM ADDS R1, #1; increment string pointer by 1 ADDS R2, #4; increment shift counter by 4 MOVS R0, R3; restore original number CMP R2, #32; shift count != 32 BNE while1 MOVS R5, #00; temporarily put 00 in R5 STRB R1, [R5]; end string with null terminator POP {R4, R5}; restore R4, R5 BX LR; return ASCIIhexTab DCB \u0026quot;0123456789ABCDEF\u0026quot; END First off we\u0026rsquo;ll want to point at the ASCII hex table, then preserve the original string before we start shifting. Anything above R3 must be preserved when the code returns, so to preserve the higher registers we\u0026rsquo;ll need to use the stack. You want to preserve the registers in the stack first, and restore them once the subprogram has completed. PUSH and POP can be written using hyphens and/or commas (hyphens go thru from the start to the end), and must use curly braces (i.e. PUSH {R4-R6, R10}). The stacks grows toward low memory.\n Oct 25, 2018 #  More code conversion: ASCII decimal -\u0026gt; binary #  For example if the user enters the number \u0026lsquo;25\u0026rsquo; on the keyboard, the ASCII codes for that is technically 0x32 and 0x35, and we want to convert it into 0x00000019 (25 in binary) so we can work on it arithmetically.\n   ASCII Hex     \u0026lsquo;2\u0026rsquo; 0x32   \u0026lsquo;5\u0026rsquo; 0x35    If we minus 0x30 from the ASCII code, we will end up with the value intended in hex, which will then be converted to binary when compiled.\nIn ADtoB.c:\nextern int ADtoB(char s[]); char input[]=\u0026#34;25\u0026#34;; int x; int main() { x); } In ADtoBasm.s\nAREA |.text|, CODE, READONLY EXPORT ADtoB ADtoB ; R0 address of string ; R1 current char being evaluated ; R2 running total, initialized to 0 ; R3 holds 10 to be used with multiply instruction MOVS R2, #0; total = 0 MOVS R3, #10; multiplier = 10 nextChar LDRB R1, [R0]; get char from string ADDS R0, #1; advance char pointer CMP R1, #0; check for null terminator BEQ endLoop1 SUBS R1, #0x30; strip ASCII MULS R2, R3, R2; multiply by 10 to move the total digit to the left ADDS R2, R2, R1; add digit to running total B nextChar endLoop1 MOV R0, R2; put total into R0 BX LR END  Oct 30, 2018 #  More code conversion: Binary to ASCII Binary #  We want to convert a 32-bit binary value to ASCII binary. We want to take a binary number and print it in binary on the screen. This will be converted into a 33-byte char array (one for null terminator). This will be possible by left shifting then using a ADCS (add with carry), because the carry flag will contain the digit that we shifted out of the register.\nIn BtoAB.c\nextern void btoab(int n, char s[]); char ascbin[33]; //one extra space for null terminator  int main() { btoab(0xFFFF0000, ascbin); } In BtoABasm.s\nAREA |.text|,CODE,READONLY EXPORT btoab btoab ; R0 number to convert ; R1 address of first char of the string ; R2 holds 0x30, char to store ; R3 #0 ; R4 loop counter PUSH {R4}; preserve R4 MOVS R3, #0; 0 to add with carry MOVS R4, #32; loop counter loop1	MOVS R2,#'0';	reset 0 LSLS R0, #1;	msb into carry flag ADCS R2, R3;	add carry to R2 STRB R2, [R1];	store ascii digit into str ADDS R1, #1;	increment pointer SUBS R4, #1;	decrement loop counter BNE loop1 MOVS R2, #0 STRB R2, [R1];	null terminate string POP {R4};	restore R4 BX LR;	return END  Nov 1, 2018 #  Lab 5: Cipher #  This is a subsitution cipher. To make this cipher easier, and not run into making mid-string null terminators, we will make the message the same length each time. 16 byte messages plus 1 byte for the null terminator.\npseudo:\n initialize variables loop 16 times  get text char get key char if key char is null terminator  reset key pointer get key char   increment key pointer EOR text char and key char STRB where R0 points increment text pointer loop test    extern void cipher16(char text[], char key[]); char str[16] = \u0026#34;This is a test!!\u0026#34;; int main() { cipher16(str, \u0026#34;Bob123\u0026#34;); cipher16(str, \u0026#34;Bob123\u0026#34;); } AREA |.text|, CODE, READONLY EXPORT cipher16 cipher16 ; R0 address of text ; R1 address of key ; R2 loop counter (16) ; R3 preserve key location ; R4 current text char ; R5 current key char PUSH {R4-R5}; preserve registers MOVS R2, #16; loop counter = 16 MOVS R3, R1; preserving key location loop1 LDRB R4, [R0]; get text char LDRB R5, [R1]; get key char CMP R5, #0; key char == null terminator? BNE if1; MOVS R1, R3; reset key LDRB R5, [R1]; reload key if1 ADDS R1, #1; increment key EORS R4, R5; xor operation STRB R4, [R0]; store encrypted char ADDS R0, #1; increment text SUBS R2, #1; decrement loop counter BNE loop1; check if end of loop POP {R4-R5}; restore registers BX LR; return END Parameter passing #  The first 4 parameters of a function are passed thru R0-R3. Any parameters after the first 4 get pushed onto the stack. If a variable is passed as a parameter, it will need to go lookup the location of the variable in memory before moving it into a register. When an expression is passed as a parameter\n Nov 6, 2018 #  ALU #  ALU lives inside the CPU, everything else exists to bring data to the ALU.\nDigital logic:\nAND gate:\nOnly true if all inputs are true\n   a b a \u0026amp;\u0026amp; b     0 0 0   0 1 0   1 0 0   1 1 1    OR gate (inclusive):\nTrue if either input is true. This gate can be made with 3 NANDS.\n| a | b | a || b | | :\u0026mdash;: | :\u0026mdash;: | :\u0026mdash;\u0026mdash;: | | 0 | 0 | 0 | | 0 | 1 | 1 | | 1 | 0 | 1 | | 1 | 1 | 1 |\nNOT gate:\nReturns the opposite of the input. Also known as a inverter\n   a !a     0 1   1 0    NAND gate:\nNOT AND, returns opposite of a AND gate. One of two universal gates. Uses the least resistors. If you tie the two inputs together it turns into a NOT gate (however the propagation delay is slower then a NOT).\n   a b a AND b NOT     0 0 1   0 1 1   1 0 1   1 1 0    NOR gate:\nNOT OR gate. One of the two universal gates. Was the first integrated circuit to be mass produced (Fairchild organization, second silicon valley company, 1961).\n   a b a OR b NOT     0 0 1   0 1 0   1 0 0   1 1 0     Nov 13, 2018 #  The Assembler #  Used to translate our .s files to generate .o files. Object code files are not directly executed, they are prepared to be fed into the linker. The linker hooks all the .o files together and creates the core image (actual executable code). Inside the assembler there are 2 critical things we need to look at. The symbol table (label table), and the location counter. There is also a pass counter. The assembler \u0026ldquo;drinks the characters through a straw\u0026rdquo;, character by character. Lexical analysis. It checks each instruction in it\u0026rsquo;s table and keeps track of the next instruction will be. On the first pass its checking how much room each instruction takes up. The assembler also checks if anything is in column zero ( a label ) and it adds it to the symbol table, and it keeps track of it\u0026rsquo;s address. On the second pass of the assembler it actually makes the machine code for each instruction. It doesn\u0026rsquo;t check labels on the second pass. It looks up each symbol in the symbol table, to look ahead in the code.\nmbed \u0026gt; hardware boards \u0026gt; st microsystems boards \u0026gt; NUCLEO L432KC \u0026gt; Technical references document \u0026gt; Reference manual (RM0394)\nSTM32L432KC\n"}),a.add({id:163,href:'/notes/CS46/CS46-lecture-notes/',title:"CS46-lecture-notes",section:"CS46",content:"CS 46 Lecture Notes #  August 27 #  #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;I \u0026lt;3 C\\n\u0026#34;); } #include \u0026lt;stdio.h\u0026gt; int main() { for (int i) { printf(\u0026#34;I \u0026lt;3 C\\n\u0026#34;); } } #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Enter your agge: \u0026#34;); int age; scanf(\u0026#34;%d\u0026#34;, \u0026amp;age); // scanf is expecting a decimal (base 10), and stores it in age  int dogAge = age * 7; printf(\u0026#34;You are %d dog years old \\n\u0026#34;, dogAge); } To compile:\nType clang file.c where file is the name of the file\nThis will make a new file, to run this program type ./.a.out where a.out is the name of the file created\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Enter two numbers: \u0026#34;); int a, b; scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;a, \u0026amp;b); printf(\u0026#34;Average of %d and %d is: %d\u0026#34;, a, b, (a + b) / 2) } Differences between Java and C\n #include is kind of like import but not exactly No classes Not OO No public/private String is not a type  Primitive data types\n   Java C     boolean no equiavlent, use int   char char is a byte   int int is defined as a int with as many bits as the machine its running on, most natural data type   double same   float same   byte Use char   short half the size of an int   long double the size of an int     August 29 #  Data types and syntax #  Primitive types    Java C     int int   double double   char no equivalent   boolean int   byte char   String char[]   float float    C has unsigned intger types:\nunsigned int unsigned char unsigned long\nSame as java: braces semicolons if..else for while\nOperators: +, -, *, / \u0026amp;\u0026amp;, ||, !\nConditionals can be applied to ints\nint x = 5; if(x) // 0 is a false value, anything else is true { printf(\u0026#34;whee\u0026#34;); } int a = 10, b = 0; if (a || b) { printf(\u0026#34;whop!\u0026#34;); } int c = 0; printf(\u0026#34;%d\u0026#34;, !c); // this prints a 1 int z = 10; while(z--) { printf(\u0026#34;foo\u0026#34;); } printf and scanf are the 2 primary tools for getting information from a user and showing them information\nprintf(______) format\n%d is a integer %f is a float %s is a string (char array) %li is long int %u is unsigned int\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;int is %li bytes\\n\u0026#34;, sizeof(int)); } #include \u0026lt;stdio.h\u0026gt; int main() { int width, height, depth; printf(\u0026#34;Enter width: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;width); printf(\u0026#34;Enter height: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;height); printf(\u0026#34;Enter depth: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;depth\u0026#34;); int volume = width * height * depth; printf(\u0026#34;Volume is: %d\u0026#34;, volume); } In C the variables are not initialized, it defaults to whatever was in memory at the moment in time.\n September 3rd #  #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;time.h\u0026gt; const int max = 100; // #define max 100  int main() { srandom(time(NULL)); // seeds random number generator from system\u0026#39;s time  int num) % max + 1; printf(\u0026#34;I have picked a random number between 1 and %d.\\n\u0026#34;, max); printf(\u0026#34;Can you guess it? \u0026#34;); int guess; scanf(\u0026#34;%d\u0026#34;, \u0026amp;guess); do { if (guess) { printf(\u0026#34;You got it!.\\n\u0026#34;); } else if (guess \u0026lt; num) { printf(\u0026#34;Too low.\\n\u0026#34;); } else { printf(\u0026#34;Too high!\\n\u0026#34;); } } while (guess != num); } Includes can be in angle brackets \u0026lt;\u0026gt; or quotes \u0026ldquo;\u0026rdquo;. Quotes look in the current directory and angle brackets look in the system\u0026rsquo;s directories. const is a constant that can\u0026rsquo;t be changed. #define is an older way to do it, (ex. #define max 100), no data type or equals sign, anywhere it sees the label max it\u0026rsquo;ll replace it with 100. Anything that starts with a hash mark is called a pre-processor directive.\nCompiling steps\n .c -\u0026gt; pre-processor  Any #define just swaps the term with the value   compilers, turns into assembly linker, hooks up everything executable   September 10th #  arduino.cc, download IDE\n#define #  An example of how to use #define\n#define DEBUG  int sum = 0; for (int i) { #ifdef DEBUG  printf(\u0026#34;i); #endif  sum = sum + i; } typedef works kind of like define but for data types\nJava:\nint[] arr = new int[10];\nC:\nint arr[10];\nBrackets for arrays go after variable name.\nSegmentation fault (core dumped):\n Happens when your program attempts to go outside of your memory segment.   October 1 #  10 foot view of the computer #  Memory is just an array of bytes. Programs/data both reside in memory.\nAddress of variables can be accessed with an \u0026amp;\nAddress of a is \u0026amp;a and b is \u0026amp;b\nA variable c that can hold the address of an int:\nint a; int b; int *c; // this is the address of an integer, not the interger itself  c = \u0026amp;b; // puts the address of b into the variable c  October 3 #  Pointers #  int x; // x holds an int float y; // y holds a float int *a; // a holds the address of an int float *z; // z holds the address of a float  \u0026amp;x; // address of x \u0026amp;y; // address of y  a = \u0026amp;x; // a is set to address of x z = \u0026amp;y; // z is set to address of y You can\u0026rsquo;t put the address of y into a because of loss of precision\nint j = 6; // 6 is checked to be an int before putting it into j int *k = \u0026amp;j; // legal The compiler checks the right hand side first, then the left side then checks if they are compatable. (Static analysis)\n October 10 #  Valid pointers #     Thing Name Type     int xy; xy int   double abc; abc double   char mp; mp char   int broom[10]; broom int array or int pointer   marp blee; blee marp   char *flam; flam char pointer   marp bomaz[5]; bomaz marp array or marp pointer   short int max; max short int   marp **z; z pointer to pointer to a marp, marp pointer pointer, pointer to marp pointer   double floof[2], *mop; floof, mop double array, double pointer   marp *whop[20]; whop array of marp pointers    // Valid? broom[4] = xy; // Valid floof[1] = \u0026amp;abc; // Invalid max = broom[2]; // Valid, with warning flam[8] = \u0026#34;1234\u0026#34;; // Invalid z = \u0026amp;whop[0]; // Valid *floof = 4.8; // Valid blee = \u0026amp;bomaz[2]; // Invalid mop = floof; // Valid flam = \u0026#34;hello\u0026#34;; // Valid mp = flam[5]; // Valid mp = \u0026amp;flam[4]; // Invalid whop[10] = *z; // Valid blah[5] is equivalent to *(blah + 5)\n// Valid ways of invoking these functions? void feet(int x); feep(xy) feep(broom[0]) feep(max) feep(*broom) feep(*(broom + 9)) char gabi(marp c); mp); *flam); flam[4]); marp asdf(int *a, marp *m); blee); **z); *\u0026amp;blee); struct gps { double lat; double long; }; This makes a new struct called gps that has 2 doubles inside\ntypedef struct gps gps; gps here; here.lat = 38.5; here.lon = -121.3; Or all at once:\ntypdef struct gps { double lat; double long; } gps; Memory allocation: address), this puts the memory into dynamic memory\n#include \u0026lt;stdlib.h\u0026gt;int *x) is called int *y); // Another way to figure out how much you need  October 15 #  Core dumps #  To debug a core dump: First recompile program with -g flag, then run gdb ./recover core\nString example:\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; int main() { char str[40]; printf(\u0026#34;Enter a string: \u0026#34;); gets(str); printf(\u0026#34;Length is: %lu\\n, strlen(str)); } Compiler warns that gets() is dangerous because it will continue over the 40 chars set aside. fgets() takes three parameters, name of string, how long, and where to get input from. It will compensate for the null term at the end and also compensates for the new line char at the end of the string. This differs from scanf() with a %s because scanf will stop when it hits a space.\nOur own length functions:\nint length(char * s) { int count = 0; while (s[count] != \u0026#39;\\0\u0026#39;) // Checks against null char  { count++; } return count; } int length2(char *s) { int count = 0; while(s[count]) // Implicitally compares to 0  { count ++; } return count; } int length3(char *s) { int count = 0; while(*(s+count)) // Pointer arithmetic  { count++; } return count; } int length4(char *s) { int count = 0; while(*s) // Dereference s and increment it  { s++; count++; } return count; } int length5(char *s) { int count = 0; while(*s++) // Post increment  { count++; } return count; } int length6(char *s) { char *t = s; while(*++s); // Pre increment and return difference  return s - t; } int length7(char *s) { int count; for(count); return count; }  October 17 #  Version Control Systems #  Git commands:\ngit init initializes local repo git config configures user\u0026rsquo;s information git add \u0026lt;filename\u0026gt; marks a file to commit git commit -m \u0026quot;commit message\u0026quot; commit ready files with a message\n October 22 #  Working with files in C #  Use #include \u0026lt;stdio.h\u0026gt; to work with files. A file is just a sequence of bytes. It has a beginning and an end.\nFiles can be \u0026ldquo;unstructured\u0026rdquo; or \u0026ldquo;structured\u0026rdquo;\n Unstructured: text files Structured: CSX, executables, JPEG, video  Structured files can be \u0026ldquo;record oriented\u0026rdquo;\n Fixed-sized records Array of structs  The FILE struct keeps track of things like:\n Name of file Permissions Where you are in the file  When you read from a file, you start from the beginning, the FILE struct keeps track fo how far you have ready, so the next time you read it resumes where you left off.\nOperations on a file:\n Open  FILE * fopen(char *, char *); filename, mode (\u0026ldquo;r\u0026rdquo;, \u0026ldquo;w\u0026rdquo;, \u0026ldquo;a\u0026rdquo;) Returns a FILE * or NULL if there was a problem   Read  Use functions like fscanf and fgets fscanf(fp, \u0026quot;format\u0026quot;, variables); fgets(char *, length, fp);   Write  fprintf(fp, \u0026quot;format\u0026quot;, variables);   Close  fclose(fp);    For example:\n#include \u0026lt;stdio.h\u0026gt; int main() { FILE * fp; // file pointer  fp); // opens a file called \u0026#34;test\u0026#34; for read  if (fp) { // This means the file didn\u0026#39;t open correctly  printf(\u0026#34;Can\u0026#39;t open file\\n\u0026#34;); exit(1); } } #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt; // For exit command int main() { FILE * fp; fp); if (!fp) { printf(\u0026#34;Could not open file!\\n\u0026#34;); exit(1); } fprintf(fp, \u0026#34;hello\\n\u0026#34;); // Write to file  fclose(fp); // Close file } #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt; int main(int argc, char * argv[]) // Main now accepts command line parameters { if (argc) { fprintf(stderr, \u0026#34;Please enter a filename after the command\\n\u0026#34;); exit(2); } FILE * fp; fp); if (!fp) { fprintf(stderr, \u0026#34;Can\u0026#39;t open %s\\n\u0026#34;, argv[1]); exit(1); } char line[500]; int count = 1; while(fgets(line, 500, fp); != NULL) { printf(\u0026#34;%d %s\u0026#34;, count, line); count++; } fclose(fp); } #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;string.h\u0026gt; int main(int argc, char * argv[]) { if (argc \u0026lt; 3) { fprintf(stderr, \u0026#34;You must supply a file name\\n\u0026#34;); exit(1); } FILE *in, *out; in); if (!in) { fprintf(stderr, \u0026#34;Can\u0026#39;t open %s for reading\\n\u0026#34;, argv[1]); exit(2); } out) if (!out) { fprintf(\u0026#34;Can\u0026#39;t open %s for writing\\n\u0026#34;, argv[2]); } char line[500]; while (fgets(line, 500, in) != NULL) { if (strcmp(line, \u0026#34;pizza\\n\u0026#34;)) { fprintf(out, \u0026#34;Nice! %s\u0026#34;, line); } else { fprintf(out, \u0026#34;%s\u0026#34;, line) } } fclose(in); fclose(out); }  October 24 #  /* A program to count the number of spaces The filename is given on the command line */ #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt; // For exit()#include \u0026lt;string.h\u0026gt; // For strlen()#include \u0026lt;ctype.h\u0026gt; // For isupper() int main(int argc, char * argv[]) { // Check number of command line arguments  if (agc \u0026lt; 2) { fprintf(stderr, \u0026#34;You must supply a filename\\n\u0026#34;); exit(1); } // Open file for reading  FILE * fp); if (!fp) { fprintf(stderr, \u0026#34;Can\u0026#39;t open %s for reading\\n\u0026#34;, argv[1]); exit(2); } // Read line by line  char line[5000]; int space_count = 0; int cap_count = 0; while(fgets(line, 5000, fp) != NULL) { // For each line, go char by char  for (int i) { // If its a space count++  if (line[i]) space_count++; // if (line[i] \u0026gt;= \u0026#39;A\u0026#39; \u0026amp;\u0026amp; line[i] \u0026lt;= \u0026#39;Z\u0026#39;) cap_count++;  if (isupper(line[i])) cap_count++; } } // Close the file  fclose(fp); // Print the counts  printf(\u0026#34;Spaces: %d\\n\u0026#34;, space_count); printf(\u0026#34;Capitals: %d\\n\u0026#34;, cap_count); } Converts file to all uppercase letters\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;string.h\u0026gt;#include \u0026lt;ctype.h\u0026gt;#include \u0026lt;sys/stat.h\u0026gt; // For stat struct int main(int argc, char * argv[]) { // Check number of command line arguments  if (argc \u0026lt; 2) { fprintf(stderr, \u0026#34;Please enter a filename to read from.\\n\u0026#34;); exit(1); } else if (argc \u0026lt; 3) { fprintf(stderr, \u0026#34;Please enter a filename to write to.\\n\u0026#34;); exit(2); } /* else if (strcmp(argv[1], argv[2])) { fprintf(stderr, \u0026#34;You must supply two different files, otherwise file loss will occur.\\n\u0026#34;); exit(5); } */ // Better way to check if files are the same  struct stat s1, s2; stat(argv[1], \u0026amp;s1); stat(argv[2], \u0026amp;s2); if (s1.st_ino) { fprintf(stderr, \u0026#34;You must supply two different files, otherwise file loss will occur.\\n\u0026#34;); exit(5); } // Open input file for reading  FILE * in); if (!in) { fprintf(stderr, \u0026#34;Could not open %s for reading.\\n\u0026#34;, argv[1]); exit(3); } // Open output file for writing  FILE * out); if (!out) { fprintf(stderr, \u0026#34;Could not open %s for reading.\\n\u0026#34;, argv[2]); exit(4); } // Loop through input file, line by line  char line[5000]; while (fgets(line, 5000, in) != NULL) { // For each line, convert chars to upper  for (int i) { line[i]); } // Write line to output  fprintf(out, \u0026#34;%s\u0026#34;, line); } // Close files  fclose(in); fclose(out); }  October 29 #  Hashing algorithms #  Mixes up the bits of input data and produces a fixed-size output\n   Types Output     MD5 128 bits   SHA256 256 bits   SHA512 512 bits   DES 56 bits    echo -n word | md5sum\n October 31 #  When compiling, make sure you compile you\u0026rsquo;re own .c file and the md5.c file.\nUse -g when compiling program and then call valgrind then the command to detect memory leaks.\nclang -c hash1.c makes it compile and not delete the .o file.\nThen you can compile all the .o files with clang and -l crypto.\nMakefiles #  Dependency tree (Makefile)\nhash1 : hash1.o md5.o clang hash.o md5.o -o hash1 -l crypto hash1.o : hash1.c clang -c hash1.o md5.0 : md5.c clang -c md5.c  Indentation must be 1 tab!\n  November 21 #  Quantum computers #  Classic bit (cbit): 0 or 1 Quantum bit (qbit): 0 or 1 (or anywhere in between)\nQuantum bits can be represented as |0\u0026gt; or |1\u0026gt;\nX operation, (similar to classic NOT) (1, 0) flips into (0, 1)\nH operation (Hadamard), turns bit into intermediate bit between 0 and 1 H |0\u0026gt; = |+\u0026gt;\nCNOT (Conditional NOT) If the first qbit is a 1 then the second is flipped (using X) CNOT |00\u0026gt; = |00\u0026gt; CNOT |01\u0026gt; = |01\u0026gt; CNOT |10\u0026gt; = |11\u0026gt; CNOT |11\u0026gt; = |10\u0026gt;\nstruct qbit { double x; double y; } const struct qbit q0 = {1.0, 0.0}; const struct qbit q1 = {0.0, 1.1}; struct qbit x(struct qbit q) { struct qbit qnew; qnew.x = 0 * q.x + 1 * q.y; qnew.y = 1 * q.x + 0 * q.y; return qnew; }  November 26 #  Networking #  Host: a computer with network access\nHostname: a \u0026ldquo;human readable\u0026rdquo; name for a host\n www.amazon.com sierracollege.edu  IP address: unique number assigned to a host\n IPv4: 10.6.34.124 IPv6: fe80:4332:5153:\u0026hellip;.  Client: requests info from a server\nServer: fulfills the requests\nUsually, client initiates the transaction\nSocket: a connection between two hosts\n Setup a socket to the server, you get back a socket number Turn the socket number into a FILE * Use any of the file functions (fprintf, fscanf, fgets, fclose, fread, fwrite)  Example on the command line\nncat -C www.cs.sierracollege.edu 80 GET /~mmelendexgalindo/index.html HTTP/1.0 Host: www.cs.sierracollege.edu For C code: use a library called libsocket\n "}),a.add({id:164,href:'/notes/CS46/luhns.c/',title:"Luhn's Algorithm",section:"CS46",content:"Luhn\u0026rsquo;s Algorithm #  An implementation of the Luhn algorithm in the C language.\nThis algorithm is used for verification of credit card numbers. It is a simple to follow process that generates the last digit of the credit card (the checksum).\nThe algorithm is as follows:\n  From the rightmost digit (excluding the check digit) and moving left, double the value of every second digit. The check digit is neither doubled nor included in this calculation; the first digit doubled is the digit located immediately left of the check digit. If the result of this doubling operation is greater than 9 (e.g., 8 × 2). Take the sum of all the digits. If the total modulo 10 is equal to 0 (if the total ends in zero) then the number is valid according to the Luhn formula; otherwise it is not valid.   So with a number, say 4539704354706391, we can check the number like so:\n4 5 3 9 7 0 4 3 5 4 7 0 6 3 9 1 original number 8 5 6 9 14 0 8 3 10 4 14 0 12 3 18 1 double every other 8 +5 +6+ 9+1+4+0 +8 +3+1+0+4+1+4+0+1+2+3+1+8+1 add all digits = 70 valid card Implementing the algorithm #  Let n be the card number we\u0026rsquo;re checking, we\u0026rsquo;ll store this off in a long called number.\nlong number = n; We\u0026rsquo;ll start a running sum at 0. We can extract the rightmost digit by modding the number with 10 (% 10), then add it to our sum. Then we can chop off the digit by dividing by 10.\nint sum = 0; sum = number % 10; // add checksum number = number / 10; // chop checksum off Next while the number is positive we\u0026rsquo;ll extract the rightmost digit with a mod 10 and double it. If it is a double digit number we\u0026rsquo;ll subtract 9 from it. (i.e. for the number 18: `1 + 8). It is then added to the running sum, and chopped off.\nThe next number is just added to the sum, and not doubled. This continues until all the digits have been processed.\nwhile(number) { int temp = (number % 10) * 2; // get rightmost digit and double  if (temp \u0026gt; 9) // if 2 digit number add digits together  { temp = temp - 9; } sum = sum + temp; // add digit to sum  number = number / 10; // chop rightmost digit off  temp = number % 10; // get rightmost digit  sum = sum + temp; // add interleaved digit to sum  number = number / 10; // chop right digit off } The function will return the leftmost digit of the card number to determine which company. That\u0026rsquo;s simply dividing the number by 10 until its a one digit number\nwhile (n \u0026gt; 10) // get leftmost digit { n = n / 10; } If the sum after all of this ends in a 0, then the card is valid. If it isn\u0026rsquo;t a -1 is returned indicating an invalid card number.\nif (sum % 10) // invalid card number { return -1; } return n; // return leftmost digit Visualizing the algorithm #  st=\u0026gt;start: start with credit card number valid=\u0026gt;end: valid number return leftmost digit invalid=\u0026gt;end: invalid number return -1 chksum=\u0026gt;operation: extract checksum, add to sum, and chop off ext=\u0026gt;operation: extract rightmost digit chop=\u0026gt;operation: extract rightmost digit then chop digit off chop2=\u0026gt;operation: extract rightmost digit add to sum, chop off dbl=\u0026gt;operation: double the digit splt=\u0026gt;operation: subtract 9 from digit sum=\u0026gt;operation: add to sum leftmost=\u0026gt;operation: extract leftmost digit to return isdbl=\u0026gt;condition: doubled digit \u0026gt; 9? loop=\u0026gt;condition: number still positive? isvalid=\u0026gt;condition: is sum multiple of 10? st-\u0026gt;chksum-\u0026gt;loop loop(yes)-\u0026gt;chop-\u0026gt;dbl-\u0026gt;isdbl loop(no)-\u0026gt;leftmost leftmost-\u0026gt;isvalid isdbl(no)-\u0026gt;sum isdbl(yes)-\u0026gt;splt-\u0026gt;sum-\u0026gt;chop2(left)-\u0026gt;loop isvalid(yes)-\u0026gt;valid isvalid(no)-\u0026gt;invalid The working example #  Here\u0026rsquo;s an entire working example (the algorithm is in the validate function):\n// Luhn\u0026#39;s algorithm for checking credit card numbers // 4539704354706391 should have a sum of 70 (valid)  #include \u0026lt;stdio.h\u0026gt;  // #define DEBUG  // Function prototypes long get_cc(); int validate(long n); int main() { switch (validate(get_cc())) { case 3: printf(\u0026#34;AMEX\\n\u0026#34;); break; case 4: printf(\u0026#34;VISA\\n\u0026#34;); break; case 5: printf(\u0026#34;MASTERCARD\\n\u0026#34;); break; case 6: printf(\u0026#34;DISCOVER\\n\u0026#34;); break; default: printf(\u0026#34;INVALID\\n\u0026#34;); } } long get_cc() { printf(\u0026#34;Enter a credit card number: \u0026#34;); long n; scanf(\u0026#34;%ld\u0026#34;, \u0026amp;n); return n; } int validate(long n) { long number = n; #ifdef DEBUG  printf(\u0026#34;Number: %ld\\n\u0026#34;, number); #endif  int sum = 0; sum = number % 10; // add checksum  number = number / 10; // chop checksum off  while(number) { int temp = (number % 10) * 2; // get rightmost digit and double  if (temp \u0026gt; 9) // if 2 digit number add digits together  { temp = temp - 9; } sum = sum + temp; // add digit to sum  number = number / 10; // chop rightmost digit off  temp = number % 10; // get rightmost digit  sum = sum + temp; // add interleaved digit to sum  number = number / 10; // chop right digit off  } while (n \u0026gt; 10) // get leftmost digit  { n = n / 10; } #ifdef DEBUG  printf(\u0026#34;Sum: %d\\nLeftmost: %ld\\n\u0026#34;, sum, n); #endif  if (sum % 10) // invalid card number  { return -1; } return n; // return leftmost digit } "}),a.add({id:165,href:'/notes/MATH100/MATH100-lecture-notes/',title:"MATH100-lecture-notes",section:"MATH100",content:"Math 100 lecture notes #  Incomplete\nmaster.pdf\n "}),a.add({id:166,href:'/notes/MATH31/MATH31-comparison-tests/',title:"MATH31-comparison-tests",section:"MATH31",content:"Comparison tests #  Idea: Compare one series to another with a known convergence/divergence (geometric, harmonic, p-series, etc).\nSuppose we have two series   \\(\\sum a_n\\)  and  \\(\\sum b_n\\)  with positive terms:\n If  \\(a_b \u0026lt; b_n\\)  for all  \\(n\\)  , and  \\(\\sum b_n\\)  converges, then  \\(\\sum a_n\\)  also converges. If  \\(a_b \u0026gt; b_n\\)  for all  \\(n\\)  , and  \\(\\sum b_n\\)  diverges, then  \\(\\sum a_n\\)  also diverges.  If you show divergence for  \\(b_n\\)  when  \\(a_n \u0026lt; b_n\\)  , it proves nothing. The upper series diverges up to infinity and that tells us nothing about the lower series. It may diverge or converge. So make sure to show the correct comparison. (The same useless comparison is showing convergence for  \\(b_n\\)  when  \\(a_n \u0026gt; b_n\\)  ).\nExample 1 #   \\[\\begin{aligned} \\sum_{n=1}^\\infty \\frac{1}{n^2\u0026#43;2} \\end{aligned}\\]  First check if it fails divergence test, look for other known series, see if integral test could work (it would), but theres a better way. Consider this comparison:\n \\[\\begin{aligned} 0 \\leq \\frac{1}{n^2\u0026#43;2} \\leq \\frac{1}{n^2} \\end{aligned}\\]  If we\u0026rsquo;re trying to show convergence, we need this to be less than something we know convergence for.\nSo lets show convergence of  \\(\\frac{1}{n^2}\\)  :\n$$ \\sum_{n=1}^\\infty \\frac{1}{n^2} $$\nThis is a P-series with  \\(p=2\\)  , and since our  \\(p \u0026gt;1\\)  it means the series converges. This means by the comparison test that the original problem also converges.\nExample 2 #  $$ \\sum_{n=1}^\\infty \\frac{1}{3+2^n} $$\nAll the terms are positive on the interval, consider this comparison:\n$$ 0 \\leq \\frac{1}{3+2^n} \\leq \\frac{1}{2^n} $$\nSo try to determine convergence of the rightmost fraction:\n \\[\\begin{aligned} \\sum_{n=1}^\\infty \\frac{1}{2^n} \u0026amp; = \\sum_{n=1}^\\infty \\Big( \\frac{1}{2} \\Big)^n \\\\ \u0026amp; = \\sum_{n=1}^\\infty \\Big( \\frac{1}{2} \\Big) \\Big( \\frac{1}{2}\\Big)^{n-1} \\end{aligned}\\]  This is a geometric sum with  \\(a = \\frac{1}{2}\\)  and  \\(r = \\frac{1}{2}\\)  , therefore since  \\(r \u0026lt; 1\\)  this will converge. So by the comparison test the original problem also converges.\nExample 3 #  $$ \\sum_{n=3}^\\infty \\frac{3^n}{2^n-4} $$\nAll the terms on the interval are positive, so lets try a comparison:\n$$ \\frac{3^n}{2^n - 4} \\geq \\frac{3^n}{2^n} $$\nWe\u0026rsquo;re trying to show divergence of the rightmost fraction, and that will show that the original also diverges.\n \\[\\begin{aligned} \\sum_{n=3}^\\infty \\frac{3^n}{2^n} \u0026amp; = \\sum_{n=3}^\\infty \\Big( \\frac{3}{2} \\Big)^n \\\\ \u0026amp; = \\sum_{n=3}^\\infty \\Big( \\frac{3}{2} \\Big)^3 \\Big( \\frac{3}{2} \\Big)^{n-3} \\end{aligned}\\]  Since this is a geometric and our  \\(r \u0026gt; 1\\)  , it diverges. Therefore the original problem diverges.\nExample 4 #  $$ \\sum_{n=1}^\\infty \\frac{1}{\\sqrt{n} + 1} $$\nConsider this comparison:\n$$ 0 \\leq \\frac{1}{\\sqrt{n}+1} \\leq \\frac{1}{\\sqrt{n}} $$\nThis is a P-series with  \\(p\\)  . This means it diverges. This shows nothing about the original problem!\nWhen you can\u0026rsquo;t use a comparison like this, you can use the limit comparison test.\nLimit comparison test #  Idea: If  \\(\\sum a_n\\)  and  \\(\\sum b_n\\)  have positive terms, and this limit exists:\n$$ \\lim_{n \\rightarrow \\infty} \\frac{a_n}{b_n} $$\nIf this limit exists, then that means that both terms are so close together that it doesn\u0026rsquo;t matter. That means that both series either converge or diverge.\nIf it goes to infinity then the terms must difference enough that one or both of them diverges.\nProof #  Suppose this limit exists:\n$$ \\lim_{n \\rightarrow \\infty} \\frac{a_n}{b_n} = L $$\nThen by definition:\n$$ \\Big| \\frac{a_b}{b_n} - L \\Big| \u0026lt; \\epsilon $$\nSo:\n \\[\\begin{aligned} -\\epsilon L \u0026lt; \\frac{a_b}{b_n} - L \u0026lt; \\epsilon L \\\\ L-\\epsilon L \u0026lt; \\frac{a_b}{b_n} \u0026lt; L \u0026#43; \\epsilon L \\\\ (1-\\epsilon)L \\cdot b_n \u0026lt; a_n \u0026lt; (1\u0026#43; \\epsilon)L \\cdot b_n \\end{aligned}\\]   \\((1\u0026#43; \\epsilon)L\\)  is just a constant (doesn\u0026rsquo;t affect the convergence/divergence of the series), so if  \\(b_n\\)  converges  \\(a_n\\)  is less than that so it also converges. If  \\(b_n\\)  diverges, then  \\(a_n\\)  is greater than that so it also diverges.\nExample 5 #  So to take a look again at Example 4 above:\n$$ \\sum_{n=1}^\\infty \\frac{1}{\\sqrt{n} + 1} $$\nLets try the limit comparison test where:\n$$ \\lim_{n \\rightarrow \\infty} \\frac{a_n}{b_n} $$\nand\n$$ b_n = \\frac{1}{\\sqrt{n}} $$\nSo:\n \\[\\begin{aligned} \\lim_{n \\rightarrow \\infty} \\frac{\\frac{1}{\\sqrt{n} \u0026#43; 1}}{\\frac{1}{\\sqrt{n}}} \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{1}{\\sqrt{n} \u0026#43; 1} \\cdot \\frac{\\sqrt{n}}{1} \\\\ \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{\\sqrt{n}}{\\sqrt{n} \u0026#43; 1} \\\\ \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{1}{1 \u0026#43; \\frac{1}{\\sqrt{n}}} \\\\ \u0026amp; = 1 \\end{aligned}\\]  Since our limit exists,  \\(a_n\\)  and  \\(b_n\\)  are so close together, that if one converges the other must also. If one diverges the other must also. Just because the limit exists it doesn\u0026rsquo;t mean they converge! They will just have the same result.\nNow we know that  \\(b_n\\)  diverges (p-series with  \\(p \u0026lt; 1\\)  ), it means the  \\(a_n\\)  does also!\nExample 6 #  $$ \\sum_{n=1}^\\infty \\frac{2n^2+n}{\\sqrt{4n^7+3}} $$\nLets choose a  \\(b_n\\)  that we know convergence/divergence. Start by trying a  \\(b_n\\)  that models the end behavior of  \\(a_n\\)  :\n \\[\\begin{aligned} \\sum_{n=1}^\\infty \\frac{2n^2}{\\sqrt{4n^7}} \u0026amp; = \\sum_{n=1}^\\infty \\frac{1}{n^{3/2}} \\end{aligned}\\]  This is a P-series with a  \\(p = \\frac{3}{2}\\)  , since  \\(p \u0026gt; 1\\)  it converges!\nLimit comparison test:\n \\[\\begin{aligned} \\lim_{n \\rightarrow \\infty} \\frac{a_n}{b_n} \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{\\frac{2n^2\u0026#43;n}{\\sqrt{4n^7\u0026#43;3}}}{\\frac{1}{n^{3/2}}} \\\\ \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{2n^2\u0026#43;n}{\\sqrt{4n^7\u0026#43;3}} \\cdot n^{3/2} \\\\ \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{2n^{7/2} \u0026#43; n^{5/2}}{\\sqrt{4n^7\u0026#43;3}} \\\\ \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{2 \u0026#43; \\frac{1}{n}}{\\sqrt{4 \u0026#43; \\frac{3}{n^7}}} \\\\ \u0026amp; = 1 \\end{aligned}\\]  Since we know the limit exists, and we know that  \\(b_n\\)  converges,  \\(a_n\\)  must converge also!\nExample 7 #  $$ \\sum_{n=1}^\\infty \\frac{\\sqrt{n} + \\ln n}{n^2 + 1} $$\nLets use the limit comparison test, and compare to  \\(b_n\\)  of:\n \\[\\begin{aligned} b_n \u0026amp; = \\sum_{n=1}^\\infty \\frac{\\sqrt{n}}{n^2} \\\\ \u0026amp; = \\sum_{n=1}^\\infty \\frac{1}{n^{3/2}} \\end{aligned}\\]  This is a P-series with  \\(p\\)  .\nLimit comparison test:\n \\[\\begin{aligned} \\lim_{n \\rightarrow \\infty} \\frac{\\sqrt{n} \u0026#43; \\ln n}{n^2 \u0026#43; 1} \\cdot n^{3/2} \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{n^2 \u0026#43; n^{3/2} \\ln n}{n^2 \u0026#43; 1} \\\\ \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{1 \u0026#43; \\frac{\\ln n}{n^{1/2}}}{1 \u0026#43; \\frac{1}{n^{2}}} \\\\ \u0026amp;\u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{\\ln n}{n^{1/2}} \\\\ \u0026amp;\u0026amp; \\text{Use L\u0026#39;Hospitals} \\\\ \u0026amp;\u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{\\frac{1}{n}}{\\frac{1}{2\\sqrt{n}}} \\\\ \u0026amp;\u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{2\\sqrt{n}}{n} \\\\ \u0026amp;\u0026amp; \\text{Use L\u0026#39;Hospitals} \\\\ \u0026amp;\u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{2}{\\sqrt{n}} \\\\ \u0026amp;\u0026amp; = 0 \\\\ \\therefore \u0026amp; = \\lim_{n \\rightarrow \\infty} \\frac{1 \u0026#43; 0}{1 \u0026#43; 0} \\\\ \u0026amp; = 1 \\end{aligned}\\]  So since the series  \\(b_n\\)  converges, the series  \\(a_n\\)  also converges.\n"}),a.add({id:167,href:'/notes/MATH31/MATH31-integral-test/',title:"MATH31-integral-test",section:"MATH31",content:"Integral test #  For   \\(f(n))\\)  is continous, positive, and decreasing, then we can use the integral to show convergence/divergence of our series.\nSo:\n$$ \\sum_{n=1}^\\infty \\text{ and } \\int_1^\\infty f(x)\\ dx $$\nwill have the same result (either converge or diverge).\n This can tell you convergence/divergence, but does not necessarily give the sum of the series. Convergence is not affected by the addition or subtraction of a finite number of terms from our series.  We can judge the convergence of  \\(\\sum_{n=1}^\\infty a_n\\)  with:\n$$ \\sum_{n=1}^\\infty a_n \\text{ or } \\int_1^\\infty f(x)\\ dx $$\nBut to do the integral test, we can start the integral at  \\(N\\)  , the sum of our integral will not be the sum of the series, but we can at least tell if it converges/diverges.\n$$ \\int_N^\\infty f(x)\\ dx $$\nExample 1 #  $$ \\sum_{n=1}^\\infty \\frac{1}{n^2+1} $$\nFirst thing first, you should check the divergence by taking the limit. The limit here equals 0, so it fails the divergence test. (It may be divergent some other way, but we don\u0026rsquo;t know. It may be convergent, but we don\u0026rsquo;t know). It\u0026rsquo;s not telescoping, its not factorable, so lets try the integral test.\n$$ f(x) = \\frac{1}{x^2+1} $$\nThis should act as an upper bound for our sequence provided its always positive, continuous, and decreasing on it\u0026rsquo;s interval  \\([1, \\infty)\\)  . If it meets these requirements then we can do the integral test:\n$$ \\int_1^\\infty \\frac{1}{x^2+1} dx $$\nThis is an improper integral:\n \\[\\begin{aligned} \\lim_{b \\rightarrow \\infty} \\int_1^b \\frac{1}{x^2\u0026#43;1} dx \u0026amp; = \\lim_{b \\rightarrow \\infty} \\Big[ \\tan^{-1}x \\Big]_1^b \\\\ \u0026amp; = \\lim_{b \\rightarrow \\infty} \\Big[ \\tan^{-1}b - \\tan^{-1}1 \\Big] \\\\ \u0026amp; = \\frac{\\pi}{2} - \\frac{\\pi}{4} \\\\ \u0026amp; = \\frac{\\pi}{4} \\end{aligned}\\]  Since we got a number, that shows that the series must converge! Our answer from the integral is not necessarily the sum of the series!\nExample 2 #  $$ \\sum_{n=1}^\\infty \\frac{3}{2n-1} $$\nTry the divergence test first. The limit is 0 so it doesn\u0026rsquo;t automatically diverge.\nThe integral test:\n$$ f(x) = \\frac{3}{2x-1} $$\nIt isn\u0026rsquo;t always positive, but it is on our interval  \\([1, \\infty)\\)  . It is continuous on our interval and it is also decreasing, so lets try the integral test.\n \\[\\begin{aligned} \\int_1^\\infty \\frac{3}{2x-1} \u0026amp; = \\lim_{b \\rightarrow \\infty} \\int_1^b \\frac{3}{2x-1} \\\\ \u0026amp;\u0026amp; u = 2x-1 \\\\ \u0026amp;\u0026amp; du = 2dx \\\\ \u0026amp; = \\lim_{b \\rightarrow \\infty} \\frac{3}{2} \\int \\frac{1}{u} du \\\\ \u0026amp; = \\lim_{b \\rightarrow \\infty} \\frac{3}{2} \\ln \\ \\big[2x-1\\big]_1^b \\\\ \u0026amp; = \\frac{3}{2} \\lim_{b \\rightarrow \\infty} \\big[ \\ln(2b-1) - \\ln(2-1) \\big] \\\\ \u0026amp; = \\infty \\end{aligned}\\]  Since the limit evaluates to  \\(\\infty\\)  the integral diverges. So the series also diverges.\nExample 3 #   \\[\\begin{aligned} \\sum_{n=1}^\\infty \\frac{\\ln n}{n} \\\\ f(x) = \\frac{\\ln x}{x} \\end{aligned}\\]  The function is positive and continuous. To show decreasing show that  \\(f\u0026#39;(x) \u0026lt; 0\\)  :\n \\[\\begin{aligned} f\u0026#39;(x) \u0026amp; = \\frac{1 - \\ln x}{x^2} \\\\ 1 \u0026amp; \\leq \\ln x \\\\ e \u0026amp; \\leq x \\end{aligned}\\]  Choose a interval where  \\(f(x)\\)  will be decreasing.  \\(f(x)\\)  will certainly be decreasing on the interval  \\([3, \\infty)\\)  .\nSo:\n \\[\\begin{aligned} \\int_3^\\infty \\frac{\\ln x}{x} \u0026amp; = \\lim_{b \\rightarrow \\infty} \\int_3^b \\frac{\\ln x}{x} dx \\\\ \u0026amp;\u0026amp; u = \\ln x \\\\ \u0026amp;\u0026amp; du = \\frac{1}{x} dx \\\\ \u0026amp; = \\lim_{b \\rightarrow \\infty} \\int_3^b u\\ du \\\\ \u0026amp; = \\lim_{b \\rightarrow \\infty} \\big[ \\frac{1}{2} (\\ln x)^2\\big]_3^b \\\\ \u0026amp; = \\lim_{b \\rightarrow \\infty} \\big[ \\frac{1}{2} (\\ln b)^2 - \\frac{1}{2} (\\ln 3)^2 \\big] \\\\ \u0026amp; = \\infty \\end{aligned}\\]  Therefore, the integral diverges. So the series also diverges.\nExample 4 #  $$ \\sum_{n=1}^\\infty \\frac{e^\\frac{1}{n}}{n^2} $$\nFirst do the divergence test, the limit is 0 so it doesn\u0026rsquo;t immediately diverge. Its not a geometric series. Its also not a P-series. Let\u0026rsquo;s try the integral test.\n$$ f(x) = \\frac{e^\\frac{1}{x}}{x^2} $$\nThe function must be positive, continuous, and decreasing on the interval. The function is positive. Its only discontinuous at 0 and thats not in our interval. To show decreasing make sure  \\(f\u0026#39;(x) \u0026lt; 0\\)  (alternatively you could show that  \\(a_{n-1} \u0026lt; a_n\\)  ):\n \\[\\begin{aligned} f\u0026#39;(x) \u0026amp; = \\frac{-e^\\frac{1}{x}-2xe^\\frac{1}{x}}{x^4} \\end{aligned}\\]  This is negative on our interval  \\([1, \\infty)\\)  .\nSo lets do the integral test:\n \\[\\begin{aligned} \\int_1^\\infty \\frac{e^\\frac{1}{x}}{x^2} dx \u0026amp; = \\lim_{b \\rightarrow \\infty} \\int_1^b \\frac{e^\\frac{1}{x}}{x^2} dx \\\\ \u0026amp;\u0026amp; u \u0026amp; = \\frac{1}{x} \\\\ \u0026amp;\u0026amp; du \u0026amp; = - \\frac{1}{x^2} dx \\\\ \u0026amp; = - \\lim_{b \\rightarrow \\infty} \\int_1^b e^u du \\\\ \u0026amp; = - \\lim_{b \\rightarrow \\infty} \\big[ e^\\frac{1}{x}\\big]_1^b \\\\ \u0026amp; = - \\lim_{b \\rightarrow \\infty} \\big[ e^\\frac{1}{b} - e^1 \\big] \\\\ \u0026amp; = - [1 - e] \\\\ \u0026amp; = e - 1 \\end{aligned}\\]  Therefore since the integral converges, the series must converge also.\n"}),a.add({id:168,href:'/notes/MATH31/MATH31-series/',title:"MATH31-series",section:"MATH31",content:"Series and sequences #  What is a series #  To evaluate series, first find the partial sum:\n  \\[\\begin{aligned} \\sum_{n=1}^\\infty n \\\\ S_n = 1 \u0026#43; 2 \u0026#43; 3 \u0026#43;\\ ...\\ \u0026#43; n \\end{aligned}\\]  Find the formula for  \\(S_n\\)  $$ S_n= \\frac{n(n+1)}{2} $$\nTake the limit as  \\(n \\rightarrow \\infty\\)  $$ \\lim_{n \\rightarrow \\infty} \\frac{n(n+1)}{2} = \\infty $$\nTelescoping #  These series look like two repeating fractions that end up canceling everything except something from the first term and something from the last. For example:\n \\[\\begin{aligned} \\sum_{n=1}^{\\infty} \\Big(\\frac{1}{2n\u0026#43;3} - \\frac{1}{2n\u0026#43;1}\\Big) \\end{aligned}\\]  First find the partial sum  \\(S_n\\)   \\[\\begin{aligned} S_n) \u0026#43; \\ ... \u0026#43;\\ \\Big ( \\frac{1}{2n\u0026#43;1}-\\frac{1}{2n-1}\\Big ) \u0026#43; \\Big ( \\frac{1}{2n\u0026#43;3}-\\frac{1}{2n\u0026#43;1}\\Big ) \\end{aligned}\\]  Almost all of these fractions will cancel if you see the patern. The only 2 left are:\n$$ S_n = - \\frac{1}{3} + \\frac{1}{2n+3} $$\nTake the limit of this partial sum  \\(S_n\\)  $$ \\lim_{n \\rightarrow \\infty}\\big[ - \\frac{1}{3} + \\frac{1}{2n+3} \\big] = - \\frac{1}{3} $$\nGeometric #  Geometric series take the form of:\n$$\\sum_{n=1}^\\infty ar^{n-1}$$\nThe series will converge of  \\(\\big|r\\big|\u0026lt; 1\\)  , otherwise it will diverge.\nIf the sum does converge, the sum is:\n$$\\sum_{n=1}^\\infty ar^{n-1} = \\frac{a}{1-r}$$\nShortcut #  If the first power of the sequence is 0 then the first term is  \\(a\\)  .  \\(a\\)  stands for the first term in your series.\nFor example:\n \\[\\begin{aligned} \\sum_{n=1}^{\\infty} \\Big ( \\frac{2}{3} \\Big )^n \u0026amp; = \\sum_{n=1}^{\\infty} \\Big ( \\frac{2}{3} \\Big )\\Big ( \\frac{2}{3} \\Big )^{n-1} \\\\ \u0026amp; = \\frac{\\frac{2}{3}}{1-\\frac{2}{3}} \\end{aligned}\\]  Another example:\n \\[\\begin{aligned} \\sum_{n=2}^{\\infty} \\frac{e^n}{3^{n\u0026#43;1}} \u0026amp; = \\sum_{n=2}^{\\infty} \\frac{e^n}{3\\bullet3^n} \\\\ \u0026amp; = \\sum_{n=2}^{\\infty} \\frac{1}{3} \\Big( \\frac{e}{3}\\Big)^n \\end{aligned}\\]  The mistake most people make here is thinking that  \\(a = \\frac{1}{3}\\)  . This isn\u0026rsquo;t the case because plugging in  \\(n=2\\)  doesn\u0026rsquo;t make the first exponent 0. So split off more $\\frac{e}{3}$\u0026rsquo;s to make it in the right form:\nNow since the first term makes the exponent go to 0. You can tell what  \\(a\\)  and  \\(r\\)  are now. So:\n$$ = \\frac{ \\frac{e^2}{27} }{1- \\frac{e^2}{3}} $$\nSo the shortcut here is that you can start with\n$$ = \\sum_{n=2}^{\\infty} \\frac{1}{3} \\Big( \\frac{e}{3}\\Big)^n $$\nand simply plug in 2 for  \\(n\\)  (the starting point). Since we know that the first term is  \\(a\\)  you can jump to the answer:\n$$ = \\frac{ \\frac{e^2}{27} }{1- \\frac{e^2}{3}} $$\nHarmonic #  Harmonc series are defined as:\n$$ \\sum_{n=1}^{\\infty} \\frac{1}{n} = \\frac{1}{1} + \\frac{1}{2} + \\frac{1}{3} +\\ \u0026hellip;\\ + \\frac{1}{n} $$\nHarmonic series are divergent. If a sequence  \\(\\{a_n\\}\\)  is convergent, any subsequence of  \\(\\{a_n\\}\\)  must also be convergent. To show that a sequence  \\(\\{a_n\\}\\)  diverges, it is enough to show that a subsequence diverges.\nNote: If a series converges, then\n \\[\\begin{aligned} \\sum_{n=1}^{\\infty} a_n \\\\ \\lim_{n \\rightarrow \\infty}^{} a_n = 0 \\end{aligned}\\]  So to show a series diverges, it\u0026rsquo;s enough to show:\n$$ \\lim_{n \\rightarrow \\infty} a_n \\neq 0 $$\nIf the limit doesn\u0026rsquo;t equal 0, or  \\(DNE\\)  , the series  \\(\\{a_n\\}\\)  diverges.\nRemember! The limit equaling 0 does NOT necessarily mean convergence!\nExample #   \\[\\begin{aligned} \\sum_{n=1}^{\\infty} \\frac{2n^2-1}{3n^2-1} \\\\ \\lim_{n \\rightarrow \\infty} \\frac{2n^2-1}{3n^2-1} \\neq 0 \\end{aligned}\\]  Diverges because the limit equals 0!\nProperties of convergent series #   You can always pull a constant out in front of the series  $$ \\sum_{n=1}^{\\infty} C a_n = C \\sum_{n=1}^{\\infty} a_n $$\nYou can split sequences on sums or differences  $$ \\sum_{n=1}^{\\infty} (a_n \\pm b_n) = \\sum_{n=1}^{\\infty} a_n \\pm \\sum_{n=1}^{\\infty} b_n $$\nExample #  $$ \\begin{split} \\sum_{n=1}^{\\infty} \\Big ( \\frac{2^n-5^n}{3^n}\\Big ) \u0026amp;) \\\n\u0026amp; =\\sum_{n=1}^{\\infty} \\frac{2^n}{3^n} - \\sum_{n=1}^{\\infty} \\frac{5^n}{3^n} \\end{split} $$\nIf we split this sequence into parts, each part much be convergent for the entire sequence to be convergent! If any single part is divergent then the entire thing is divergent.\n$$ =\\sum_{n=1}^{\\infty} \\Big (\\frac{2}{3}\\Big )^n - \\sum_{n=1}^{\\infty} \\Big (\\frac{5}{3}\\Big )^n $$\nIn this form we can evaluate them as geometric series. Automatically we know this is divergent because the rightmost fraction\u0026rsquo;s  \\(r\\)  is greater than 1. Since a subsequence of the original diverges, the original does too.\nP series #  $$ \\sum_{n=1}^\\infty \\frac{1}{n^P} $$\nWhen  \\(P \u0026lt; 1\\)  the series will diverge.\n$$ \\lim_{n \\rightarrow \\infty} \\frac{1}{n^P} $$\nWhen  \\(P \u0026gt; 1\\)  the series will converge (can be shown with the integral test).\nExample 1 #  $$ \\sum_{n=1}^{\\infty} \\frac{1}{n^2} $$\nHere we can see that  \\(P\\)  , so the series must converge.\nExample 2 #  $$ \\sum_{n=1}^\\infty \\frac{1}{\\sqrt[3]{n}} $$\nHere we can see that  \\(P\\)  , so the series diverges.\nExample 3 #  $$ \\sum_{n=1}^\\infty n^{-\\pi} = \\sum_{n=1}^\\infty \\frac{1}{n^\\pi} $$\nSince  \\(P\\)  the series must converge.\n"}),a.add({id:169,href:'/notes/MATH31/MATH31-unit-1/',title:"MATH31-unit-1",section:"MATH31",content:"Unit 1 #  Notes #  Math 31 Exam 1 SOLN Fall 2018.pdf\nExam stuff #  Math 31 Exam 1 SOLNS Spring 2018.pdf Math 31 Exam 1 SOLNS Spring 2019.pdf Math 31 Fall 2019 LN UNIT 1.pdf\n"}),a.add({id:170,href:'/notes/MATH31/MATH31-unit-2/',title:"MATH31-unit-2",section:"MATH31",content:"Unit 2 #  Notes #     Unit 2      Base notes Math 31 LN Differential Equations CH 9 REVISED Spring 2019.pdf    Math 31 LN UNIT 2 Chapter 6 Fall 2019.pdf    Math 31 UNIT 2 LN (part 2) Spring 2019.pdf   Exam stuff Math 31 Exam 2 SOLNS Spring 2019.pdf    Math 31 Exam 2 Spring 2020.pdf   Suppliments Ch 6 Ch 8 Ch 9 Examples Suppliment.pdf    Videos #     Chapter 6 YouTube link     6.1 Areas Between Curves link   6.2 Volumes link    6.3 Volumes by Cylindrical Shells link   6.4 Work link       Chapter 8 YouTube Link     8.1 Arc Length link   8.2 Area of a Surface of Revolution link   8.3 Applications to Physics and Engineering link        Chapter 9 YouTube Link     9.1 Modeling with Differential Equations link    link    link    link   9.3 Separable Equations link    link   9.4 Models for Population Growth link   9.5 Linear Equations link    link    Quizzes #     Unit 2 Quizzes      Ch. 6 6.2-shell.pdf    6.2-torus.pdf    6.4-work.pdf   Ch. 8 8.1-arc-length copy.pdf    8.2-surface-area.pdf    8.3-physics.pdf   Ch. 9 Math 31 Chapter 9 Assignment Spring 2020.pdf    "}),a.add({id:171,href:'/notes/MATH31/MATH31-unit-3/',title:"MATH31-unit-3",section:"MATH31",content:"Unit 3 #  Notes: calculus.pdf\n Math 31 Sequences and Series Part I Spring 2020.pdf Chance Zed Chapter 11 Assignment part 1.pdf\nMath 31 Series Assignment Part 2 Spring 2020.pdf Chance Zachary Chapter 11 Assignment Part 2.pdf\nMath 31 Chapter 11 Exam 3 Spring 2020.pdf Chance Zachary Exam 3.pdf\n"}),a.add({id:172,href:'/notes/PHIL103/PHIL103-ec-lecture/',title:"PHIL103-ec-lecture",section:"PHIL103",content:"Marybeth Gasman: Are we ready to educate a diverse nation? #  The landscape of higher education\n 2014, for the first time the nation\u0026rsquo;s study body, K-12, was majority students of color 2019, almost half (45%) of the nation\u0026rsquo;s college students are students of color 2050, census data predicts that the US will be majority people of color  Faculty\n  88% of faculty at 60 top research universities is White\n  76% of the nation\u0026rsquo;s faculty overall is White\n  5% of faculty are Latinx compared to 20% of undergraduate population, 2% growth in 20 years\n  6% of faculty are black compared to 14% of undergraduate population, 1% growth in 20 years\n  11% of faculty are Asian compared to 7% of the undergraduate population\n  How teaching needs to change a diverse nation\n Assume success on the part of the students rather than seeing students of color from a deficit perspective.  Faculty should believe in their students success (even sometimes more so than the student believes in themselves)   Teach in ways that focus on what the students need to learn rather than what is convenient for the professor. Work together to co-construct classes and cirricula that empowers the students.  Changing teaching to educate a diverse nation\n Allow students to bring their full identities to the classroom and capitalize on all aspects of a student\u0026rsquo;s identity in the learning process Give students the opportunity to participate in culturally relevant assignments that speak to the issues in the communities from which they come. Encourage students collaboration over competition.  The role today\u0026rsquo;s students can play, consider becoming a professor, why?\n Opportunity to challenge and shape the minds of the next generation Chance to pursue your ideas Opportunity to have an impact on society with your research and teaching.  The role today\u0026rsquo;s faculty can play\n Encourage your students to pursue the professoriate as a career. Introduce your students to research of various types. Share the various aspects of your faculty career with your students so they understand faculty life. Show enthusiasm for your teaching, research and career so that students understand the positive aspects of being a professor.  Eric Helland: Why are the prices so damn high? #  Why?\n Lazy rivers and other waste? Administrative costs? Increases in quality?  Administrators\n The reason college tuition costs so much is \u0026ldquo;the constant expansion of university administration\u0026rdquo;  Bloat\nIncrease in quality?\nWhy should higher quality increase cost?\n What we teach has improved in quality (in some cases), but these kinds of improvements cannot explain increases in costs. It is no more expensive to teach new theories than old Why should quality increase cost?  If not bloat or quality then what?\nIt really looks like the story is the cost of faculty is the big driver in the rise of tuition.\nHealth care: note fastest increase in 60s and 70s\n Waste and administrative costs are plausible reasons why the US health care costs system is expensive but less so for why costs have grown over time. If growth in admin costs explain the growth in health care costs, then admin costs would have to grown by 8k%, even assuming that base health care costs had doubled. These numbers are not plausible.  The costs have been driven by the salaries\nBut why do wages increases lead to price increases in some industries but not others?\nRelative productivity growth\nUnique aspects of the Baumol Effect\n"}),a.add({id:173,href:'/notes/PHIL103/PHIL103-lecture-20200831/',title:"PHIL103-lecture-20200831",section:"PHIL103",content:"Applied ethics #   Bioethics, medical ethics, environmental, animal, business, political, sexual, population\u0026hellip;  Why study applied ethics?\n Philosophers are supposed to have a comparative advantage in argument and analysis Ethics is inherently something to apply  Philosphy\n What is involved in doing philosophy well? Pursue the truth Better: present good reasons for thinking one has got things right How good to the reasons have to be? Philosophy isn\u0026rsquo;t supposed to be a game where different sides choose their favorite argument Supposed to avoid idealogical advocacy  Applied ethics and philosophy\n Does applied ethics measure up? People disagree; there are too many areas characterized by reasonable pluralism  So what do we do?\n Rational, reasoned discussion But is that doing philosophy?  Other aims\n Can simply clarify what the different arguments are and the problems they encounter Sometimes there could be genuinely philosophical argument that has direct implications for an applied issue  Some advice for the semester\n We need to watch out for the pretense of applied ethics Be skeptical of the opinions that the readings present Be careful that we don\u0026rsquo;t mask private advocacy with philosophy  1. Introduction sp15 recap.pdf\n"}),a.add({id:174,href:'/notes/PHIL103/PHIL103-lecture-20200907/',title:"PHIL103-lecture-20200907",section:"PHIL103",content:"Lecture \u0026ldquo;In which I defend capitalism\u0026rdquo; #  Capitalism (the ideology) says:\n Anything thats peaceful Voluntary trading. not war; not empire  Lecture on causes of wealth and nature #  "}),a.add({id:175,href:'/notes/PHIL103/PHIL103-lecture-20200916/',title:"PHIL103-lecture-20200916",section:"PHIL103",content:"Capitalism socialism lecture #   Welfare economics #  7. econ2.pptx\n"}),a.add({id:176,href:'/notes/PHIL103/PHIL103-lecture-20200924/',title:"PHIL103-lecture-20200924",section:"PHIL103",content:"lockean property rights-revised.pdf Posner-IP.pdf\n"}),a.add({id:177,href:'/notes/PHIL103/PHIL103-lecture-20200927/',title:"PHIL103-lecture-20200927",section:"PHIL103",content:""}),a.add({id:178,href:'/notes/PHIL103/PHIL103-lecture-20201008/',title:"PHIL103-lecture-20201008",section:"PHIL103",content:"Why are we \u0026ldquo;creeped out\u0026rdquo; when someone we don\u0026rsquo;t know knows something about us?\nAnother example: a jointly authored book\nThe question is: How free and open should it be?\n"}),a.add({id:179,href:'/notes/PHIL103/PHIL103-lecture-20201014/',title:"PHIL103-lecture-20201014",section:"PHIL103",content:"a-short-introduction-to-the-world-of-cryptocurrencies.pdf\n"}),a.add({id:180,href:'/notes/PHIL103/PHIL103-lecture-20201024/',title:"PHIL103-lecture-20201024",section:"PHIL103",content:"The Law and Economics of Internet Access #  Innovation and Sec 230\n Develop and offer content without fear of legal liability \u0026ldquo;No provider or user of an interactive computer service shall be treated as the publisher or speaker of any information provided by another information content provider.\u0026rdquo; Innovation: want to make it likely that we\u0026rsquo;ll have access to more awesome content.  Net neutrality and Title II FCC public utility regulation\n Private carrier vs contract carrier vs common carrier Governments and ISPs should treat all data equally. Examples: blocking/filtering content, intentionally increasing or decreasing up/download speeds for certain users/content.  Common carrier designation\n June 2015 Federal Communications Commission ruling requires treating broadband providers as a telecom, and so a common carrier (like a public utility) under 1923 Communications Act. Was reversed by FCC vote under the new chairman, Ajit Pai, on December 14 2017 This vote returned ISPs to oversight of the FTC This was upheld in Federal Court in 2018, but that decision also allowed states to pass their own Net Neutrality laws. 20+ Peurto Rico and DC have. These are being challenged by the US Dept. of Justice  Title II FCC common carrier designation\n The economic rationale; high fixed cost (initial investment to build out), low marginal cost (to serve each subsequent subscriber). Leads to monopoly power and calls for public utility style regulation. The \u0026ldquo;Bell Doctrine\u0026rdquo;  The Bell Doctrine\n Only the \u0026ldquo;edge\u0026rdquo; segment of delivery is subject to monopoly power, so heavily regulated there. Ma Bell: devices/equipment, long distance service (deregulated market); only local transmission was heavily regulated Electricity: plant generation, transmission lines (less regulated or deregulated); local distribution (heavily regulated) Broadband: devices/equipment, websites/apps (mostly unregulated); ISPs (FCC regulation)  Technology and Access Neutrality #  Net Neutrality\n Governments and ISPs should treat all data equally Examples: rules converning blocking/filtering content, intentionally increasing or decreasing up/download speeds for certain users/content, zero-rating.  Is FCC regulation necessary for access to awesome content?\n Case study: the internet of the 90s Early 90s bought access to content centers where they only got access to content, users and sites who were associated with the center (e.g. CompuServe or AOL) Why did that change?  ISP competition\n FTC had oversight of ISP abuses of market power from 2005-2015, policing anti-competitive practices. In most areas, there are at least two wireline competitors Plus, additional competition from wireless/5G. Market is at least a duopoly with the threat of new entry and innovation. A contestable enough market?  Does FCC regulation make it more likely that we\u0026rsquo;ll have a better access to awesome content?\n FCC is a media (content) regulator. FCC open internet rules expressly allowed ISPs to filter and block content. Effect of FCC regulations on build-out investment in areas currently underserved. Effect of regulations on other forms of competition: ICPs and the example of Netflix. Netflix opposed zero-rating in the US, but doesn\u0026rsquo;t in Australia (because they were newer in Australia it gives them a way to compete for users). Other regulator effects: who\u0026rsquo;s in a better position to thrive in a heavily regulated market? Large corporations/firms love a heavily regulated market.  Compliance costs and cronyism #  GRAHAM: So would you work with us in terms of what regulations you think are necessary in your industry?\nZUCKERBERG: Absolutely.\nGRAHAM: Okay. Would you submit to us some proposed regulations?\nZUCKERBERG: Yes. And I\u0026rsquo;ll have my team follow up with you so, that way, we can have this discussion across the different categories where I think that this discussion needs to happen.\nGRAHAM: Look forward to it.\n"}),a.add({id:181,href:'/notes/PHIL103/PHIL103-lecture-20201028/',title:"PHIL103-lecture-20201028",section:"PHIL103",content:"Corporate Social Responsibility #  Markets, recap\u0026hellip; #   Market mechanisms vs political mechanisms for resource allocation You get (more!) effecient coordination without central direction in a system of property, contract, and consent. Private vices translate into public benefits Social obligations?  CSR #   Friedman\u0026rsquo;s main complain: \u0026ldquo;socially responsible\u0026rdquo; business amounts to a kind of fraud A violation of the fiduciary relatioinship between principal (owners, shareholders) and agent (CEO, management).  Examples #   Reducing emissions more than the law requires to offset global warming Using more expensive domestic suppliers to keep American indsutry strong Keeping on unproductive workers to save jobs Keeping a failing, obsolete factory open to save a local community  Using other people\u0026rsquo;s money without their consent #   A business executive needs to decide whether or not to close an unprofitable division. Who would be affected? Stakeholders: shareholders of corporation, but also employees, customers, suppliers, and local community of the company. \u0026ldquo;Creative destruction\u0026rdquo; Larry the Liquidator  So who\u0026rsquo;s the better fiduciary?\nPrincipal-agent problems #   Separation of ownership (shareholders) and control (CEO, management). Gekko says \u0026ldquo;greed is good.\u0026rdquo; Why? Problems in corporations are primarily the result of a lack of managerial accountability.  What happens if managers are told to serve multiple masters? #   Endangers incentives that encourage managers to make very poor decisions. Makes it difficult to detect the rent-seeking behavior of corporate managers because they aren\u0026rsquo;t scrutinized according to the profitability of the firm. And Friedman\u0026rsquo;s position actually makes the actions of managers more tractable – prevents corporate managers from being able to concentrate benefits on themselves, while dispersing costs on unsuspecting shareholders.  A diagnosis #   The problem is a stakeholder-type approach that makes it very difficult to detect the rent-seeking behavior of corporate managers because they aren\u0026rsquo;t scrutinized according to the profitability of the firm.  Friedman\u0026rsquo;s claim #  \u0026ldquo;There is one and only one social responsibility for business – to use its and engage in activities designed to increase its profits so long as it stays within the rules of the game.\u0026rdquo;\nFriedman\u0026rsquo;s argument implies either\n Managers (CEOs) should do whatever it takes to maximize profit (shareholder interests), so long as they don\u0026rsquo;t break the law, OR Managers should maximize profit, but only in ways that observe their pre-existing moral duties.  Option 1 makes the view false, or option 2 makes the view vacuous.\nHeath\u0026rsquo;s market failures approach to ethics in business #  Thesis #   The market will force firms to be ethical (or, ethical enough). Really?  \u0026ldquo;Pharma bro\u0026rdquo; Martin Shkreli #  Shkreli bought the rights of a drug that started at $13 per pill, and raised the price to $750 per pill. He was able to take the monopoly situation because there was only a certain group of people who needed the situation. Other companies had to go through a long rigaramole to create their own version of the drug, so he had a monopolized market for a while.\nTypical argument (in reponse to market failure) #   Idealized perfectly competitive economic model of a market would achieve some socially optimal (or Pareto efficient) outcome. Real world market fails to achieve that outcome: \u0026ldquo;Market failure!\u0026rdquo; Implement an interventionist solution.  What is a market failure? #   Not just a market outcome that you don\u0026rsquo;t like A (free) market failed to generate an efficient outcome. Not all the costs associated with a private transaction are internalized? Or, certain goods/services will tend to be under-provided by the market because of a lack of incentives. An institution failed in some way: the market.  Heath\u0026rsquo;s argument #   Idealized perfectly competitive economioc model of a market would achieve some socially optimal (or Pareto efficient) outcome. Real world market fails to achieve that outcome: \u0026ldquo;Market failure!\u0026rdquo; Business have a morally responsibility to act in ways that correct for these inefficiencies.  Three kinds of rules #   Recognition rules: rules about the making of rules, rules that rules have to answer to. Rules of the game: formal rules governing \u0026ldquo;play.\u0026rdquo; Rules in the game: informal rules governing \u0026ldquo;play.\u0026rdquo; This third area is where business ethics is important.  "}),a.add({id:182,href:'/notes/PHIL103/PHIL103-lecture-20201104/',title:"PHIL103-lecture-20201104",section:"PHIL103",content:"Market and government failures #  What is a market failure? #   A (n unregulated) market failed to generate an efficient outcome Not all the costs associated with a private transaction are internalized. For example: pollution. Or, certain goods/services will tend to be under-provided by the market because of a lack of incentives. For example: a lighthouse. An institution failed in some way: the market.  Typical argument #   Idealized perfectly competitive economic model of a market would achieve some socially optimal (or Pareto efficient) outcome Real world markets sometimes fail to achieve that outcome: \u0026ldquo;Market failure!\u0026rdquo; Government implements a regulatory solution  Heath\u0026rsquo;s argument #   Idealized perfectly competitive economic model of a market would achieve some socially optimal (or Pareto efficient) outcome Real world markets sometimes fail to achieve that outcome: \u0026ldquo;Market failure!\u0026rdquo; Business have a morally responsibility to act in ways that avoid or correct these inefficiencies.  Parallel legal argument #   An idealized legal process would achieve the perfectly just outcome The real world court system sometimes fails to achieve that outcome \u0026ldquo;Legal failure!\u0026rdquo; Lawyers (or judges\u0026hellip;) have a moral responsibility to act in ways that avoid or correct for these failures.  Three kinds of rules #   Recognition rules: rules about the making of rules, rules that rules have to answer to Rules of the game: formal rules of governing \u0026ldquo;play\u0026rdquo; Rules in the game: informal rules governing \u0026ldquo;play\u0026rdquo;  Applying the approach #   The purpose of market interaction is to generate Pareto-efficient (or positive sum) outcomes. Rules that provide for privte ownership and voluntary exchange generally generate Pareto-efficient (or positive sum) outcomes But Sometimes they don\u0026rsquo;t! Sometimes there are market failures When they don\u0026rsquo;t do what would generate (or a more) efficient outcome A regulatory way to avoid the failure (public intervention, Pigouvian tax, etc). A business-ethical way to avoid the failure (\u0026ldquo;don\u0026rsquo;t exploit market failures – correct them\u0026rdquo;)  Failures, market and government (from business ethics to political ethics) #  Thesis #   The market will force firms to be ethical enough But there are a lot of cases where corps are able to get away with lying and cheating, and be profitable  Corporate power and corporate harm #   Where does this power come from? How are they able to get away with inflicting harm on, e.g. exmployees, consumers, general public? Under what conditions would their power to do this be sustainable?  Revised thesis #   The market will force firms to be ethical enough UNLESS corps are able to insulate themselves from competitive market pressures  How? #   Government failure Example: government privilege concentrates corporate power, which translates into various social harms  Examples? #   Martin Shkreli, Turing Pharm Bailouts for 956 financial corps Regulatory capture: regulatory agencies that are created to \u0026ldquo;protect people from industry\u0026rdquo; end up serving the established interests in that industry to the detriment of consumers, potential competitors, and everyone else.  What is a government failure? #   Government intervention generates an outcome that is less efficient than if they hadn\u0026rsquo;t intervened An institution failed in some way: the government itself  Lesson 1: behavior symmetry #   Market failure, market actors are self-interested and lack complete information Interventionist solution? Are political actors morally and informationally perfect? Even if particular markets don\u0026rsquo;t meet the standard conditions of perfect competition required to ensure social optimality, government intervention doesn\u0026rsquo;t always make things better. (sometimes it makes things worse) Is polotics a Deus Ex Machina, or another tool we have to be careful about how we use?  Lesson 2 #   A market and government failures approach to business ethics General moral rule of thumb: do not seek or distribute/offer rents  Michael Munger – Market Failure and Sensible Regulation #  The pretty pig contest #  \u0026ldquo;The first pig is so absolutely ugly that you give the prize to the second pig without even seeing it.\u0026rdquo;\nStep 3 is weak.\nThe munger test: no unicorns!\n"}),a.add({id:183,href:'/notes/PHIL103/PHIL103-lecture-20201110/',title:"PHIL103-lecture-20201110",section:"PHIL103",content:"How to be a better person #  How can we manage for better behavior? #   Successful morality interventions need to be based on the correct model of moral psychology. The way to induce better behavior depends on how people make decisions.  Moral psychology #   A study to determine how people (fail to) make moral decisions. Behavioral ethics. Distinct from normative ethics: a study to determine what the moral (i.e., morally right and morally wrong) decision is.  Behavioral questions #   What motivates good/bad behavior? Why do people act badly? Why aren\u0026rsquo;t we better? (Why aren\u0026rsquo;t we worse?)  Four models #   Rational egoists Confused do-gooder Blind spots Weakness of will  Rational egoist model #   People are smart and selfish Smart: rational, effective in taking the most efficient means to secure their end. Ends? Their own. People act badly when they can \u0026lsquo;get away with it.\u0026quot;  How do you get rational egoists to act better? #   Make good behavior pay; make bad behavior costly. Don\u0026rsquo;t subsidize bad behavior. Better question: are people rational egoists? Consider ultimatum games  People do have tendencies associated with rational egoists #   Things that effect performance in ultimatum games  Meeting the receiver beforehand Seeing the receiver (Perceived) characteristics of the players    Confused do-gooder model #   People want to do the right thing But they\u0026rsquo;re often unsure what that is Can\u0026rsquo;t reason their way through the dilemma.  We just need more ethics training? #   Confused do-gooder model might be based on a false assumption. People will recognize a moral issue or dilema when confronted with it. Can we train people to recognize this?  Blind spot model #   Wrongdoers aren\u0026rsquo;t aware they\u0026rsquo;re in a dilemma. They\u0026rsquo;re unaware of the relevant moral issues that are at stake. They go through situations on autopilot. The Lake Wobegon Effect  Weak willed model #   I know its wrong, I don\u0026rsquo;t really want to do it, but I just can\u0026rsquo;t stop myself. Ego depletion: willpower is like a muscle that gets tired from use, and hard to use effectively when its tired.  Ego depletion experiments #  Horrifying real life experiments include favorable positions vs time throughout a day for a judge.\nWhat affects behavior? #  Milgram variations #  Another variation #  If the subjects were told that the test was supposed to test their own moral will, most subjects wouldn\u0026rsquo;t shock them at all.\n"}),a.add({id:184,href:'/notes/PHIL103/PHIL103-lecture-20201122/',title:"PHIL103-lecture-20201122",section:"PHIL103",content:"Why be moral? #  Two questions\n Descriptive: would you be moral if you could always get away with immorality? Normative: should you be moral if you could always get away with immorality? Normativity clarification: this is a rational should, not a moral should. Is morality rational?  Rational choice theory\n People have a stable, ordered set of preferences. Actions have utility insofar as they satisfy these preferences. Rational agents always choose the action that has the highest expected utility in light of their preferences.  Expected utility\n Discount the value of something by the probability it will occur. E.g., you can buy a lottery ticket for $10. Has a 1% chance of winning $100, and a 99% chance of winning $0. Whats the expected utility? ((0.01 \\cdot 90) + (0.99 \\cdot -10))  Is morality (altruism) rational?\n Why does this matter? Why try to show that it can be in our interest to be altruistic? Remember, preferences are just given. And it turns out that most people are naturally altruistic. So, according to rational choice expected utility theory, altruism is rational.  Not a satisfying answer\n Still want to know if its rational to have such preferences in the first place  If you could take a pill that would eliminate altruistic ends, would you have reason to do so/not to do so? If you were a sociopath and you could take a pill that would imbue you with altruistic prefernces, would you have a reason to do so/not do so?    Prisoner\u0026rsquo;s Dilemma\nImagine you have 2 prisoners, A and B\n    B is silent B testifies     A is silent Both get 6 months A gets 10 years, B goes free   A testifies A goes free, B gets 10 years Both get 5 years    Another version\n    Player 2 cooperates Player 2 defects     Player 1 cooperates 1: WIN, 2: WIN 1: LOSE BIG, 2: WIN BIG   Player 1 defects 1: WIN, 2: LOSE BIG 1: LOSE, 2: LOSE    Cooperation is a positive-sum, but defection is a dominant strategy\n Dominant strategy: a strategy that produces the best results for a player regardless of what other players do Other player will either defect or cooperate:  If she defects, I do better by defecting If she cooperates, I do better by defecting. So I should always defect.    Connection to morality\n Generally, morality is a positive-sum game. Life without morality is a negative sum game. But theres always a strong temptation to cheat. Should I?  Iterated games\n What if you play PD multiple times with different players who play a wide variety of ways? What strategy works best then?  Robert Axelrod\u0026rsquo;s computer simulations\n Best strategy is tit for tat. Cooperate until the other player defects, then do whatever the other player did last.  Variations: reputation\n Play one PD round with the person next to you Record total score Hold up whatever card you played (so everyone can see) Find a new player to play with – must agree to play next round. Play another round and record the total score Repeat 3-5 One person is randomly selected and paid a tally of their score  An argument that it\u0026rsquo;s rational to be mroal\n Life is a series of PD interactions, where we have informatino about each other So, \u0026ldquo;maximize my utility\u0026rdquo; doesn\u0026rsquo;t maximize your utility. It\u0026rsquo;s better to adopt a credible, public strategy to restrain yourself, provided others do so as well. Therefore, it\u0026rsquo;s rational to internalize a moral code that requires restraint and disposes one to cooperate.  "}),a.add({id:185,href:'/notes/PHYS105/PHYS105-lab-20200326/',title:"PHYS105-lab-20200326",section:"PHYS105",content:"Centripetal force lab #  The string holds the bob, and the entire mechanism spins in a circle to cause the bob to extend outward and hit the tape marker.\nTime for 20 revolutions\nData measured is from inside to center of L\nShould be percent difference not % error\nWrite a brief conclusion after the lab. Usually we try to make our experiments have a small percent error, but until now its been hard to tell if it is indeed small. Be familiar with our numbers, the precision of the instruments. For instant v is measured to the .01cm. Estimate the cumulative error, in other words, if the percent diff is less than 10% then thats pretty good!\nThis is due Fri at 5p, data is in CANVAS.\nProcedure\n Measure the mass of the bob on the digital scale Measure the time for 20 revolutions  "}),a.add({id:186,href:'/notes/PHYS105/PHYS105-lab-20200402/',title:"PHYS105-lab-20200402",section:"PHYS105",content:"Due in 3 weeks.\nThe Ballistic Pendulum #  2 different ways to measure a projectile\nWatch the youtube video\nFor the theory section: #  How to find initial velocity:\nMeasure the total height\nAnd the length in the x direction\nKinematics\nThen find total time\nSolve for t\nPlug back in\nTo make the calculations:\nHorizontal measurements\nBoth of these together is x total\nThen measure vertical\nAdd both together to get y total\nData is already in the document\nCalculate the muzzle speed using the kinematics equations\nSecond part of the lab has the pendulum down so the ball launches into the pendulum.\nThe change in height of the pendulum is measured.\n$h$ is the difference in height of the pendulum\u0026rsquo;s center of mass\nSolve for $V_o$\nFor the second part\nInitial height is of above the platform, final is the height after launch. Change in height is the difference between them.\nDue on the 24th\nHW questions #  Number 4\nWe want to know the speed of the Earth around the Sun and Io around Jupiter.\nNumber 5\nSolve for $x$\nNumber 6\nThe two objects are traveling perpendicular\nBoth speeds are relative to earth and its asking for the rivet\u0026rsquo;s speed relative to the satellite\nBefore they collide\nAfter they collide\nSmashed like a pancake, they want to know time of interaction\nWhat is the average force?\nLab 6 question #  "}),a.add({id:187,href:'/notes/PHYS105/PHYS105-lab-20200423/',title:"PHYS105-lab-20200423",section:"PHYS105",content:"Today #  Lab 8 #  Gas pressure arises from the thermal energy of the gas molecules\nPressure on the y axis, temp on x axis\nGraph the data, find the x intercept, and that should be near absolute zero. Compare that to the accepted absolute zero for percent diff.\n"}),a.add({id:188,href:'/notes/PHYS105/PHYS105-lecture-20200319/',title:"PHYS105-lecture-20200319",section:"PHYS105",content:"Announcements #   CH 8 HWs due tomorrow Quiz 6 due tomorrow  PDF   Power and Energy Lab due tomorrow Can come to either recitation meetings  Test 2 #   Tuesday 11a - 1p Given in docx and PDF Info posted in Course Info folder Just like in class, only use your big powerful brain and the crib sheet No outside help permitted Please do not post test on Cheggs or other websites, academic misconduct  "}),a.add({id:189,href:'/notes/PHYS105/PHYS105-lecture-20200326/',title:"PHYS105-lecture-20200326",section:"PHYS105",content:"Anouncements #   HW 12 CH6 due tues HW 13 Office hour tomorrow at 11am We will meet for lab today (either meeting) Spring break is coming  Clicker question notes #  $$ \\Sigma F = ma \\\n\\Sigma F = -mgy $$\nIn circular motion the direction of the velocity is tangent to the circle.\nCircular motion and Gravity #  Major topics\n Uniform circular motion Centripetal acceleration Gravitation  Circular motion #  Objects moving in a circular path are accelerating. This is because the objects want to go in a straight line.\n$a_{avg} = \\frac{\\Delta v}{\\Delta t}$\nThis is true even if their speed and circular radius are constant.\n$r = constant \\ v = constant$\nSimilar triangles\n$ r_1 = r_2 = r \\\nv_1 = v_2 = v \\\n\\frac{\\Delta r}{r} = \\frac{\\Delta v}{v} \\\n\\frac{\\Delta r}{\\Delta t r} = \\frac{\\Delta v}{\\Delta t v} \\\n\\frac{v}{r} = \\frac{a_c}{v} $\nSince the velocity is tangent to the circle that means the velocity is perpendicular to the acceleration.\nCentripetal Force\nThis is the name we give to the net force that is causing something to bend in a circle!\n$F_{net} = ma = ma_c = \\frac{mv^2}{r}$\nWhat causes centripetal forces?\n This is not a \u0026ldquo;new force\u0026rdquo; to consider The previous slide shows that it is always the net fofce Tt will be the result of all the forces acting on the system Results from T, mg, n, Fa, fs, fk  $ \\frac {Tsin \\theta = \\frac{mv^2}{r}}{Tcos \\theta = mg} \\\ntan \\theta = \\frac{v^2}{gr} $\nAs the acceleration gets bigger, the larger that angle $\\theta$ gets.\n$r = Lsin \\theta$\nwhere $L$ is the length of the string.\nMinimum speed needed to complete a vertical circle:\n$V_{min} = \\sqrt{gr}$\nAt bottom of the circle:\n$T = \\frac{mv^2}{r} + mg$\n"}),a.add({id:190,href:'/notes/PHYS105/PHYS105-lecture-20200331/',title:"PHYS105-lecture-20200331",section:"PHYS105",content:"Annoucements #   HW 13 due tonight HW 14 due fri Quiz 7 posted due 4/16 Centripetal force lab due Fri Recitation today: attend either session Lab on Thurs: attend either session Schedule update by thurs  Today #   More centripetal force  Clicker questions #  Problems #   Ball hanging from pendulum inside moving car turning at 10 mph, what is the radius of the turn?  How fast can a car travel and make a turn without slipping? (Assume road is perfectly flat). What is the force thats bending the car in a circle? The friction of the tires.  The maximum is when $f_s$ reaches $\\mu _sn$\nA car is safely negotiating an unbanked circular turn at a speed of 21 m/s. The maximum static frictional force acts on the tires. Suddently a wet patch in the road reduces the maximum static frictional force by a factor of three. If the car is to continue safely around the curve, to what speed must the drive slow the car?  A banked turn\nFormulas for friction/banked turning\nAcceleration in the y direction is just gravity\nOrbits #  The force that pulls the apple toward the earth is the same force that keeps the moon in orbit. The force of gravity isn\u0026rsquo;t a constant, it depends on the distance away from the object squared.\nThe force is directly proportional to the mass involved. Inversely proportional to the distance separation squared.\nGravitational force is always an attractive force.\n$r$ is the distance from the center of the earth, so as you get farther away the gravitational force becomes smaller.\n"}),a.add({id:191,href:'/notes/PHYS105/PHYS105-lecture-20200402/',title:"PHYS105-lecture-20200402",section:"PHYS105",content:"Announcements #   HW 13 Ch 6 due tomorrow Quiz 7 due 4/14 Lab due tomorrow New lab today Revised schedule posted Office hour tomorrow @ 11am  Today #  Clicker questions #  Gravitational force is always attractive.\nTo find the net force equaling 0, solve this for x:\nLecture #  $G$ is really small, so for it to be appreciable at least one of the masses needs to be big (for instance Earth).\nDirection of the force is always toward center of mass.\nMass is a property independent of location. Mass is a measure of inertia, but also a source of the gravitational force.\nMinimum speed for a circular orbit:\nThe time for one complete revolution of the Earth. Geosynchronous satellites orbit the Earth the same period as 1 day. They orbit the equator.\nWhat is the $h$ to put the satellite into geosynchronous orbit:\nKepler took data from a naked eye observatory to find this law.\nAt the altitude of this orbit the gravitational force has only fallen by around 10%.\nStronger when closer to the planet. The idea of a field allows us to talk about how the force is transmitted. The universal law of gravity depends upon these fields. Einstein added another feature to this where the idea doesn\u0026rsquo;t involve a mass (we\u0026rsquo;re not going to worry about that).\nField lines can never cross.\n"}),a.add({id:192,href:'/notes/PHYS105/PHYS105-lecture-20200414/',title:"PHYS105-lecture-20200414",section:"PHYS105",content:"Anouncements #  Todays new material #  Clicker questions #  The mass of the satellites actually don\u0026rsquo;t matter\nThe smaller the radius the faster the satelite.\n The bigger the radius the longer the period.\n  Discussion #  Last chapter we introduced centripetal acceleration. We briefly introduced what happens when the speed doesn\u0026rsquo;t change. The tangenital component makes the accelerate faster in a circle.\nHow do we get things spinning in a circle in the first place?\nTorque #  The farther away the easier it is to spin the pipe.\nTorque varies with the $sin$ of the angle. Decreasing the radius decreases the torque.\n$$\\tau =rFsin \\theta$$\n(Typo on bottom there, only supposed to be one $\\tau$)\nNo radius $r$ so there isn\u0026rsquo;t any rotation.\n Units of torque is meter Newton (or ft-lbs).\n With the radius being drawn to the corner it gets the longest radius possible.\n Equilibrium #  Sum of the torques must be equal to zero along with sum of the forces being equal to zero.\n$m_1 = 100 g \\\nm_2 = 200 g$\nWhere do you put the second mass to get this in balance?\nThe pivot point on this uniform meter stick located in the middle is called the center of mass.\nThe center of mass of the wrench moves in a straight line while the body of the mass rotates around it.\n It is a weighted average.\n The pole lowers the center of mass so it is below the pivot point.\nSoda can won\u0026rsquo;t balance when empty. However when you add liquid it ends up balancing (up to a certain point).\nIf the center of mass is above a point of balance it will be in equilibrium.\nWhen the center of mass is past the point of support it will fall.\n Pivot is at the elbow. Clockwise torque is positive.\nThe distance that the muscle needs to move is small, but the movement of the arm is big.\n"}),a.add({id:193,href:'/notes/PHYS105/PHYS105-lecture-20200416/',title:"PHYS105-lecture-20200416",section:"PHYS105",content:"Announcements #  Today #  Clicker questions #     Discussion #  Weight of the beam is in the middle because it is uniform, and the center of mass is in the exact center.\nTwo conditions for equilibrium, x is positive to right y is positive to up.\nTwo equations and three unknowns. To get to the solution we need to use the sum of the torques = 0 also.\nChoose any pivot point because the sum of the torques is zero. Choose the point that gets rid of as much unknowns as possible.\nChoose rotational coordinate system. Clockwise will be positive torque.\nSolve for $T$\n$Tsin\\theta$ causes the torque.\nLook at the x component of the pivot\n How to decide the direction of the torque? Lets say this is the setup:\nIf you ignore $F_1$ the beam will rotate CCW.\n The walls are frictionless and the rope at the bottom keeps it from sliding back.\nWhat keeps it from falling is the tension in the rope.\nWhen we choose the pivot point at the bottom it ends up getting rid of what we want, but before we showed that the tension is equal to the force the wall exerts at the top of the ladder.\nCCW +, CW -\n$L$ goes away\nFinding the perpendicular force that causes torque:\n Spinning to the left\nSpinning to the right\n $R$ is the distance from axis of rotation\nRelationships to kinematics\n Try this one:\n"}),a.add({id:194,href:'/notes/PHYS105/PHYS105-lecture-20200421/',title:"PHYS105-lecture-20200421",section:"PHYS105",content:"Announcements #  No graphing exercises on upcoming test despite containing some kinematics.\nToday #  Clicker questions #  Radians are unitless. The 1/2 second doesn\u0026rsquo;t have anything to do with the problem.\n Use the first equation\nYou can also use this equation:\n Use the third equation from above\nWhat is the initial tangential speed $v_{oT}$ and the tangential acceleration $a_T$?\nIts slowing down quite fast!\n Discussion #  1:1 correspondence between transational motion and rotational motion.\nShould be added to the list:\nThese link rotational motion to tangential motion. The sum of the torques is the same as sum of the forces.\nAlso adding in our understanding of energy:\nThe point thats in contact with the surface is instantanteously at rest\n We gave two terms that go into the kinetic energy portion of the equation, how fast the center of mass is moving and how fast it is rotating about the center of mass.\nReplace $\\omega$\nMass $m$ is cancelled\nIf this was just sliding (no friction) the $v_{cm}$ would be higher.\nA look at the cylinder half way down the incline:\nPlus a frictional force $f_s$ that creates the rotation\nThe point that is in contact is at rest so there isn\u0026rsquo;t any displace, thus no work.\n Last thing to add to the table of rotational quantities\n  A look at Quiz 8 #  The angle is 90 degrees between pivot and moment arm.\nCan use these to solve the equation:\nWe\u0026rsquo;re looking for velocity of the center of mass $v_{cm}$:\nRegarding the moment arm\nSince the string is always tangent to the circle it is always perpendicular to where it is attached. Therefore $\\theta = 90$\n"}),a.add({id:195,href:'/notes/PHYS105/PHYS105-lecture-20200428/',title:"PHYS105-lecture-20200428",section:"PHYS105",content:"Announcements #  Test scores\nProbably cancel today\u0026rsquo;s recitation.\nToday #  Microscopid mechanics will have macroscopic ramifications. We\u0026rsquo;ll have to go over:\n Heat Temperature Internal energy Thermal energy  Temperature #  Prof Harris will almost always use (U) for internal energy instead of (E).\nTemperature affects the vibrational energy (E_{vib}), rotational energy (E_{rot}), and the kinetic energy (KE).\nThermal energy\nThe aspects of the internal energy that is affected by thermal processes. The thermal energy (Q) at room temperature the translational kinetic energy is usually much greater than all the other forms of energy.\nThermal energy can be transmitted thru the walls of the container by vibrating the molecules of the wall. The heat can be transferred between each gas thru the wall.\nTemperature is the measure of the average molecular energy of the substance.\nThermal equilibrium is when the average temperatures between two gases are the same. It doesn\u0026rsquo;t matter how many molecules of gas there is.\nThermal equilbrium is like the transitive property in algebra.\nIf (A)\nThermal expansion #  Here (\\Delta T) is the change in temperature, (\\alpha) is the coeffecient of expansion, (\\gamma) is the coeffecient of area expansion, (\\beta) is the coeffecient of volume expansion.\n a)\nb)\nThe measuring tape also expands with that change in temp.\nThis means that the distance betweek meter marks on the tape is actually (1.00009 m)\n This is the way an old thermostat works:\nLets consider a solid rectangular ring:\nAs the part heats up it expands:\n"}),a.add({id:196,href:'/notes/PHYS105/PHYS105-lecture-20200430/',title:"PHYS105-lecture-20200430",section:"PHYS105",content:"Announcements #  Today #  Clickers #    Remember temperature is the average kinetic energy of the system.\nDiscussion #   Note: Ability to derive this next part isn\u0026rsquo;t included in the test.\n Look at a box with one particle:\nNow lets add a lot more particles:\nThese don\u0026rsquo;t need to be derived, but understood. Will be useful on the next exam.\nThe degree of freedom is the \u0026ldquo;number of boxes\u0026rdquo; you can divide the energy into.\nExample #  The conversion of a liter:\nFirst law of thermodynamics #  We\u0026rsquo;ll use the symbol (Q) for heat.\nThe change in internal energy equals the heat added to or the work done on the system.\nImagine dumping a bunch of heated copper pellets into a beaker of water and stir:\nThe final temp ends up being close to the water temp:\nRemember water has an ability to absorb a lot of heat without changing temp.\nLooking at the copper against a thermometer:\nLooking at water against the thermometer:\nWhats (C)?\nExample #  Ignore heat exchange with the calorimeter/outside world.\nThe answer we got for our grey metal is very close to lead:\n"}),a.add({id:197,href:'/notes/PHYS105/PHYS105-lecture-20200505/',title:"PHYS105-lecture-20200505",section:"PHYS105",content:"Announcements #  Class postponed until recitation.\n"}),a.add({id:198,href:'/notes/PHYS105/PHYS105-lecture-20200507/',title:"PHYS105-lecture-20200507",section:"PHYS105",content:"Announcements #  Clickers #    Discussion #  Convection:\nThe warm air is pushed up by the cold air underneath it. Same as buoyant force! This is where the term \u0026ldquo;heat rises\u0026rdquo; comes from.\nThen the hot air cools and cycles down.\nRadiation:\nInfrared heat. Wavelengths that are longer than visible light.\nThe emissivaty of 1 radiates a lot (like a black surface). Emissivaty of 0 radiates nothing.\n Example of a PV (pressure/volume) diagram\nNo matter what path is taken to the second state, it always ends up at the same pressure and volume\nThe system and surrounds\n Make sure to convert all the units\nAnother useful conversion:\nSince energy has left the system, the temperature has gone down.\n The gas is doing work on the environment. The work done is the area under the curve.\n(V_1) is initial volume and (V_2) is final volume.\n Because the volume is not changing, there isn\u0026rsquo;t any work done on the gas or by the gas.\n(C_V) is the molar specific heat.\n "}),a.add({id:199,href:'/notes/PHYS105/PHYS105-lecture-20200512/',title:"PHYS105-lecture-20200512",section:"PHYS105",content:"Announcements #  The open ended question on the exam will almost certainly be a heat engine problem.\nToday #  There will be recitation this afternoon.\nClickers #    Quick review of thermal processes #  Isobaric (constant pressure)\nIsometric (constant volume)\nIsothermal (constant temperature)\nAdiabatic ((q)\nRemember:\nDiscussion #  According to the second law of thermodynamics, there is no perfect heat engine.\n   "}),a.add({id:200,href:'/notes/PHYS105/PHYS105-lecture-20200514/',title:"PHYS105-lecture-20200514",section:"PHYS105",content:"Announcements #  Today #  Clickers #   Clockwise around the PV diagram is negative work done on the gas.\nDiscussion #  Container on the left contains 3 times the thermal energy because it has 3 times the amount of particles, even tho the temperatures are the same.\nThe disorder is proportional to the number of available states (boxes that you can divide each curve into). More temp = more disordered state.\n  The universe always looses order, so the negative value is off.\n"}),a.add({id:201,href:'/notes/PHYS105/PHYS105-recitation-20200331/',title:"PHYS105-recitation-20200331",section:"PHYS105",content:"Angular motion questions #  HW Questions #  1\n5\nSince traveling less than ideal speed the car slides down the bank.\n6\nAnother problem #  A pendulum swings back and forth with a given length 2m. (Similar to quiz)\nIt is moving tangenital at 8 m/s\n What is the radial or centripetal acceleration?  What is the tangential acceleration?  What is the tension in the string?  "}),a.add({id:202,href:'/notes/PHYS105/PHYS105-recitation-20200414/',title:"PHYS105-recitation-20200414",section:"PHYS105",content:"Anouncements #  Quiz 7 #  Part 1 #  The shape made by swinging the string makes a cone.\nTo find the angle look at the second equation.\nThe radius of the circle is $lsin \\theta$\nSolve for $v$.\nPart 2 #  Vertical circle\nWe\u0026rsquo;re interested in the ball at three different points.\nPart A\nSolve for $v$\nPart B\nSolve for $v$\nPart C\n HW #  2 #  Positive torque clockwise, negative torque CCW.\nSolve for $\\ell_2$\nIf getting the wrong answer switch the place of the pivot and the center of mass.\nSwitch sign (at red arrow above)\nPart B\nUse the other condition of equilibrium\n3 #  What is the force applied at that orientation to achieve the given torque.\nThe perpendicular force results in the wrench spinning.\n"}),a.add({id:203,href:'/notes/PHYS105/PHYS105-recitation-20200416/',title:"PHYS105-recitation-20200416",section:"PHYS105",content:"This is usually lab time but today it will be recitation.\nAnnouncements #   Spine problem\nTo find these unknowns we use the sum of the torques\nFill out distances\nFind perpendicular components\nSolve for $F_m$\nBack muscle exerts 2.3 times your weight to hold you up!\nTotal force\nJust bending over the force you put on your spine is 2.5 times your body weight.\n Kinematics problem\nFinal angular velocity will be 0\nWhat does the sign of the answer mean?\nMeans it is slowing down.\n Rotational inertia will be given to us. Not expected to calculate or memorize them.\nPoint particle\nRing\nDisc / clinder\nSolid sphere\n Atwood machine (w/ pulley)\nWhat is the acceleration of the masses?\nFrictionless pulley\nFree body of $m$\nFree body of $2m$\nThe rope is not stretching\nFree body of pulley\nSum the torques\nPivots on the axel\nThe tensions causes the rotation. Clockwise positive\n3 equations with a new unknown\nSolve for $T_1$ and $T_2$\n HW Problems #  4 #  Problem is looking for force the ground exerts on the hoof $F_{GY}$\nDivide total mass by 2 because only looking at one hoof.\nUnknowns\nChoose pivot point at hoof\nFind angles\nCCW positive torques\nCorrection: actually force of wall divided by two because its being supported by both hoofs.\n"}),a.add({id:204,href:'/notes/PHYS105/PHYS105-recitation-20200421/',title:"PHYS105-recitation-20200421",section:"PHYS105",content:"Quiz 8 #  Part 1\nWhat is the tension $T_L$?\nPart 2\nBecause the disc is spinning you must add in the rotational component. $I$ Will be given.\nDoesn\u0026rsquo;t depend on mass.\n Topics to be covered on exam #  Rotational translation\nCentripetal acceleration\nGravitational laws\nAngular velocity\nIf something is rolling\n HW #  6 #  Convert to seconds\nUse the period around the sun to find the speed\nPossible to do it this way:\n7 #   Clicker question #  Prove it:\n"}),a.add({id:205,href:'/notes/PHYS105/PHYS105-recitation-20200428/',title:"PHYS105-recitation-20200428",section:"PHYS105",content:"Announcements #  Clicker #   The only thing that doesn\u0026rsquo;t change with temperature is mass.\n Atoms are also mostly empty space.\n Ideal gas law #  Molecules of a gas bouncing off the walls of a container on average is the gas pressure.\nGas pressure arises from the temperature of the gas molecules.\nIncreasing the temp increases the pressure. Increasing the number of molecules also increases the temperature.\nDecreasing the volume of the container increases the pressure.\nGases reach their minimum thermal energy at 0 kelvin (absolute zero). Because of quantum mechanics, you can never stop all molecular motion.\nThis was understood before even the molecular theory.\nExamples #  Lets use the ideal gas law:\nSo lets interpret this:\nCheck the periodic table for the atomic number of N (the number of protons/electrons in an atom). And the bottom number is the atomic mass in g/mol\nRemember that nitrogen in the gasous state is a diatomic molecule. Since there are two molecules, it has 26 grams per mole.\nSolve for the volume:\nAll gases at standard temp and pressure, all gases occupy the same volume regardless of the makeup.\n Start with the ideal gas law:\nRemember to convert to kelvin to use the ideal gas law.\n We\u0026rsquo;re looking for (h) here where the red portion is the gas in the bell:\nWe need to find the pressure final (P_f).\nwhere (D) is the depth of water.\nConvert:\nNow we can solve for (v_f)\nLets find out what (v_o) is so we can finish it.\nThis problem has some similarities to the next quiz.\n"}),a.add({id:206,href:'/notes/PHYS105/PHYS105-recitation-20200430/',title:"PHYS105-recitation-20200430",section:"PHYS105",content:"HW #  2 #  A\nB\nSolve for (K)\n5 #  7 #  Part b asks for the same thing but with water, then you find the difference in the overflows.\nNext HW #  For the next HW assignment we need to define gauge pressure.\nThe gauge pressure is like what you measure when you measure your tire pressure. Its not the pressure of the gas inside, its the pressure of the gas inside above normal atmosphere. You can\u0026rsquo;t use gauge pressure in the ideal gas law!\nQuiz 9 #  "}),a.add({id:207,href:'/notes/PHYS105/PHYS105-recitation-20200505/',title:"PHYS105-recitation-20200505",section:"PHYS105",content:"Announcements #  Today #  Discussion #  The melting process is breaking the bonds\nThe temp stays the same while changing from liquid to gas also.\nMelting and evaporating are cooling processes.\nFreezizng and condensating are warming processes.\n The system is the ice, aluminum, and the water. Isolated from the environment.\nThere are three possible cases:\nWe know the water and liquid will cool, but we\u0026rsquo;re letting the sign take care of it.\nThe ice warms to 0 degrees c then starts to melt. And the liquid warms.\nThe way that heat flows is the sign of the term, if positive its assuming its flowing in:\nLets look at conduction in a solid:\nAs the solid warms, the molecules start to vibrate.\nThe energy will start to transfer via lattice vibrations. Solids tend to be better conductors because of the vibrations.\n(R) value is like a resistance to heat flow.\n"}),a.add({id:208,href:'/notes/PHYS105/PHYS105-recitation-20200507/',title:"PHYS105-recitation-20200507",section:"PHYS105",content:"Announcements #  Discussion #  N means no change C means change on this summary.\n  If you travel around a PV diagram in the clockwise direction the net work will be negative. If counterclockwise, the work done on the gas is positive.\nHW #  5 tonights #  7 tomorrows #  "}),a.add({id:209,href:'/notes/PHYS105/PHYS105-recitation-20200512/',title:"PHYS105-recitation-20200512",section:"PHYS105",content:"Announcements #  HW #  3 #  4 #  7 #   Other questions #  It is reflecting all colors because of its crystal structure, so it is not absorbing a lot of heat.  It adds a lot of thermal mass so it takes a lot more energy to cool down the entire room.\nAir is a worse conductor of heat than water.\nShiney side will reflect more, so shiny side in lets heat thru then traps it inside.\nThe amount of mass in the pot is a lot more so it has a lot more potential to dump out heat to your hand.\n"}),a.add({id:210,href:'/notes/PHYS105/PHYS105-recitation-20200514/',title:"PHYS105-recitation-20200514",section:"PHYS105",content:"HW 22 #  4 #  Solve for (T_H)\n10 #  HW 21 #  2 #  Quiz 11 #  Calculate the value (P_A) and the circled empty values of the table:\n"}),a.add({id:211,href:'/notes/STATS50/STATS50-lecture-notes/',title:"STATS50-lecture-notes",section:"STATS50",content:"STATS 50 lecture notes #  lecture_notes.pdf\n"})})()