<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS134 on Notes</title>
    <link>http://zedchance.github.io/notes/CS134/</link>
    <description>Recent content in CS134 on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/CS134/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS134-lecture-20210601</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210601/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210601/</guid>
      <description>Course orientation #  Syllabus #  134Sy_Summer2021.pdf  Notes during orientation #   5 assignments, 5 weekly homeworks Effort may be taken into account during assignment grading Assignments build upon the previous assignment Midterm on June 22, and final on last day  Introduction to database management systems #  Files
 persistent on disk easy to work with   DBMS
 needs knowledge of software needs to design database structure can handle more complex situations    Imagine we have 2 different files: student_info and grade_record</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210602</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210602/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210602/</guid>
      <description>DBMS cont. #  Database users #  If we&amp;rsquo;re storing student information in a database, we&amp;rsquo;ll have fields such as
 age birthdate  If we want to store one in the database, which should we pick? Why only one?
We should choose the birthdate because
 we can derive the age birthdate is also more accurate of a measure of age we won&amp;rsquo;t need to increment the age in the database every year  What is the disadvantage of saving both?</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210603</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210603/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210603/</guid>
      <description>ER model cont. #  Structure constraint cont. #  The reason we have both   \( M \)  and  \( N \)  is because they are are both in the same association. It is okay to reuse  \( M \)  in other places in the diagram.
Note: The double line from employee to works_for indicates the total participation.  Weak entity #  Entity has</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210607</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210607/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210607/</guid>
      <description>ER model exercise cont. #  Add this assignment into the weekly hw upload.    The university keeps track of each student&amp;rsquo;s name (first name, middle name, last name), student number, social security number, permanent address and phone, birthdate, sex, class (e.g. freshman, sophomore, &amp;hellip;, graduate), and degree program (e.g. B.A., B.S., &amp;hellip;, Ph.D.). Some user applications need to refer to the street, city, state, and zip of the student&amp;rsquo;s permanent address, and to the student&amp;rsquo;s last name.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210608</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210608/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210608/</guid>
      <description>RE assignment 1 #  account_number is a unique value.
Relational model cont. #  State cont. #  R(color, bit) dom(color) = {blue, green, red} dom(bit) = {0, 1}    color bit     blue 0   blue 1   green 0   green 1   red 0   red 1    This is all the possible combinations, but lets say we have a state like</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210609</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210609/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210609/</guid>
      <description>Relational database schemas #  IC = integrity constraints
Recall, a state is a collection of all the instances.
Example of schema and state #  Valid/invalid state #  Update operations on relations #  Whenever we do any of these update operations, there is a chance that the constraints may be violated. These violations may propagate to other tables.
REJECT is the most common action taken. CASCADE is also common, but requires setup in DBMS.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210610</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210610/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210610/</guid>
      <description>Relational model cont. #  Weak entity #  Notice that the employee will be the owner of the depending weak entity. The primary key will be part of the foreign key and the weak attribute.
Remember,
 primary keys are underlined foreign keys have arrows pointing to the other reference  Multivalues attributes #  Consider this ER-diagram,
We can handle this in our relational model by creating another table called dept_locations,</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210614</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210614/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210614/</guid>
      <description>Announcements
 Assignment 2 is posted   Relational algebra cont. #  SELECT cont. #  When cascaded: the conditions can be in different order but they will produce the same output. The conditions can be connected by logical and.
If we compose 2 select operations
  \[\begin{aligned} \sigma_{\text{salary } &amp;gt; 7300} ( \sigma_{\text{dno = } 5 } (\text{ employee })) \end{aligned}\]  We can combine the 2 conditions with a logical and</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210615</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210615/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210615/</guid>
      <description>Assignment 1 solution #  Relational algebra cont. #  Intersection #  They must be union compatible.
  \[\begin{aligned} a \leftarrow \text{student} \cap \text{instructor} \end{aligned}\]  Include in weekly homework.  Set difference #  Must be union compatible.
The result is a new relation with the same schema.
 \[\begin{aligned} a \leftarrow \text{student} - \text{instructor} \end{aligned}\]   \[\begin{aligned} a \leftarrow \text{instructor} - \text{student} \end{aligned}\]  This returns only John Smith.</description>
    </item>
    
  </channel>
</rss>
