<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS134 on Notes</title>
    <link>http://zedchance.github.io/notes/CS134/</link>
    <description>Recent content in CS134 on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/CS134/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS134-lecture-20210601</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210601/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210601/</guid>
      <description>Course orientation #  Syllabus #  134Sy_Summer2021.pdf  Notes during orientation #   5 assignments, 5 weekly homeworks Effort may be taken into account during assignment grading Assignments build upon the previous assignment Midterm on June 22, and final on last day  Introduction to database management systems #  Files
 persistent on disk easy to work with   DBMS
 needs knowledge of software needs to design database structure can handle more complex situations    Imagine we have 2 different files: student_info and grade_record</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210602</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210602/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210602/</guid>
      <description>DBMS cont. #  Database users #  If we&amp;rsquo;re storing student information in a database, we&amp;rsquo;ll have fields such as
 age birthdate  If we want to store one in the database, which should we pick? Why only one?
We should choose the birthdate because
 we can derive the age birthdate is also more accurate of a measure of age we won&amp;rsquo;t need to increment the age in the database every year  What is the disadvantage of saving both?</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210603</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210603/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210603/</guid>
      <description>ER model cont. #  Structure constraint cont. #  The reason we have both   \( M \)  and  \( N \)  is because they are are both in the same association. It is okay to reuse  \( M \)  in other places in the diagram.
Note: The double line from employee to works_for indicates the total participation.  Weak entity #  Entity has</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210607</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210607/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210607/</guid>
      <description>ER model exercise cont. #  Add this assignment into the weekly hw upload.    The university keeps track of each student&amp;rsquo;s name (first name, middle name, last name), student number, social security number, permanent address and phone, birthdate, sex, class (e.g. freshman, sophomore, &amp;hellip;, graduate), and degree program (e.g. B.A., B.S., &amp;hellip;, Ph.D.). Some user applications need to refer to the street, city, state, and zip of the student&amp;rsquo;s permanent address, and to the student&amp;rsquo;s last name.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210608</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210608/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210608/</guid>
      <description>RE assignment 1 #  account_number is a unique value.
Relational model cont. #  State cont. #  R(color, bit) dom(color) = {blue, green, red} dom(bit) = {0, 1}    color bit     blue 0   blue 1   green 0   green 1   red 0   red 1    This is all the possible combinations, but lets say we have a state like</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210609</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210609/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210609/</guid>
      <description>Relational database schemas #  IC = integrity constraints
Recall, a state is a collection of all the instances.
Example of schema and state #  Valid/invalid state #  Update operations on relations #  Whenever we do any of these update operations, there is a chance that the constraints may be violated. These violations may propagate to other tables.
REJECT is the most common action taken. CASCADE is also common, but requires setup in DBMS.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210610</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210610/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210610/</guid>
      <description>Relational model cont. #  Weak entity #  Notice that the employee will be the owner of the depending weak entity. The primary key will be part of the foreign key and the weak attribute.
Remember,
 primary keys are underlined foreign keys have arrows pointing to the other reference  Multivalues attributes #  Consider this ER-diagram,
We can handle this in our relational model by creating another table called dept_locations,</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210614</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210614/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210614/</guid>
      <description>Announcements
 Assignment 2 is posted   Relational algebra cont. #  SELECT cont. #  When cascaded: the conditions can be in different order but they will produce the same output. The conditions can be connected by logical and.
If we compose 2 select operations
  \[\begin{aligned} \sigma_{\text{salary } &amp;gt; 7300} ( \sigma_{\text{dno = } 5 } (\text{ employee })) \end{aligned}\]  We can combine the 2 conditions with a logical and</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210615</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210615/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210615/</guid>
      <description>Assignment 1 solution #  Relational algebra cont. #  Intersection #  They must be union compatible.
  \[\begin{aligned} a \leftarrow \text{student} \cap \text{instructor} \end{aligned}\]  Include in weekly homework.  Set difference #  Must be union compatible.
The result is a new relation with the same schema.
 \[\begin{aligned} a \leftarrow \text{student} - \text{instructor} \end{aligned}\]   \[\begin{aligned} a \leftarrow \text{instructor} - \text{student} \end{aligned}\]  This returns only John Smith.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210616</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210616/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210616/</guid>
      <description>Relational algebra cont. #  Natural join cont #    \[\begin{aligned} \text{dept locs} \leftarrow \text{department} * \text{locations} \end{aligned}\]  Our natural join results in this table
Common mistakes when using join #  Its common to misuse join/natural join. Consider this example, if we have 2 entities,  \( R \)  and  \( S \)  :
 \[\begin{aligned} R(a, b) &amp;amp;&amp;amp; S(b, d, f) \end{aligned}\]  If we want to join on  \( b \)  , we can do the natural join:</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210617</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210617/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210617/</guid>
      <description>Notes on upcoming exam #  The join symbol on canvas will be represented as
SQL #  File: SQL Slides  We can use SQL to implement our relational models in code.
History #  We will be covering the SQL core.
 DDL = data definition language, this corresponds to our relational model. insert, delete, update query  DBMS should implement all of the SQL standards, but they may not in some places.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210621</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210621/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210621/</guid>
      <description>Assignment 2 solution #  Assignment 3 solutions #  SQL cont. #  INSERT #  The attributes (VALUES) are listed one by one in the same order as when the table was declared. If they are put in the wrong order the attributes will go into the wrong places (or violate domain constraints). You can specify the attributes and their order is
INSERT INTO EMPLOYEE(FNAME, LNAME, SSN, DNO)  VALUES (&amp;#39;Richard&amp;#39;, &amp;#39;Marini&amp;#39;, &amp;#39;1932914921&amp;#39;, 4) The attributes that are not null must be specified in the command.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210623</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210623/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210623/</guid>
      <description>MySQL assignment 4 #  Note
 Login to MySQL server using csus username (ssh) MySQL on this server is case sensitive  SQL cont. #  Aliases #  Aliases are other names for a table.
Consider our normal company schema,
SELECT DNAME, L.DLOCATION FROM DEPARTMENT AS D,  DEPT_LOCATION AS L WHERE D.DNUMBER=L.DNUMBER; Here
 D is an alias for DEPARTMENT L is an alias for DEPT_LOCATION  To make 2 aliases of one entity:</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210624</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210624/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210624/</guid>
      <description>SQL cont. #  Comparison operators #  To list all the names of employees whose salary is greater than the salary of all the employees in department 5:
SELECT e1.lname, e1.fname FROM employee AS e1 WHERE e1.salary &amp;gt; ALL (SELECT e.salary  FROM employee AS e  WHERE e.dno=5);  it is suggested to use aliases when using nested queries if instead our where clause was E1.SALARY &amp;gt; some (.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210628</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210628/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210628/</guid>
      <description>SQL cont. #  Aggregate functions cont. #  Include in weekly assignment.  List each employee(ssn, fname, lname) who has more than 3 daughters and the salary of the employee is less than 60000.
SELECT e.ssn, e.fname, e.lname FROM employee AS e WHERE e.salary &amp;lt; 60000 AND  (SELECT COUNT(*)  FROM dependent AS dep  WHERE e.ssn=dep.essn AND  dep.relationship=&amp;#39;daughter&amp;#39;) &amp;gt; 3; GROUP BY clause #  A clause GROUP BY is used to create sub groups.</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210629</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210629/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210629/</guid>
      <description>SQL cont. #  Subqueries can be used inside insert statements:
This insert statement will update the numbers dynamically based on the response from the subquery. The next time an employee is inserted, we can run this insert statement to update DEPTS_INFO using a trigger.
Or, we can use views&amp;hellip;
Virtual table view #  CREATE VIEW dept_info_view AS  SELECT dname,  COUNT(*) AS no_of_emps,  SUM(salary) AS total_sal  FROM department, employee  WHERE dnumber=dno  GROUP BY dname; This results in a self updating table, called a view:</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210702</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210702/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210702/</guid>
      <description>Normalization cont. #  We can also use an alternate notation to indicate dependencies:
If we remove the ssn then the dependency is no longer true.
Second normal form #  An attribute that is part of any candidate key is a prime attribute. If we have a relation   \[\begin{aligned} R(a, b, c, d, e) \end{aligned}\]  and our candidate keys are  \( \{a,b\} \)  and  \( c \)  , that means our prime attributes are  \( a,b,c \)  .</description>
    </item>
    
    <item>
      <title>CS134-lecture-20210707</title>
      <link>http://zedchance.github.io/notes/CS134/CS134-lecture-20210707/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS134/CS134-lecture-20210707/</guid>
      <description>Storage cont. #  Sorted files cont. #  Since inserting into a ordered structure is expensive, we keep track of new inserts in a separate file.
Master files are ordered, overflow file are unordered.
New inserts go to the overflow file.
When we search:
 Start by searching the ordered master file,   \( O(\lg n) \)   If we don&amp;rsquo;t find it, it is possible that it is in the overflow file   Search the unordered overflow file,  \( O(n) \)  however it is a small file  If at any point during the search process we find a match, the search returns.</description>
    </item>
    
  </channel>
</rss>
