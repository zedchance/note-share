---
title: CS135-lecture-20210218
tags: ["immutability", "racket"]
---

# Immutability

Strings in Java are an example of immutability.

Something like

```java
s = s + "abc";
```

Actually creates a new object with the 2 new strings, and the reference to `s` is updated, but actual strings are immutable.

## Lists

In Java a popular List class is `LinkedList`.

![IMAGE](/853D3C5EAB6079BA8BEE413E038ACCA1.jpg)

A change to either `a` or `b` will change both!

```java
a.add(1, 5);
b.get(1);
```

![IMAGE](/5AE5F8B89006BF907A108C196865BF40.jpg)

### Lets make an immutable List (pseudo):

```
a = new List
```

![IMAGE](/AB5270595F5BC0F61454E65CCEF9E1A3.jpg)

```
b)
```

`cons` stands for "construct new list from old."

![IMAGE](/D3F21DE0EC704DE7C18804A804C47768.jpg)

```
c)
```

![IMAGE](/06E43ACE451142E1B3B6CBF0DE563ADE.jpg)

This "creates a new view" of the list, without disturbing any older views of the list.

```
d)
```

![IMAGE](/3549B950A2440770410F085360481F64.jpg)

So `a = []`, `b = [1]`, `c = [2,1]`, `d = [3,1]`.

```
e)
```

`rest` gives back the list without the first element, so `e = [1]`

For efficiency and to keep views from changing, changes only happen at the front of the list.

---

## Implementing it

![IMAGE](/8C42A6699687387759557443568B600E.jpg)
![IMAGE](/96578EC22AC21E9B304EC3CD447E865F.jpg)
![IMAGE](/F432C815A571105B45908D5827FA84C9.jpg)
![IMAGE](/D85F53DEAD372905FE218033FCF03BA4.jpg)
![IMAGE](/9C50FBDF94531AFB17EB000C4B16BDF0.jpg)
![IMAGE](/F10B587A3FCBDDE8EA51C2DBB8BA504C.jpg)
![IMAGE](/C38D0C20EC2DC3B8EDED3196B3996A35.jpg)
![IMAGE](/FFF2767A055C53D299AB2591DF6D9C01.jpg)

## Racket

https://docs.racket-lang.org/guide/to-scheme.html

Test using www.wescheme.org/openEditor

- `empty` is a constant for the empty list
- `cons` is the function that adds to the beginning of a list. `(cons elem list)` `elem` is element to be added, `list` is the list to be added to
- `(rest nonemptylist)` returns the list of everything but the first element
- `(first nonemptylist)` returns the first element of the list
- `(empty? list)` returns true or false (because the `?` "huh?") if the list is empty
- `(list 1 2 3)` creates a list with elements `1` `2` `3`, can also be alised as `'(1 2 3)`

```rkt
empty -- const for the empty list
(cons elem list)
(rest nonemptylist)
(first nonemptylist)
(empty? list)
(list 1 2 3)
'(1 2 3)
```

```rkt
(empty? empty)                    ; true
(empty? (list 1 2 3))             ; false
(cons 3 empty)                    ; (list 3)
(cons 2 (cons 3 empty)            ; (list 2 3)
(cons 1 (cons 2 (cons 3 empty)))  ; (list 1 2 3)
'(1 2 3)                          ; (list 1 2 3)
(first '(1 2 3))                  ; 1
(rest '(1 2 3))                   ; (list 2 3)
```

The `if` construct in Racket:

```rkt
(if boolexpr
    trueexpr
    falseexpr)
```

### An example to return the length of a list:

Some pseudo for recursive functions:

```
if (very small)
  solve directly
else
  make recursive call (use smaller-solver)
```

For our problem:

```
if (empty list)
  return 0
else
  return 1 + listlen(list without front)
```

In racket:

```rkt
(define (listlen xs)
  (if (empty? xs)
      0
      (+ 1 (listlen (rest xs)))))
```

Note
- Traditional in Racket to pass the list name as plural: `xs`
- There are no returns in Racket, everything is an expression

We can then run this function via the interactions panel

```racket
(listlen empty)           ; 0
(listlen '(1))            ; 1
(listlen '(1 1))          ; 2
```
