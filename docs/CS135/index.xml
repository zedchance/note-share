<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS135 on Notes</title>
    <link>http://zedchance.github.io/notes/CS135/</link>
    <description>Recent content in CS135 on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/CS135/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS135-hw-20210203</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-hw-20210203/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-hw-20210203/</guid>
      <description>FSM #  Alphabets: {a, b} or {0, 1}
  Strings which begin and end with a different letter
#alphabet a b #states 0 aa ab ba bb #initial 0 #accepting ab ba #transitions 0:a&amp;gt;aa 0:b&amp;gt;bb aa:a&amp;gt;aa aa:b&amp;gt;ab bb:b&amp;gt;bb bb:a&amp;gt;ba ab:b&amp;gt;ab ab:a&amp;gt;aa ba:a&amp;gt;ba ba:b&amp;gt;bb   Strings with at least 2 occurences of ab
#alphabet a b #states 0 s1 1 s2 2 #initial 0 #accepting 2 #transitions 0:a&amp;gt;s1 0:b&amp;gt;0 s1:a&amp;gt;s1 s1:b&amp;gt;1 1:a&amp;gt;s2 1:b&amp;gt;1 s2:a&amp;gt;s2 s2:b&amp;gt;2 2:a&amp;gt;2 2:b&amp;gt;2   Strings with exactly one 0 and at least one 1</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210126</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210126/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210126/</guid>
      <description>http://athena.ecs.csus.edu/~mei/135/index.html
CT = Computing theory
Resources on the Prof&amp;rsquo;s website for Set Theory to review
This is not correct:</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210129</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210129/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210129/</guid>
      <description>dfa.pdf</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210201</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210201/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210201/</guid>
      <description>http://krovetz.net/135/module_reg/fa_design.html
This FSM keeps track of whether there are an even or odd number of a&amp;rsquo;s.
#alphabet a b #states even odd #initial even #accepting odd #transitions even:a&amp;gt;odd even:b&amp;gt;even odd:a&amp;gt;even odd:b&amp;gt;odd FSM Design advice #   Have a meaning for each state, its the only memory a FA has First write just the part that accepts good strings Make sure your FA is legal. Double check that every state has an arrow out for each alphabet symbol and that their&amp;rsquo;s a start state Try to break your solutions.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210204</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210204/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210204/</guid>
      <description>re.pdf</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210205</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210205/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210205/</guid>
      <description>DFA, RE, and NFA have equal expressive power.
 Every DFA can be converted into an equivalent RE Every RE can be converted into an equivalent NFA Every NFA can be converted into an equivalent DFA  Today we will take a NFA and convert it into a DFA.
abba will leave you in states 1 and 3.
Our NFA:
#states empty 13 2 23 3 123 #initial 13 #accepting 13 123 #alphabet a b #transitions 13:a&amp;gt;13 13:b&amp;gt;2 2:a&amp;gt;23 2:b&amp;gt;3 23:a&amp;gt;123 23:b&amp;gt;3 3:a&amp;gt;13 3:b&amp;gt;empty 123:a&amp;gt;123 123:b&amp;gt;23 empty:a&amp;gt;empty empty:b&amp;gt;empty This is now a legal DFA, except the accept state.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210209</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210209/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210209/</guid>
      <description>How to show what a finite atomata can&amp;rsquo;t do #  Pumping Lemma for regular languages #  Let   \(M\)  be a DFA with  \(p\)  states. Let  \(s \in L(M)\)  , and  \(|s| \geq p\)  , &amp;ldquo;the length of  \(s\)  is greater than or equal to the number of states.&amp;rdquo;
At one point we reach a state that is going to be visited twice first, we can call this &amp;ldquo;the first state that gets repeated.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210216</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210216/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210216/</guid>
      <description>Regular languages #  Any language specifiable by regular expression or finite automata.
RE to NFA #  Building blocks
Example #  (0+1)*1</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210217</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210217/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210217/</guid>
      <description>Example proofs for pumping lemma #  1 #  Let   \(L\)  be the set of all strings with an equal number of 0 and 1 over the alphabet {0,1}. i.e. { \(\lambda\)  , 01, 10, 0011, 0101, 0110, 1001 &amp;hellip;}
Theorem:  \(L\)  is not regular.
Proof:
For purposes of contradicition assume  \(L\)  is regular. Because  \(L\)  is regular there must be a pumping length  \(p\)  .</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210218</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210218/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210218/</guid>
      <description>Immutability #  Strings in Java are an example of immutability.
Something like
s = s + &amp;#34;abc&amp;#34;; Actually creates a new object with the 2 new strings, and the reference to s is updated, but actual strings are immutable.
Lists #  In Java a popular List class is LinkedList.
A change to either a or b will change both!
a.add(1, 5); b.get(1); Lets make an immutable List (pseudo): #  a = new List b = a.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210225</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210225/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210225/</guid>
      <description>Tail recursion and accumulators #  Tail recursion #  Claim: recursive overhead is expensive.
Not always the case.
For example:
We have a function foo(x) that takes a parameter x.
foo(x): if (x == 0) return answer else // do stuff, then make recursive call return foo(x - 1) The value of x is being decremented, and being passed in as the new x in the next call. Once the base case is returned there isn&amp;rsquo;t any more work that needs to be done.</description>
    </item>
    
  </channel>
</rss>
