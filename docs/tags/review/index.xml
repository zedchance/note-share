<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>review on Notes</title>
    <link>http://zedchance.github.io/notes/tags/review/</link>
    <description>Recent content in review on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/tags/review/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS130-lecture-20201021</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201021/</guid>
      <description>Midterm review #  MidTermReview.txt
Contents Everything covered from Module 1 to Module 6
Analysis of algorithm
 Asymptotic notations Best-case, average-case, worst-case Be able to provide time and space analysis for an given algorithm  Memory of a process
 What are the four sections? (code, data, heap, stack) What does each section contain? Understand function call and stack-based memory allocation  Recursion
 Base case Recursive vs. iterative approach, every recursive method can be implemented iteratively Consider stack-based memory allocation in space analysis  Sorting Algorithms</description>
    </item>
    
    <item>
      <title>CS130-lecture-20201209</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20201209/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20201209/</guid>
      <description>Review #  Assignment 5 solutions #  8:
9:
CORRECTION: 8 is a weight of 78, the picture is correct but the table shows 82.
11:
Assignment 4 solutions #  Rest of code in solutions on canvas
Final review #  </description>
    </item>
    
    <item>
      <title>CS137-lecture-20210309</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210309/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210309/</guid>
      <description>Exam 1 review #  </description>
    </item>
    
    <item>
      <title>CS137-lecture-20210420</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210420/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210420/</guid>
      <description>Exam 2 review #  Sequential circuit small design #   All small and large sequential circuits are made of flip flops and sets of combination circuits Contrary to CC (combination circuits), a sequential circuit design has states and transitions from a current state to the next state A sequential circuit design problem is typically modeled as a finite state diagram FSD consists of circles as states and arcs (arrows) as transitions, which specifies the behavior of a sequential circuit FSD is systematically converted into circuit called finite state machine Finite state machines designs categorized into Mealy, Moore, or hybrid Mealy is a FSM whose output values are determined by its current e state and input.</description>
    </item>
    
    <item>
      <title>CS137-lecture-20210513</title>
      <link>http://zedchance.github.io/notes/CS137/CS137-lecture-20210513/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS137/CS137-lecture-20210513/</guid>
      <description>Review #   Boolean expressions, combinational circuit design IEEE754 example Sequential circuit design Finite state machine design Finite state machine examples Memory technology Instruction set architectures  </description>
    </item>
    
    <item>
      <title>CS138-lecture-20210316</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210316/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210316/</guid>
      <description>Review for exam #  Example question set for Ch 1-2 #    What are the layers in TCP/IP protocol stack?
Application, transport, network, link, physical
  What are layers in OSI reference model?
Extra 2 layers are presentation and
  What is the major difference between packet switching and circuit switching?
Circuit reserves some resources, packet switchings allows sharing
  What is the difference between routing and forwarding?</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210413</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210413/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210413/</guid>
      <description>Review #   Devices, links, packet switches Protocols define format and order of messages sent and received among network entities Routers Routing and forwarding Packet switching   Worms do not need user&amp;rsquo;s interaction, viruses do Distributed denial of service. TLD name servers are easier to attack Recording packets passing through network Sends a packet with a forced source address Sends bogus replies to the DNS servers   P2P is more scalable IP address and port number TCP, because it is reliable TCP SSL is implemented at the app layer   Persistent allows multiple objects to be sent over a single connection set-cookie cookie Database or back end Cookie file managed by browser   host to IP mapping, host nick name, mail server nick name, load distribution iterative and recursive (fruit.</description>
    </item>
    
  </channel>
</rss>
