<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>banker&#39;s algorithm on Notes</title>
    <link>http://zedchance.github.io/notes/tags/bankers-algorithm/</link>
    <description>Recent content in banker&#39;s algorithm on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/tags/bankers-algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS139-lecture-20211102</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211102/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211102/</guid>
      <description>Deadlocks cont. #  Resource allocation graph cont. #     \( P_2 \)  and  \( P_4 \)  have the ability to exit, so the resources they hold will be allocated elsewhere. No deadlock.
We can use a depth first search to look for cycles, to detect the possibility of deadlock.
Methods for handling deadlocks #   to impose total order: if we have multiple resources, force process requests for resources in an increasing order of enumeration  So, from the example before, if we swap the order in which each thread obtains lock (so they request the locks in the same order), we eliminate the deadlock:</description>
    </item>
    
    <item>
      <title>CS139-lecture-20211104</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20211104/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20211104/</guid>
      <description>Deadlocks cont #  Banker&amp;rsquo;s algorithm cont. #  Recall that the safety subroutine simulates allocating all resources, and if able to if returns true (because it is considered a safe state). If it is unable to simulate allocating all resources, it will return false.
The second subroutine of the Banker&amp;rsquo;s algorithm is the resource request:
 simulates allocating resource requests by modifying the state of the process if safe, the resources can be allocated otherwise, it has to wait  Example using Banker&amp;rsquo;s algorithm #  So first we run the safety algorithm:</description>
    </item>
    
  </channel>
</rss>
