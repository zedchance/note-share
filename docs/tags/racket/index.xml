<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>racket on Notes</title>
    <link>http://zedchance.github.io/notes/tags/racket/</link>
    <description>Recent content in racket on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/tags/racket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS135-hw-20210302</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-hw-20210302/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-hw-20210302/</guid>
      <description>Old MM2 hw #  1 Write a recursive Racket function &amp;ldquo;sum-alternate&amp;rdquo; that takes a positive integer x as a parameter. The function should return the sum of all the integers x, x-2, x-4, x-6, etc, as long as the numbers are positive. For example, (sum-alternate 5) should evaluate to 5+3+1, and (sum-alternate 6) should evaluate to 6+4+2.
(define (sum-acc sum acc) (if (&amp;lt;= sum 0) acc (sum-acc (- sum 2) (+ sum acc)))) (define (sum-alternate sum) (sum-acc sum 0))    2 Write a recursive Racket function &amp;ldquo;sum&amp;rdquo; that takes two integers as parameters, each greater or equal to zero, and evaluates to their sum.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210218</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210218/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210218/</guid>
      <description>Immutability #  Strings in Java are an example of immutability.
Something like
s = s + &amp;#34;abc&amp;#34;; Actually creates a new object with the 2 new strings, and the reference to s is updated, but actual strings are immutable.
Lists #  In Java a popular List class is LinkedList.
A change to either a or b will change both!
a.add(1, 5); b.get(1); Lets make an immutable List (pseudo): #  a = new List b = a.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210225</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210225/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210225/</guid>
      <description>Tail recursion and accumulators #  Tail recursion #  Claim: recursive overhead is expensive.
Not always the case.
For example:
We have a function foo(x) that takes a parameter x.
foo(x): if (x == 0) return answer else // do stuff, then make recursive call return foo(x - 1) The value of x is being decremented, and being passed in as the new x in the next call. Once the base case is returned there isn&amp;rsquo;t any more work that needs to be done.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210227</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210227/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210227/</guid>
      <description>Functional Programming #  Other functions may write to this.sum, so this could be incorrect in the future.
Any loop can be turned into a recursively structured function.
Example of pow #  int pow(int x, int y) if (very small) solve directly else solve with smaller_pow So when is exponentiation very small? This is the base case, where y = 0.
int pow(int x, int y) if (y == 0) return 1 else solve with smaller_pow Now we need to figure out the else branch, we know that x^y = x^(y-1) * x.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210307</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210307/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210307/</guid>
      <description>Mergesort in Racket #  Mergesort breaks the list in half and sorts each half recursively.
Some pseudo:
ms(list) front = front half of list back = back half of list ms(front) ms(back) return merge(front, back) In racket, there is a function called drop that takes a list and a number. It drops the numbers off the list. There is also take, that takes the first number of elements of the list and returns them.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210309</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210309/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210309/</guid>
      <description>Tail recursive sum #  (define (sum xs) (if (empty? xs) 0 (+ (first xs) (sum (rest xs))))) This isn&amp;rsquo;t tail recursive however. The recursive call must be the last call in the function. Lets define it tail recursively, we can use an accumulator:
Invariant: acc + sum of xs is desired answer.
(define (sum-helper acc xs) (if (empty? xs) acc (sum-helper (+ acc (first xs)) (rest xs)))) (define (sum xs) (sum-helper 0 xs)) (sum &amp;#39;(1 2 3 4)) ; 10 </description>
    </item>
    
  </channel>
</rss>
