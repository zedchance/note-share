<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network security on Notes</title>
    <link>http://zedchance.github.io/notes/tags/network-security/</link>
    <description>Recent content in network security on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/tags/network-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS138-lecture-20210211</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210211/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210211/</guid>
      <description>RE: Wireshark lab 1. This is an intro to the wireshark software.
observe that the en0 has activity. Double click the card with activity to start packet analyzing.
 Hl = MAC address, Hn = IP address, Ht = port number
Each time the packet goes thru a router, it must go up to the network layer and back down.
At the destination, the layers are removed on the way up to the application layer.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210506</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210506/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210506/</guid>
      <description>Network security #  What is network security? #  Cryptography #  RSA #  + = public, - = private
Given the public key   \( K_{pub} \)  and the private key  \( K_{priv} \)  , we can decrypt anything encrypted by the public key, and vice versa.
Alice invents a symmetric key, and sends it to Bob using RSA encryption. That way the computationally slow RSA algorithm can be used to send the symmetric key, and the symmetric key can be used for continual encryption.</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210511</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210511/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210511/</guid>
      <description>Network security cont. #  RSA cont. #  Authentication #  ap = authentication protocol (fictional)
Challenge-response mechanism for authentication:
 Using symmetric shared key,   \( K_{ab} \)   Alice sends the message to bob saying &amp;ldquo;I am alice&amp;rdquo; Bob generates a random one-time use nonce, and encrypts it with the shared key  \( R = K_{ab}(\text{nonce}) \)   Alice decrypts  \( R \)  based on the symmetric key  \( K_{ab} \)  .</description>
    </item>
    
    <item>
      <title>CS138-lecture-20210513</title>
      <link>http://zedchance.github.io/notes/CS138/CS138-lecture-20210513/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS138/CS138-lecture-20210513/</guid>
      <description>Network security cont. #  Note: These following topics will not be on the final  TLS – transport layer security #  TLS is implemented at application layer.
IPSec – network layer security #  VPN = virtual private network
IKE = internet key exchange, ESP = encapsulating security payloads
Read more on kerberos
Firewalls #  IDS = intrusion detection system
IDS – intrusion detection systems #  Network security summary #  </description>
    </item>
    
  </channel>
</rss>
