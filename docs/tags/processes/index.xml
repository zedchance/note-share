<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>processes on Notes</title>
    <link>http://zedchance.github.io/notes/tags/processes/</link>
    <description>Recent content in processes on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/tags/processes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS139-lecture-20210914</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210914/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210914/</guid>
      <description>Structure cont #  Simple structure #  Layered structure #  A 5 layered approach:
5. operator 4. user programs 3. IO management 2. communication 1. memory management 0. CPU, support for multi program This is easier to construct and debug, however there is a communication overhead. It is impractical to divide the kernel into layers.
Microkernel structure #  Microkernels are easier to extend, but there is a lot of communication overhead.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210916</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210916/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210916/</guid>
      <description>Processes cont. #  Scheduling cont. #  A single linked list works well for ready and wait queues. Note the addition of a tail pointer. The tail pointer gives us a constant time complexity to get to the end of the queue. New processes are added at the tail.
Schedulers #  Note the difference between short-term and long-term schedulers. Long-term scheduling handles multiprogramming.
Note: Read more on medium term scheduling in the text.</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210921</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210921/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210921/</guid>
      <description>Processes cont. #  Termination #  A parent cannot wait on a grandchild.
Inter-process communication #  Message passing
 uses send and receieve API calls slower, more expensive small amount of data distributed   Shared memory
 process A sets aside some memory for process B restrictions must be lifted by kernel faster and cheaper because minimal kernel involvement doesn&amp;rsquo;t work for distributed systems (2 processes on remote machines)    Shared memory communication #  This uses a circular buffer:</description>
    </item>
    
    <item>
      <title>CS139-lecture-20210923</title>
      <link>http://zedchance.github.io/notes/CS139/CS139-lecture-20210923/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS139/CS139-lecture-20210923/</guid>
      <description>Processes cont. #  Using fork and execl #  Consider this code
pid_t pid1, pid2; int status; struct rusage usage; if ((pid1=fork())) { 	printf(&amp;#34;I am parent %d; child is %d\n&amp;#34;,getpid(),pid1); 	pid2=wait3(&amp;amp;status, 0, &amp;amp;usage); 	printf(&amp;#34;exit code for %d is %d\n&amp;#34;, pid2, status); } else { 	execl(&amp;#34;/bin/cat&amp;#34;, &amp;#34;/bin/cat&amp;#34;, &amp;#34;/csc/139/news/0001.txt&amp;#34;, NULL); 	printf(&amp;#34;we should never get here!\n&amp;#34;); } execl loads cat into the child&amp;rsquo;s memory space. When this child cat exits, it will never reach the subsequent printf.</description>
    </item>
    
  </channel>
</rss>
