<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tail recursion on Notes</title>
    <link>http://zedchance.github.io/notes/tags/tail-recursion/</link>
    <description>Recent content in tail recursion on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/tags/tail-recursion/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS130-lecture-20200902</title>
      <link>http://zedchance.github.io/notes/CS130/CS130-lecture-20200902/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS130/CS130-lecture-20200902/</guid>
      <description>Concerning the survey from last class #  The differences between an array and a linked list:
 Access: arrays can access an spot instantly, linked lists need to iterate from the head until they reach the target. Size: arrays are fixed in size, linked lists can become bigger or smaller  Stacks can be implemented using a linked list or an array. FILO
Queues can be implemented using a linked list or a circular array.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210225</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210225/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210225/</guid>
      <description>Tail recursion and accumulators #  Tail recursion #  Claim: recursive overhead is expensive.
Not always the case.
For example:
We have a function foo(x) that takes a parameter x.
foo(x): if (x == 0) return answer else // do stuff, then make recursive call return foo(x - 1) The value of x is being decremented, and being passed in as the new x in the next call. Once the base case is returned there isn&amp;rsquo;t any more work that needs to be done.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210309</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210309/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210309/</guid>
      <description>Tail recursive sum #  (define (sum xs)  (if (empty? xs)  0  (+ (first xs) (sum (rest xs))))) This isn&amp;rsquo;t tail recursive however. The recursive call must be the last call in the function. Lets define it tail recursively, we can use an accumulator:
Invariant: acc + sum of xs is desired answer.
(define (sum-helper acc xs)  (if (empty? xs)  acc  (sum-helper (+ acc (first xs)) (rest xs))))  (define (sum xs)  (sum-helper 0 xs))  (sum &amp;#39;(1 2 3 4)) ; 10 </description>
    </item>
    
  </channel>
</rss>
