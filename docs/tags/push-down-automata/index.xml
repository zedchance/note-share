<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>push-down automata on Notes</title>
    <link>http://zedchance.github.io/notes/tags/push-down-automata/</link>
    <description>Recent content in push-down automata on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://zedchance.github.io/notes/tags/push-down-automata/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS135-lecture-20210310</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210310/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210310/</guid>
      <description>Context-free grammars #  Recall, for regular languages: regular expressions are generators, and finite automata are recognizers. Context-free grammars are the recognizers of context free languages.
Any string we can make in this process is in the language. Any string we can&amp;rsquo;t make in this process is not in the language.
So   \( \{a^n b^n: \text{n is integer}\} \)  is context free. Remember, we couldn&amp;rsquo;t describe this language using regular expressions because finite automata don&amp;rsquo;t have memory.</description>
    </item>
    
    <item>
      <title>CS135-lecture-20210311</title>
      <link>http://zedchance.github.io/notes/CS135/CS135-lecture-20210311/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zedchance.github.io/notes/CS135/CS135-lecture-20210311/</guid>
      <description>Introduction to push-down automata #  A push-down automata is a finite automata with memory, more than what state its currently in. It is a non-deterministic finite automata with a stack for memory. Since it is drawn very similarly to drawing finite automata, we will just notate how the stack is being manipulated on the transitions.
Drawing transitions for PDAs #  Each arrow has a triple: a,b,c, where
 a is the char to consume from input (or   \( \lambda \)  ) b is the char to pop from the top of the stack, b is always popped when following this transition c is a string to push onto the stack (from right to left)  An arrow can be followed if and only if:</description>
    </item>
    
  </channel>
</rss>
